{
  "scope"      : "source.purebasic",
  "completions": [
    {
      "details" : "Write an unicode character to the specified file",
      "contents": "WriteUnicodeCharacter(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteUnicodeCharacter"
    },
    {
      "details" : "Returns the top position, in pixels, of the specified window",
      "contents": "WindowY(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "WindowY"
    },
    {
      "details" : "Change the #Gadget3D item state",
      "contents": "SetGadgetItemState3D(${1:#Gadget3D}, ${2:Position})$3",
      "kind"    : "function",
      "trigger" : "SetGadgetItemState3D"
    },
    {
      "details" : "Change the #Gadget item state",
      "contents": "SetGadgetItemState(${1:#Gadget}, ${2:Position})$3",
      "kind"    : "function",
      "trigger" : "SetGadgetItemState"
    },
    {
      "details" : "Set a NULL value as a bind variable for the next DatabaseQuery() or DatabaseUpdate()",
      "contents": "SetDatabaseNull(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "SetDatabaseNull"
    },
    {
      "details" : "Set a number as a bind variable for the next DatabaseQuery() or DatabaseUpdate()",
      "contents": "SetDatabaseLong(${1:#Database}, ${2:StatementIndex})$3",
      "kind"    : "function",
      "trigger" : "SetDatabaseLong"
    },
    {
      "details" : "Scale the vector drawing coordinate system",
      "contents": "ScaleCoordinates(${1:ScaleX.d})$2",
      "kind"    : "function",
      "trigger" : "ScaleCoordinates"
    },
    {
      "details" : "Returns the last \"Length\": number of characters from the right side of the string",
      "contents": "Right(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "Right"
    },
    {
      "details" : "Resume the thread execution",
      "contents": "ResumeThread(${1:Thread})$2",
      "kind"    : "function",
      "trigger" : "ResumeThread"
    },
    {
      "details" : "Replaces occurrences of \"StringToFind$\" with \"StringToReplace$\" in the given \"String$\"",
      "contents": "ReplaceString(${1:String.s}, ${2:StringToFind.s})$3",
      "kind"    : "function",
      "trigger" : "ReplaceString"
    },
    {
      "details" : "Rename the old file to the new file",
      "contents": "RenameFile(${1:OldFileName.s})$2",
      "kind"    : "function",
      "trigger" : "RenameFile"
    },
    {
      "details" : "Read the quad value associated to the keyword",
      "contents": "ReadPreferenceQuad(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "ReadPreferenceQuad"
    },
    {
      "details" : "Reorder the items of the specified list in a random order",
      "contents": "RandomizeList(${1:List()})$2",
      "kind"    : "function",
      "trigger" : "RandomizeList"
    },
    {
      "details" : "Creates a ProgressBar gadget in the current gadgetList",
      "contents": "ProgressBarGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7",
      "kind"    : "function",
      "trigger" : "ProgressBarGadget3D"
    },
    {
      "details" : "Write a quad (8 bytes) to the specified memory address",
      "contents": "PokeQ(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeQ"
    },
    {
      "details" : "Pause the AudioCD playback",
      "contents": "PauseAudioCD()$1",
      "kind"    : "function",
      "trigger" : "PauseAudioCD"
    },
    {
      "details" : "Check if #XML represents a valid XML object",
      "contents": "IsXML(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "IsXML"
    },
    {
      "details" : "Hide or show the specified #ParticleEmitter",
      "contents": "HideParticleEmitter(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "HideParticleEmitter"
    },
    {
      "details" : "Release the resources of the specified HTTP connection",
      "contents": "FinishHTTP(${1:HttpConnection})$2",
      "kind"    : "function",
      "trigger" : "FinishHTTP"
    },
    {
      "details" : "Draw an image to the vector output",
      "contents": "DrawVectorImage(${1:ImageID})$2",
      "kind"    : "function",
      "trigger" : "DrawVectorImage"
    },
    {
      "details" : "Draw a dotted line along the vector drawing path",
      "contents": "DotPath(${1:Width.d})$2",
      "kind"    : "function",
      "trigger" : "DotPath"
    },
    {
      "details" : "Create a new keyframe for the #NodeAnimation",
      "contents": "CreateNodeAnimationKeyFrame(${1:#NodeAnimation}, ${2:Time}, ${3:x}, ${4:y})$5",
      "kind"    : "function",
      "trigger" : "CreateNodeAnimationKeyFrame"
    },
    {
      "details" : "Return the number of point in the #Spine",
      "contents": "CountSplinePoints(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "CountSplinePoints"
    },
    {
      "details" : "Get the specified CGI cookie value",
      "contents": "CGICookieValue(${1:Name.s})$2",
      "kind"    : "function",
      "trigger" : "CGICookieValue"
    },
    {
      "details" : "Return the X position, in pixels, of the 3D point",
      "contents": "CameraProjectionX(${1:#Camera}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "CameraProjectionX"
    },
    {
      "details" : "Add an arc to the vector drawing path",
      "contents": "AddPathArc(${1:x1.d}, ${2:y1.d}, ${3:x2.d}, ${4:y2.d}, ${5:Radius.d})$6",
      "kind"    : "function",
      "trigger" : "AddPathArc"
    },
    {
      "details" : "Get the contact vector of the current collision",
      "contents": "WorldCollisionContact()$1",
      "kind"    : "function",
      "trigger" : "WorldCollisionContact"
    },
    {
      "details" : "Returns the left position, in pixels, of the specified window",
      "contents": "WindowX(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "WindowX"
    },
    {
      "details" : "Convert a String into a double number",
      "contents": "ValD(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "ValD"
    },
    {
      "details" : "Update the #Terrain tile blend value",
      "contents": "UpdateTerrainTileLayerBlend(${1:#Terrain}, ${2:TileX}, ${3:TileY})$4",
      "kind"    : "function",
      "trigger" : "UpdateTerrainTileLayerBlend"
    },
    {
      "details" : "Change the object order render",
      "contents": "SetRenderQueue(${1:ObjectID})$2",
      "kind"    : "function",
      "trigger" : "SetRenderQueue"
    },
    {
      "details" : "Open a pack file",
      "contents": "OpenPack(${1:#Pack})$2",
      "kind"    : "function",
      "trigger" : "OpenPack"
    },
    {
      "details" : "Initialize the Movie environment for later use",
      "contents": "InitMovie()$1",
      "kind"    : "function",
      "trigger" : "InitMovie"
    },
    {
      "details" : "Creates an HyperLink gadget in the current GadgetList",
      "contents": "HyperLinkGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Text.s})$7",
      "kind"    : "function",
      "trigger" : "HyperLinkGadget"
    },
    {
      "details" : "Get the HTTP headers",
      "contents": "GetHTTPHeader(${1:URL.s})$2",
      "kind"    : "function",
      "trigger" : "GetHTTPHeader"
    },
    {
      "details" : "Returns the system name of the specified desktop, if any",
      "contents": "DesktopName(${1:#Desktop})$2",
      "kind"    : "function",
      "trigger" : "DesktopName"
    },
    {
      "details" : "Returns the depth (bits per pixels) of the specified desktop",
      "contents": "DesktopDepth(${1:#Desktop})$2",
      "kind"    : "function",
      "trigger" : "DesktopDepth"
    },
    {
      "details" : "Returns the 13 characters DES (Unix Crypt: Salt2) hash code",
      "contents": "DESFingerprint(${1:Password.s})$2",
      "kind"    : "function",
      "trigger" : "DESFingerprint"
    },
    {
      "details" : "Create a new mail",
      "contents": "CreateMail(${1:#Mail}, ${2:From.s})$3",
      "kind"    : "function",
      "trigger" : "CreateMail"
    },
    {
      "details" : "Create a new #Light",
      "contents": "CreateLight(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "CreateLight"
    },
    {
      "details" : "Get the number of cookies",
      "contents": "CountCGIParameters()$1",
      "kind"    : "function",
      "trigger" : "CountCGIParameters"
    },
    {
      "details" : "Add a billboard to the #BillboardGroup",
      "contents": "AddBillboard(${1:#BillboardGroup}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "AddBillboard"
    },
    {
      "details" : "Write a string to the CGI output including a carriage return",
      "contents": "WriteCGIStringN(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "WriteCGIStringN"
    },
    {
      "details" : "Setup the default options for all terrains",
      "contents": "SetupTerrains(${1:LightID}, ${2:CompositeMapDistance})$3",
      "kind"    : "function",
      "trigger" : "SetupTerrains"
    },
    {
      "details" : "Set a float as a bind variable for the next DatabaseQuery() or DatabaseUpdate()",
      "contents": "SetDatabaseFloat(${1:#Database}, ${2:StatementIndex})$3",
      "kind"    : "function",
      "trigger" : "SetDatabaseFloat"
    },
    {
      "details" : "Set the specified #Image in the clipboard",
      "contents": "SetClipboardImage(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "SetClipboardImage"
    },
    {
      "details" : "Save a #Sprite on file in various image format",
      "contents": "SaveSprite(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "SaveSprite"
    },
    {
      "details" : "Get the content of a matching group",
      "contents": "RegularExpressionGroup(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "RegularExpressionGroup"
    },
    {
      "details" : "Check if an event occured on a client",
      "contents": "NetworkClientEvent(${1:Connection})$2",
      "kind"    : "function",
      "trigger" : "NetworkClientEvent"
    },
    {
      "details" : "Returns information about the available memory in the computer",
      "contents": "MemoryStatus(${1:StatusType})$2",
      "kind"    : "function",
      "trigger" : "MemoryStatus"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsLight(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "IsLight"
    },
    {
      "details" : "Initialize the sound environment. If it returns 0 then no sound can be played on this computer,",
      "contents": "InitSound()$1",
      "kind"    : "function",
      "trigger" : "InitSound"
    },
    {
      "details" : "Free a XML tree",
      "contents": "FreeXML(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "FreeXML"
    },
    {
      "details" : "Return the pitch of the bone, relative to the #Entity",
      "contents": "EntityBonePitch(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityBonePitch"
    },
    {
      "details" : "Start a Drag and Drop operation with a list of Files",
      "contents": "DragFiles(${1:Files.s})$2",
      "kind"    : "function",
      "trigger" : "DragFiles"
    },
    {
      "details" : "Defines a new #Terrain tile",
      "contents": "DefineTerrainTile(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:HeightMap.s}, ${5:FlipX})$6",
      "kind"    : "function",
      "trigger" : "DefineTerrainTile"
    },
    {
      "details" : "Copy the content of the debug output window into the clipboard",
      "contents": "CopyDebugOutput()$1",
      "kind"    : "function",
      "trigger" : "CopyDebugOutput"
    },
    {
      "details" : "Return the total numbers of tracks on the CD available for playing",
      "contents": "AudioCDTracks()$1",
      "kind"    : "function",
      "trigger" : "AudioCDTracks"
    },
    {
      "details" : "Returns the Arc-Tangent of x/y, in radian",
      "contents": "ATan2(${1:x})$2",
      "kind"    : "function",
      "trigger" : "ATan2"
    },
    {
      "details" : "Add an icon in the SysTray area",
      "contents": "AddSysTrayIcon(${1:#SysTrayIcon}, ${2:WindowID})$3",
      "kind"    : "function",
      "trigger" : "AddSysTrayIcon"
    },
    {
      "details" : "Convert a String into a float number",
      "contents": "ValF(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "ValF"
    },
    {
      "details" : "Returns the original string converted into upper case characters",
      "contents": "UCase(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "UCase"
    },
    {
      "details" : "Change a color in the Gadget item",
      "contents": "SetGadgetItemColor(${1:#Gadget}, ${2:Item}, ${3:ColorType})$4",
      "kind"    : "function",
      "trigger" : "SetGadgetItemColor"
    },
    {
      "details" : "Rotate the #Node",
      "contents": "RotateNode(${1:#Node}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "RotateNode"
    },
    {
      "details" : "Rotate the #Entity",
      "contents": "RotateEntity(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "RotateEntity"
    },
    {
      "details" : "Rotate the #Camera",
      "contents": "RotateCamera(${1:#Camera}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "RotateCamera"
    },
    {
      "details" : "Rotate the #BillboardGroup",
      "contents": "RotateBillboardGroup(${1:#BillboardGroup}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "RotateBillboardGroup"
    },
    {
      "details" : "Returns #True if the ray has crossed an object",
      "contents": "RayCast(${1:x}, ${2:y}, ${3:z}, ${4:DestinationX}, ${5:DestinationY}, ${6:DestinationZ})$7",
      "kind"    : "function",
      "trigger" : "RayCast"
    },
    {
      "details" : "Search or create the group in the preference file",
      "contents": "PreferenceGroup(${1:GroupName.s})$2",
      "kind"    : "function",
      "trigger" : "PreferenceGroup"
    },
    {
      "details" : "Get the current Y coordinate of the path cursor",
      "contents": "PathCursorY()$1",
      "kind"    : "function",
      "trigger" : "PathCursorY"
    },
    {
      "details" : "Move the vector drawing cursor without adding a line",
      "contents": "MovePathCursor(${1:x.d})$2",
      "kind"    : "function",
      "trigger" : "MovePathCursor"
    },
    {
      "details" : "Draw a line of given dimension on the current output",
      "contents": "LineXY(${1:x1}, ${2:y1}, ${3:x2})$4",
      "kind"    : "function",
      "trigger" : "LineXY"
    },
    {
      "details" : "Returns true if the current vector drawing path is empty",
      "contents": "IsPathEmpty()$1",
      "kind"    : "function",
      "trigger" : "IsPathEmpty"
    },
    {
      "details" : "Initialize the network environment",
      "contents": "InitNetwork()$1",
      "kind"    : "function",
      "trigger" : "InitNetwork"
    },
    {
      "details" : "Start to examine the specified directory for future listing",
      "contents": "ExamineDirectory(${1:#Directory}, ${2:DirectoryName.s})$3",
      "kind"    : "function",
      "trigger" : "ExamineDirectory"
    },
    {
      "details" : "Returns the current drawing memory buffer",
      "contents": "DrawingBuffer()$1",
      "kind"    : "function",
      "trigger" : "DrawingBuffer"
    },
    {
      "details" : "Returns the number of days elapsed since the beginning of the year of the specified date (between 1 and 366)",
      "contents": "DayOfYear(${1:Date})$2",
      "kind"    : "function",
      "trigger" : "DayOfYear"
    },
    {
      "details" : "Compose an XML tree into a string",
      "contents": "ComposeXML(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "ComposeXML"
    },
    {
      "details" : "Add and compress the file to pack file",
      "contents": "AddPackFile(${1:#Pack}, ${2:Filename.s})$3",
      "kind"    : "function",
      "trigger" : "AddPackFile"
    },
    {
      "details" : "Add time to the specified #Entity animation",
      "contents": "AddEntityAnimationTime(${1:#Entity}, ${2:Animation.s})$3",
      "kind"    : "function",
      "trigger" : "AddEntityAnimationTime"
    },
    {
      "details" : "Abort the download of the specified HTTP connection",
      "contents": "AbortHTTP(${1:HttpConnection})$2",
      "kind"    : "function",
      "trigger" : "AbortHTTP"
    },
    {
      "details" : "Zoom the sprite to the new given dimensions",
      "contents": "ZoomSprite(${1:#Sprite}, ${2:Width})$3",
      "kind"    : "function",
      "trigger" : "ZoomSprite"
    },
    {
      "details" : "Returns the decoded URL$",
      "contents": "URLDecoder(${1:URL.s})$2",
      "kind"    : "function",
      "trigger" : "URLDecoder"
    },
    {
      "details" : "Return the x position of the #Spline",
      "contents": "SplineX(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "SplineX"
    },
    {
      "details" : "Change the runtime item string",
      "contents": "SetRuntimeString(${1:Name})$2",
      "kind"    : "function",
      "trigger" : "SetRuntimeString"
    },
    {
      "details" : "Set the keyframe position for the #NodeAnimation",
      "contents": "SetNodeAnimationKeyFramePosition(${1:#NodeAnimation}, ${2:KeyFrame}, ${3:x}, ${4:y})$5",
      "kind"    : "function",
      "trigger" : "SetNodeAnimationKeyFramePosition"
    },
    {
      "details" : "Return the width of the drawing area, in pixel",
      "contents": "PrinterPageWidth()$1",
      "kind"    : "function",
      "trigger" : "PrinterPageWidth"
    },
    {
      "details" : "Return the color used at the coordinates (x,y) in the current output",
      "contents": "Point(${1:x})$2",
      "kind"    : "function",
      "trigger" : "Point"
    },
    {
      "details" : "Get the current X coordinate of the path cursor",
      "contents": "PathCursorX()$1",
      "kind"    : "function",
      "trigger" : "PathCursorX"
    },
    {
      "details" : "Change the particles speed factor",
      "contents": "ParticleSpeedFactor(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "ParticleSpeedFactor"
    },
    {
      "details" : "Get the height of the #Terrain tile at the specified position",
      "contents": "GetTerrainTileHeightAtPoint(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x})$5",
      "kind"    : "function",
      "trigger" : "GetTerrainTileHeightAtPoint"
    },
    {
      "details" : "Get the y coordinate of the drawing origin",
      "contents": "GetOriginY()$1",
      "kind"    : "function",
      "trigger" : "GetOriginY"
    },
    {
      "details" : "Returns the specified #Mail attribute",
      "contents": "GetMailAttribute(${1:#Mail})$2",
      "kind"    : "function",
      "trigger" : "GetMailAttribute"
    },
    {
      "details" : "Return the attributes of the current entry in the last FTP listing",
      "contents": "FTPDirectoryEntryAttributes(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "FTPDirectoryEntryAttributes"
    },
    {
      "details" : "Free the body associated with the #Terrain",
      "contents": "FreeTerrainBody(${1:#Terrain})$2",
      "kind"    : "function",
      "trigger" : "FreeTerrainBody"
    },
    {
      "details" : "Free the specified #Light",
      "contents": "FreeLight(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "FreeLight"
    },
    {
      "details" : "Creates a Frame3D gadget in the current GadgetList",
      "contents": "FrameGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "FrameGadget3D"
    },
    {
      "details" : "Get the number of bytes required to export a XML tree",
      "contents": "ExportXMLSize(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "ExportXMLSize"
    },
    {
      "details" : "Server side: allow to know on which server the data has been received",
      "contents": "EventServer()$1",
      "kind"    : "function",
      "trigger" : "EventServer"
    },
    {
      "details" : "Create a new node inside the XML tree",
      "contents": "CreateXMLNode(${1:ParentNode})$2",
      "kind"    : "function",
      "trigger" : "CreateXMLNode"
    },
    {
      "details" : "Compute the #Spline at the given time",
      "contents": "ComputeSpline(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "ComputeSpline"
    },
    {
      "details" : "Create a button gadget in the current GadgetList",
      "contents": "ButtonGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "ButtonGadget"
    },
    {
      "details" : "Attach an object to the #Node",
      "contents": "AttachNodeObject(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "AttachNodeObject"
    },
    {
      "details" : "Make the specified WindowID the current gadget list to add gadgets on it",
      "contents": "UseGadgetList(${1:WindowID})$2",
      "kind"    : "function",
      "trigger" : "UseGadgetList"
    },
    {
      "details" : "Change the #Terrain location",
      "contents": "TerrainLocate(${1:#Terrain}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "TerrainLocate"
    },
    {
      "details" : "Convert a float number into a string",
      "contents": "StrF(${1:Value})$2",
      "kind"    : "function",
      "trigger" : "StrF"
    },
    {
      "details" : "Return the y position of the #Spline",
      "contents": "SplineY(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "SplineY"
    },
    {
      "details" : "Change the specified #Menu item text",
      "contents": "SetMenuItemText(${1:#Menu}, ${2:MenuItem})$3",
      "kind"    : "function",
      "trigger" : "SetMenuItemText"
    },
    {
      "details" : "Get the specified #Material attribute",
      "contents": "SetMaterialAttribute(${1:#Material}, ${2:Attribute})$3",
      "kind"    : "function",
      "trigger" : "SetMaterialAttribute"
    },
    {
      "details" : "Initialises the 3D environment for later use",
      "contents": "InitEngine3D()$1",
      "kind"    : "function",
      "trigger" : "InitEngine3D"
    },
    {
      "details" : "Get the x coordinate of the drawing origin",
      "contents": "GetOriginX()$1",
      "kind"    : "function",
      "trigger" : "GetOriginX"
    },
    {
      "details" : "Get an image from the clipboard (if any)",
      "contents": "GetClipboardImage(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "GetClipboardImage"
    },
    {
      "details" : "Free the semaphore object",
      "contents": "FreeSemaphore(${1:Semaphore})$2",
      "kind"    : "function",
      "trigger" : "FreeSemaphore"
    },
    {
      "details" : "Free the mutex object",
      "contents": "FreeMutex(${1:Mutex})$2",
      "kind"    : "function",
      "trigger" : "FreeMutex"
    },
    {
      "details" : "Forces the write of the internal file buffer to the disk",
      "contents": "FlushFileBuffers(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "FlushFileBuffers"
    },
    {
      "details" : "Flip the Y coordinates of the vector drawing coordinate system along an axis",
      "contents": "FlipCoordinatesY(${1:AxisY.d})$2",
      "kind"    : "function",
      "trigger" : "FlipCoordinatesY"
    },
    {
      "details" : "Flip the X coordinates of the vector drawing coordinate system along an axis",
      "contents": "FlipCoordinatesX(${1:AxisX.d})$2",
      "kind"    : "function",
      "trigger" : "FlipCoordinatesX"
    },
    {
      "details" : "Returns the Position of StringToFind$",
      "contents": "FindString(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "FindString"
    },
    {
      "details" : "Returns the line number at which the current error occured",
      "contents": "ErrorLine()$1",
      "kind"    : "function",
      "trigger" : "ErrorLine"
    },
    {
      "details" : "Display the given string at the given angle",
      "contents": "DrawRotatedText(${1:x}, ${2:y}, ${3:Text.s})$4",
      "kind"    : "function",
      "trigger" : "DrawRotatedText"
    },
    {
      "details" : "Draw a dashed line with custom dash lengths along the vector drawing path",
      "contents": "CustomDashPath(${1:Width.d})$2",
      "kind"    : "function",
      "trigger" : "CustomDashPath"
    },
    {
      "details" : "Returns the cosinus of the specified angle, in radian",
      "contents": "Cos(${1:Angle})$2",
      "kind"    : "function",
      "trigger" : "Cos"
    },
    {
      "details" : "Copy the specified #Mesh on the #NewMesh",
      "contents": "CopyMesh(${1:#Mesh})$2",
      "kind"    : "function",
      "trigger" : "CopyMesh"
    },
    {
      "details" : "Returns the #Billboard width, in world metric",
      "contents": "BillboardWidth(${1:#Billboard})$2",
      "kind"    : "function",
      "trigger" : "BillboardWidth"
    },
    {
      "details" : "Return the number of remaining bytes in the input buffer",
      "contents": "AvailableSerialPortInput(${1:#SerialPort})$2",
      "kind"    : "function",
      "trigger" : "AvailableSerialPortInput"
    },
    {
      "details" : "Decodes the specified buffer using the AES algorithm",
      "contents": "AESDecoder(${1:*Input}, ${2:*Output}, ${3:Size}, ${4:*Key}, ${5:Bits})$6",
      "kind"    : "function",
      "trigger" : "AESDecoder"
    },
    {
      "details" : "Add a field to the current Status Bar previously created with CreateStatusBar()",
      "contents": "AddStatusBarField(${1:Width})$2",
      "kind"    : "function",
      "trigger" : "AddStatusBarField"
    },
    {
      "details" : "Write a string to the #SerialPort",
      "contents": "WriteSerialPortString(${1:#SerialPort})$2",
      "kind"    : "function",
      "trigger" : "WriteSerialPortString"
    },
    {
      "details" : "Returns the left position, in pixels, of the specified window",
      "contents": "WindowX3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "WindowX3D"
    },
    {
      "details" : "Add JCALG1 decompression support to the packer commandset",
      "contents": "UseJCALG1Packer()$1",
      "kind"    : "function",
      "trigger" : "UseJCALG1Packer"
    },
    {
      "details" : "Stop to play the movie",
      "contents": "StopMovie(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "StopMovie"
    },
    {
      "details" : "Return the z position of the #Spline",
      "contents": "SplineZ(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "SplineZ"
    },
    {
      "details" : "Creates an artificial sky dome",
      "contents": "SkyDome(${1:Filename.s})$2",
      "kind"    : "function",
      "trigger" : "SkyDome"
    },
    {
      "details" : "Change the runtime item value",
      "contents": "SetRuntimeDouble(${1:Name})$2",
      "kind"    : "function",
      "trigger" : "SetRuntimeDouble"
    },
    {
      "details" : "Reads an unicode character (2 bytes) from the specified memory address",
      "contents": "PeekU(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "PeekU"
    },
    {
      "details" : "Disassemble the next instruction",
      "contents": "NextInstruction()$1",
      "kind"    : "function",
      "trigger" : "NextInstruction"
    },
    {
      "details" : "Move the XML node to a new location (or different XML tree)",
      "contents": "MoveXMLNode(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "MoveXMLNode"
    },
    {
      "details" : "Wait for ownership of the mutex object",
      "contents": "LockMutex(${1:Mutex})$2",
      "kind"    : "function",
      "trigger" : "LockMutex"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsRegularExpression(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "IsRegularExpression"
    },
    {
      "details" : "Insert the specified structure data into the XML node",
      "contents": "InsertXMLStructure(${1:ParentNode}, ${2:*Buffer})$3",
      "kind"    : "function",
      "trigger" : "InsertXMLStructure"
    },
    {
      "details" : "Get the progress on the specified HTTP connection",
      "contents": "HTTPProgress(${1:HttpConnection})$2",
      "kind"    : "function",
      "trigger" : "HTTPProgress"
    },
    {
      "details" : "Get the currently set color of the Gadget",
      "contents": "GetGadgetColor(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetColor"
    },
    {
      "details" : "Free the #Terrain",
      "contents": "FreeTerrain(${1:#Terrain})$2",
      "kind"    : "function",
      "trigger" : "FreeTerrain"
    },
    {
      "details" : "Returns on which window the event has occured (return the #Window3D number)",
      "contents": "EventWindow3D()$1",
      "kind"    : "function",
      "trigger" : "EventWindow3D"
    },
    {
      "details" : "get the Memory address for a memory access error",
      "contents": "ErrorTargetAddress()$1",
      "kind"    : "function",
      "trigger" : "ErrorTargetAddress"
    },
    {
      "details" : "Enable the world physics",
      "contents": "EnableWorldPhysics(${1:Enable})$2",
      "kind"    : "function",
      "trigger" : "EnableWorldPhysics"
    },
    {
      "details" : "Display the image on the current output. On the fly resize is possible",
      "contents": "DrawImage(${1:ImageID}, ${2:x})$3",
      "kind"    : "function",
      "trigger" : "DrawImage"
    },
    {
      "details" : "Returns the error occured in the #Dialog creation",
      "contents": "DialogError(${1:#Dialog})$2",
      "kind"    : "function",
      "trigger" : "DialogError"
    },
    {
      "details" : "Create a new #Material based on the specified Texture",
      "contents": "CreateMaterial(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "CreateMaterial"
    },
    {
      "details" : "Create a new #Camera. All the dimensions are in percent",
      "contents": "CreateCamera(${1:#Camera}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "CreateCamera"
    },
    {
      "details" : "Close the specified window",
      "contents": "CloseWindow3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "CloseWindow3D"
    },
    {
      "details" : "Close the specified window",
      "contents": "CloseWindow(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "CloseWindow"
    },
    {
      "details" : "Close the specified #SerialPort",
      "contents": "CloseSerialPort(${1:#SerialPort})$2",
      "kind"    : "function",
      "trigger" : "CloseSerialPort"
    },
    {
      "details" : "Close specified pack",
      "contents": "ClosePack(${1:#Pack})$2",
      "kind"    : "function",
      "trigger" : "ClosePack"
    },
    {
      "details" : "Close the specified library",
      "contents": "CloseLibrary(${1:#Library})$2",
      "kind"    : "function",
      "trigger" : "CloseLibrary"
    },
    {
      "details" : "Close the specified file",
      "contents": "CloseFile(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "CloseFile"
    },
    {
      "details" : "Close the specified database",
      "contents": "CloseDatabase(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "CloseDatabase"
    },
    {
      "details" : "Returns the top position, in pixels, of the specified window",
      "contents": "WindowY3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "WindowY3D"
    },
    {
      "details" : "Check if a subsystem is in use",
      "contents": "Subsystem(${1:Name})$2",
      "kind"    : "function",
      "trigger" : "Subsystem"
    },
    {
      "details" : "Convert a double number into a string",
      "contents": "StrD(${1:Value})$2",
      "kind"    : "function",
      "trigger" : "StrD"
    },
    {
      "details" : "Returns the unique ID which identifies the statusbar in the operating system",
      "contents": "StatusBarID(${1:#StatusBar})$2",
      "kind"    : "function",
      "trigger" : "StatusBarID"
    },
    {
      "details" : "Start vector drawing on the specified output",
      "contents": "StartVectorDrawing(${1:Output})$2",
      "kind"    : "function",
      "trigger" : "StartVectorDrawing"
    },
    {
      "details" : "Return the depth of the specified sprite",
      "contents": "SpriteDepth(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "SpriteDepth"
    },
    {
      "details" : "Creates a 6 faces textured cube to simulate a closed world",
      "contents": "SkyBox(${1:Filename.s})$2",
      "kind"    : "function",
      "trigger" : "SkyBox"
    },
    {
      "details" : "Remove the group and all keys from the file",
      "contents": "RemovePreferenceGroup(${1:GroupName.s})$2",
      "kind"    : "function",
      "trigger" : "RemovePreferenceGroup"
    },
    {
      "details" : "Write a word (2 bytes) number to the specified memory address",
      "contents": "PokeW(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeW"
    },
    {
      "details" : "Change the particles velocity",
      "contents": "ParticleVelocity(${1:#ParticleEmitter}, ${2:Minimum})$3",
      "kind"    : "function",
      "trigger" : "ParticleVelocity"
    },
    {
      "details" : "Get the next attribute in the examined XML node",
      "contents": "NextXMLAttribute(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "NextXMLAttribute"
    },
    {
      "details" : "Retrieve the next host IP address",
      "contents": "NextIPAddress()$1",
      "kind"    : "function",
      "trigger" : "NextIPAddress"
    },
    {
      "details" : "Returns nonzero if the given Number is the special \"Not a Number value",
      "contents": "IsNAN(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "IsNAN"
    },
    {
      "details" : "Open an input requester",
      "contents": "InputRequester(${1:Title.s}, ${2:Message.s})$3",
      "kind"    : "function",
      "trigger" : "InputRequester"
    },
    {
      "details" : "Return a two characters string if a key is pressed during the call of Inkey()",
      "contents": "Inkey()$1",
      "kind"    : "function",
      "trigger" : "Inkey"
    },
    {
      "details" : "Get the standalone mode of the XML document",
      "contents": "GetXMLStandalone(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "GetXMLStandalone"
    },
    {
      "details" : "Returns the current pattern position of the playing module",
      "contents": "GetMusicPosition(${1:#Music})$2",
      "kind"    : "function",
      "trigger" : "GetMusicPosition"
    },
    {
      "details" : "Clear the whole screen with the specified RGB color",
      "contents": "ClearScreen(${1:Color})$2",
      "kind"    : "function",
      "trigger" : "ClearScreen"
    },
    {
      "details" : "Returns the area hyperbolic sine of the specified number",
      "contents": "ASinH(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "ASinH"
    },
    {
      "details" : "Set the fullscreen antialiasing mode for the 3D world",
      "contents": "AntialiasingMode(${1:Mode})$2",
      "kind"    : "function",
      "trigger" : "AntialiasingMode"
    },
    {
      "details" : "Stop vector drawing on the current output",
      "contents": "StopVectorDrawing()$1",
      "kind"    : "function",
      "trigger" : "StopVectorDrawing"
    },
    {
      "details" : "Change the path of the current directory to the specified one",
      "contents": "SetCurrentDirectory(${1:Path.s})$2",
      "kind"    : "function",
      "trigger" : "SetCurrentDirectory"
    },
    {
      "details" : "Returns the selected pattern index chosen with OpenFileRequester() or SaveFileRequester()",
      "contents": "SelectedFilePattern()$1",
      "kind"    : "function",
      "trigger" : "SelectedFilePattern"
    },
    {
      "details" : "Save the specified #Texture",
      "contents": "SaveRenderTexture(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "SaveRenderTexture"
    },
    {
      "details" : "Draw a box with rounded edges on the current output",
      "contents": "RoundBox(${1:x}, ${2:y}, ${3:Width}, ${4:Height}, ${5:RoundX})$6",
      "kind"    : "function",
      "trigger" : "RoundBox"
    },
    {
      "details" : "Returns the 24 bits color corresponding to the given RGB parameters",
      "contents": "RGB(${1:Red}, ${2:Green})$3",
      "kind"    : "function",
      "trigger" : "RGB"
    },
    {
      "details" : "Remove an item of the specified #Gadget3D at the given Position",
      "contents": "RemoveGadgetItem3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "RemoveGadgetItem3D"
    },
    {
      "details" : "Remove an item of the specified #Gadget at the given Position",
      "contents": "RemoveGadgetItem(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "RemoveGadgetItem"
    },
    {
      "details" : "Get the length of a matching group",
      "contents": "RegularExpressionGroupLength(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "RegularExpressionGroupLength"
    },
    {
      "details" : "Change the #ParticleEmitter direction",
      "contents": "ParticleEmitterDirection(${1:#ParticleEmitter}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ParticleEmitterDirection"
    },
    {
      "details" : "Returns the current pack entry type",
      "contents": "PackEntryType(${1:#Pack})$2",
      "kind"    : "function",
      "trigger" : "PackEntryType"
    },
    {
      "details" : "Open a new screen according to the specified \"Width\", \"Height\" and \"Depth\"",
      "contents": "OpenScreen(${1:Width}, ${2:Height}, ${3:Depth})$4",
      "kind"    : "function",
      "trigger" : "OpenScreen"
    },
    {
      "details" : "Change the #Node orientation to look at the specified point",
      "contents": "NodeLookAt(${1:#Node}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "NodeLookAt"
    },
    {
      "details" : "Return the x direction of the #Light",
      "contents": "LightDirectionX(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "LightDirectionX"
    },
    {
      "details" : "Change the #Light direction",
      "contents": "LightDirection(${1:#Light}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "LightDirection"
    },
    {
      "details" : "Check if the specified item is available at runtime",
      "contents": "IsRuntime(${1:Name})$2",
      "kind"    : "function",
      "trigger" : "IsRuntime"
    },
    {
      "details" : "Retrieves the extension part of a full path",
      "contents": "GetExtensionPart(${1:FullPathName.s})$2",
      "kind"    : "function",
      "trigger" : "GetExtensionPart"
    },
    {
      "details" : "Get the Gadget that has the focus",
      "contents": "GetActiveGadget3D()$1",
      "kind"    : "function",
      "trigger" : "GetActiveGadget3D"
    },
    {
      "details" : "Free the specified #RegularExpression",
      "contents": "FreeRegularExpression(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "FreeRegularExpression"
    },
    {
      "details" : "Returns which menu item has been selected (return the #MenuItem identifier)",
      "contents": "EventMenu()$1",
      "kind"    : "function",
      "trigger" : "EventMenu"
    },
    {
      "details" : "Display a previously created #PopupMenu",
      "contents": "DisplayPopupMenu(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "DisplayPopupMenu"
    },
    {
      "details" : "Returns the description of the current database driver",
      "contents": "DatabaseDriverDescription()$1",
      "kind"    : "function",
      "trigger" : "DatabaseDriverDescription"
    },
    {
      "details" : "Get the number of cookies",
      "contents": "CountCGICookies()$1",
      "kind"    : "function",
      "trigger" : "CountCGICookies"
    },
    {
      "details" : "Close a previously opened Help window",
      "contents": "CloseHelp()$1",
      "kind"    : "function",
      "trigger" : "CloseHelp"
    },
    {
      "details" : "Close the cryptographic random number generator",
      "contents": "CloseCryptRandom()$1",
      "kind"    : "function",
      "trigger" : "CloseCryptRandom"
    },
    {
      "details" : "Get the specified CGI parameter data size",
      "contents": "CGIParameterDataSize(${1:Name.s})$2",
      "kind"    : "function",
      "trigger" : "CGIParameterDataSize"
    },
    {
      "details" : "Construct the #Terrain",
      "contents": "BuildTerrain(${1:#Terrain})$2",
      "kind"    : "function",
      "trigger" : "BuildTerrain"
    },
    {
      "details" : "Returns the blue component of the given color",
      "contents": "Blue(${1:Color})$2",
      "kind"    : "function",
      "trigger" : "Blue"
    },
    {
      "details" : "Get applied impulse vector of the current collision",
      "contents": "WorldCollisionAppliedImpulse()$1",
      "kind"    : "function",
      "trigger" : "WorldCollisionAppliedImpulse"
    },
    {
      "details" : "Returns the unique ID which identifies the window in the operating system",
      "contents": "WindowID3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "WindowID3D"
    },
    {
      "details" : "Returns the unique ID which identifies the window in the operating system",
      "contents": "WindowID(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "WindowID"
    },
    {
      "details" : "Add SHA-1 fingerprint support to the cipher commandset",
      "contents": "UseSHA1Fingerprint()$1",
      "kind"    : "function",
      "trigger" : "UseSHA1Fingerprint"
    },
    {
      "details" : "Add CRC32 fingerprint support to the cipher commandset",
      "contents": "UseCRC32Fingerprint()$1",
      "kind"    : "function",
      "trigger" : "UseCRC32Fingerprint"
    },
    {
      "details" : "Return the unique #Text3D ID",
      "contents": "Text3DID(${1:#Text3D})$2",
      "kind"    : "function",
      "trigger" : "Text3DID"
    },
    {
      "details" : "Returns the unique ID which identifies the sprite in the operating system",
      "contents": "SpriteID(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "SpriteID"
    },
    {
      "details" : "Returns the unique system identifier for the sound",
      "contents": "SoundID3D(${1:#Sound3D})$2",
      "kind"    : "function",
      "trigger" : "SoundID3D"
    },
    {
      "details" : "Signal the semaphore object once (increment the count by 1)",
      "contents": "SignalSemaphore(${1:Semaphore})$2",
      "kind"    : "function",
      "trigger" : "SignalSemaphore"
    },
    {
      "details" : "Change the specified #Mail attribute",
      "contents": "SetMailAttribute(${1:#Mail}, ${2:Attribute})$3",
      "kind"    : "function",
      "trigger" : "SetMailAttribute"
    },
    {
      "details" : "Return the server system identifier",
      "contents": "ServerID(${1:#Server})$2",
      "kind"    : "function",
      "trigger" : "ServerID"
    },
    {
      "details" : "Return the unique ID which identifies the SerialPort in the operating system",
      "contents": "SerialPortID(${1:#SerialPort})$2",
      "kind"    : "function",
      "trigger" : "SerialPortID"
    },
    {
      "details" : "Reset the line counts of the profiler",
      "contents": "ResetProfiler()$1",
      "kind"    : "function",
      "trigger" : "ResetProfiler"
    },
    {
      "details" : "Recalculate the dialog dimension and adjust it if necessary",
      "contents": "RefreshDialog(${1:#Dialog})$2",
      "kind"    : "function",
      "trigger" : "RefreshDialog"
    },
    {
      "details" : "Return the unique #Node system identifier",
      "contents": "NodeID(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "NodeID"
    },
    {
      "details" : "Returns an additional information about the movie",
      "contents": "MovieInfo(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "MovieInfo"
    },
    {
      "details" : "Return the unique #Mesh ID",
      "contents": "MeshID(${1:#Mesh})$2",
      "kind"    : "function",
      "trigger" : "MeshID"
    },
    {
      "details" : "Returns the unique ID which identifies the menu in the operating system",
      "contents": "MenuID(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "MenuID"
    },
    {
      "details" : "Return the unique #Material ID",
      "contents": "MaterialID(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "MaterialID"
    },
    {
      "details" : "Return the y direction of the #Light",
      "contents": "LightDirectionY(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "LightDirectionY"
    },
    {
      "details" : "Get the minimized/maximized state of the window",
      "contents": "GetWindowState(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "GetWindowState"
    },
    {
      "details" : "Get the current #Sound frequency",
      "contents": "GetSoundFrequency(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "GetSoundFrequency"
    },
    {
      "details" : "Get the current #NodeAnimation time",
      "contents": "GetNodeAnimationTime(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "GetNodeAnimationTime"
    },
    {
      "details" : "Get the specified #Material attribute",
      "contents": "GetMaterialAttribute(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "GetMaterialAttribute"
    },
    {
      "details" : "Returns the full path of the currently logged user directory",
      "contents": "GetHomeDirectory()$1",
      "kind"    : "function",
      "trigger" : "GetHomeDirectory"
    },
    {
      "details" : "Return the X position, in pixel, of the #Gadget",
      "contents": "GadgetX(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GadgetX"
    },
    {
      "details" : "Return the ID of the #Gadget3D",
      "contents": "GadgetID3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GadgetID3D"
    },
    {
      "details" : "Return the ID of the #Gadget",
      "contents": "GadgetID(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GadgetID"
    },
    {
      "details" : "Returns the unique ID which identifies the font in the operating system",
      "contents": "FontID(${1:#Font})$2",
      "kind"    : "function",
      "trigger" : "FontID"
    },
    {
      "details" : "Returns the unique ID which identifies the file in the operating system",
      "contents": "FileID(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "FileID"
    },
    {
      "details" : "Return the unique #Entity system identifier",
      "contents": "EntityID(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityID"
    },
    {
      "details" : "Returns the unique ID which identifies the dialog in the operating system",
      "contents": "DialogID(${1:#Dialog})$2",
      "kind"    : "function",
      "trigger" : "DialogID"
    },
    {
      "details" : "Returns the database handle for direct access with the related API",
      "contents": "DatabaseID(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "DatabaseID"
    },
    {
      "details" : "Count the number of occurence of a string",
      "contents": "CountString(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "CountString"
    },
    {
      "details" : "Change the Gamma for the current screen",
      "contents": "ChangeGamma(${1:RedIntensity}, ${2:GreenIntensity})$3",
      "kind"    : "function",
      "trigger" : "ChangeGamma"
    },
    {
      "details" : "Get the specified CGI parameter data",
      "contents": "CGIParameterData(${1:Name.s})$2",
      "kind"    : "function",
      "trigger" : "CGIParameterData"
    },
    {
      "details" : "Returns the unique ID which identifies the camera in the operating system",
      "contents": "CameraID(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraID"
    },
    {
      "details" : "Set a custom parameter to the #Entity shader script",
      "contents": "CameraCustomParameter(${1:#Camera}, ${2:ParameterIndex}, ${3:Value1}, ${4:Value2}, ${5:Value3})$6",
      "kind"    : "function",
      "trigger" : "CameraCustomParameter"
    },
    {
      "details" : "Create a button gadget in the current GadgetList",
      "contents": "ButtonGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "ButtonGadget3D"
    },
    {
      "details" : "Returns the unique ID which identifies the billboard group in the operating system",
      "contents": "BillboardGroupID(${1:#BillboardGroup})$2",
      "kind"    : "function",
      "trigger" : "BillboardGroupID"
    },
    {
      "details" : "Write the keyword and its associated value",
      "contents": "WritePreferenceString(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "WritePreferenceString"
    },
    {
      "details" : "Add SHA-2 fingerprint support to the cipher commandset",
      "contents": "UseSHA2Fingerprint()$1",
      "kind"    : "function",
      "trigger" : "UseSHA2Fingerprint"
    },
    {
      "details" : "Add an image button to the toolbar being constructed",
      "contents": "ToolBarImageButton(${1:#ButtonID})$2",
      "kind"    : "function",
      "trigger" : "ToolBarImageButton"
    },
    {
      "details" : "Return the size of the #Terrain tile",
      "contents": "TerrainTileSize(${1:#Terrain}, ${2:TileX})$3",
      "kind"    : "function",
      "trigger" : "TerrainTileSize"
    },
    {
      "details" : "Return the x position in the #Terrain tile of the point",
      "contents": "TerrainTilePointX(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x}, ${5:y})$6",
      "kind"    : "function",
      "trigger" : "TerrainTilePointX"
    },
    {
      "details" : "Return the width in pixel of the specified sprite",
      "contents": "SpriteWidth(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "SpriteWidth"
    },
    {
      "details" : "Change the current directory",
      "contents": "SetFTPDirectory(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "SetFTPDirectory"
    },
    {
      "details" : "Second entity of the current collision",
      "contents": "SecondWorldCollisionEntity()$1",
      "kind"    : "function",
      "trigger" : "SecondWorldCollisionEntity"
    },
    {
      "details" : "Get the screen mode width",
      "contents": "ScreenModeWidth()$1",
      "kind"    : "function",
      "trigger" : "ScreenModeWidth"
    },
    {
      "details" : "Renders the 3D world on the screen",
      "contents": "RenderWorld()$1",
      "kind"    : "function",
      "trigger" : "RenderWorld"
    },
    {
      "details" : "Reads a quad (8 bytes) from the specified memory address",
      "contents": "PeekQ(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "PeekQ"
    },
    {
      "details" : "Move a memory area from \"SourceMemory\" to \"DestinationMemory\"",
      "contents": "MoveMemory(${1:SourceMemory}, ${2:DestinationMemory})$3",
      "kind"    : "function",
      "trigger" : "MoveMemory"
    },
    {
      "details" : "Extract a string at the specified position from the given String$",
      "contents": "Mid(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "Mid"
    },
    {
      "details" : "Load a XML file and parse it",
      "contents": "LoadXML(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "LoadXML"
    },
    {
      "details" : "Return the z direction of the #Light",
      "contents": "LightDirectionZ(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "LightDirectionZ"
    },
    {
      "details" : "Initialize the keyboard environment for later use",
      "contents": "InitKeyboard()$1",
      "kind"    : "function",
      "trigger" : "InitKeyboard"
    },
    {
      "details" : "Return the Y position, in pixel, of the #Gadget",
      "contents": "GadgetY(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GadgetY"
    },
    {
      "details" : "Clean up the XML for a better look",
      "contents": "FormatXML(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "FormatXML"
    },
    {
      "details" : "Change the #Camera direction",
      "contents": "CameraDirection(${1:#Camera}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "CameraDirection"
    },
    {
      "details" : "Set the default background color for graphic functions and text display",
      "contents": "BackColor(${1:Color})$2",
      "kind"    : "function",
      "trigger" : "BackColor"
    },
    {
      "details" : "Add and compress the memory area to pack file",
      "contents": "AddPackMemory(${1:#Pack}, ${2:*Buffer}, ${3:Size})$4",
      "kind"    : "function",
      "trigger" : "AddPackMemory"
    },
    {
      "details" : "Write an arbitrary amount of data to the #SerialPort",
      "contents": "WriteSerialPortData(${1:#SerialPort}, ${2:*Buffer})$3",
      "kind"    : "function",
      "trigger" : "WriteSerialPortData"
    },
    {
      "details" : "Add SHA-3 fingerprint support to the cipher commandset",
      "contents": "UseSHA3Fingerprint()$1",
      "kind"    : "function",
      "trigger" : "UseSHA3Fingerprint"
    },
    {
      "details" : "Add PostgreSQL support to the database commandset",
      "contents": "UsePostgreSQLDatabase()$1",
      "kind"    : "function",
      "trigger" : "UsePostgreSQLDatabase"
    },
    {
      "details" : "Return the y position in the #Terrain tile of the point",
      "contents": "TerrainTilePointY(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x}, ${5:y})$6",
      "kind"    : "function",
      "trigger" : "TerrainTilePointY"
    },
    {
      "details" : "Get the screen mode height",
      "contents": "ScreenModeHeight()$1",
      "kind"    : "function",
      "trigger" : "ScreenModeHeight"
    },
    {
      "details" : "Get the position of a matching group within the current match",
      "contents": "RegularExpressionGroupPosition(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "RegularExpressionGroupPosition"
    },
    {
      "details" : "Read the value associated to the keyword",
      "contents": "ReadPreferenceLong(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "ReadPreferenceLong"
    },
    {
      "details" : "Retrieves information about the next available database driver",
      "contents": "NextDatabaseDriver()$1",
      "kind"    : "function",
      "trigger" : "NextDatabaseDriver"
    },
    {
      "details" : "Returns the number of positions since the last call",
      "contents": "MouseWheel()$1",
      "kind"    : "function",
      "trigger" : "MouseWheel"
    },
    {
      "details" : "Change the #Material blending mode",
      "contents": "MaterialBlendingMode(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "MaterialBlendingMode"
    },
    {
      "details" : "Returns the first \"Length\" number of characters from the left side of the string",
      "contents": "Left(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "Left"
    },
    {
      "details" : "Get the y keyframe yaw for the #NodeAnimation",
      "contents": "GetNodeAnimationKeyFrameYaw(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "GetNodeAnimationKeyFrameYaw"
    },
    {
      "details" : "Returns the content of the specified column as a string",
      "contents": "GetDatabaseString(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "GetDatabaseString"
    },
    {
      "details" : "Returns the content of the specified column as a double number",
      "contents": "GetDatabaseDouble(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "GetDatabaseDouble"
    },
    {
      "details" : "Returns the content of the specified column in the specified buffer",
      "contents": "GetDatabaseBlob(${1:#Database}, ${2:Column}, ${3:*Buffer})$4",
      "kind"    : "function",
      "trigger" : "GetDatabaseBlob"
    },
    {
      "details" : "Return the width, in pixel, of the #Gadget",
      "contents": "GadgetWidth(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GadgetWidth"
    },
    {
      "details" : "Copy the specified #Material on the #NewMaterial",
      "contents": "CopyMaterial(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "CopyMaterial"
    },
    {
      "details" : "Move the cursor to the given position, in character",
      "contents": "ConsoleLocate(${1:x})$2",
      "kind"    : "function",
      "trigger" : "ConsoleLocate"
    },
    {
      "details" : "Use a box shaped gradient when gradient drawing is enabled",
      "contents": "BoxedGradient(${1:x}, ${2:y}, ${3:Width})$4",
      "kind"    : "function",
      "trigger" : "BoxedGradient"
    },
    {
      "details" : "Add a new buffer to the #Cipher",
      "contents": "AddCipherBuffer(${1:#Cipher}, ${2:*Input}, ${3:*Output})$4",
      "kind"    : "function",
      "trigger" : "AddCipherBuffer"
    },
    {
      "details" : "Change the shadow handling in this world",
      "contents": "WorldShadows(${1:ShadowType})$2",
      "kind"    : "function",
      "trigger" : "WorldShadows"
    },
    {
      "details" : "Update the specified #Spline point",
      "contents": "UpdateSplinePoint(${1:#Spline}, ${2:Index}, ${3:x}, ${4:y})$5",
      "kind"    : "function",
      "trigger" : "UpdateSplinePoint"
    },
    {
      "details" : "Change the active #Camera with the #NewCamera",
      "contents": "SwitchCamera(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "SwitchCamera"
    },
    {
      "details" : "Stop the current CD-Audio playback",
      "contents": "StopAudioCD()$1",
      "kind"    : "function",
      "trigger" : "StopAudioCD"
    },
    {
      "details" : "Set the coordinate origin for drawing operations",
      "contents": "SetOrigin(${1:x})$2",
      "kind"    : "function",
      "trigger" : "SetOrigin"
    },
    {
      "details" : "Sets the 3D GUI theme",
      "contents": "SetGUITheme3D(${1:ThemeName.s})$2",
      "kind"    : "function",
      "trigger" : "SetGUITheme3D"
    },
    {
      "details" : "Send a string to the specified client",
      "contents": "SendNetworkString(${1:ClientID})$2",
      "kind"    : "function",
      "trigger" : "SendNetworkString"
    },
    {
      "details" : "Returns the name of the font chosen by the user with the FontRequester() command",
      "contents": "SelectedFontName()$1",
      "kind"    : "function",
      "trigger" : "SelectedFontName"
    },
    {
      "details" : "Open the standard requester which allow to choose a file",
      "contents": "OpenFileRequester(${1:Title.s}, ${2:DefaultFile.s}, ${3:Pattern.s})$4",
      "kind"    : "function",
      "trigger" : "OpenFileRequester"
    },
    {
      "details" : "Open the designed file or create it if it doesn't exists",
      "contents": "OpenFile(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "OpenFile"
    },
    {
      "details" : "Get the next selected filename",
      "contents": "NextSelectedFileName()$1",
      "kind"    : "function",
      "trigger" : "NextSelectedFileName"
    },
    {
      "details" : "Move to the next match of the regular expression",
      "contents": "NextRegularExpressionMatch(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "NextRegularExpressionMatch"
    },
    {
      "details" : "Use a linear gradient when gradient drawing is enabled",
      "contents": "LinearGradient(${1:x1}, ${2:y1}, ${3:x2})$4",
      "kind"    : "function",
      "trigger" : "LinearGradient"
    },
    {
      "details" : "Return the roll of the #Light",
      "contents": "LightRoll(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "LightRoll"
    },
    {
      "details" : "Initialize the Mouse environment for later use",
      "contents": "InitMouse()$1",
      "kind"    : "function",
      "trigger" : "InitMouse"
    },
    {
      "details" : "Retrieves the file part of a full path",
      "contents": "GetFilePart(${1:FullPathName.s})$2",
      "kind"    : "function",
      "trigger" : "GetFilePart"
    },
    {
      "details" : "Draw a filled ellipse on the current output",
      "contents": "Ellipse(${1:x}, ${2:y}, ${3:RadiusX})$4",
      "kind"    : "function",
      "trigger" : "Ellipse"
    },
    {
      "details" : "Returns the day value in the week of the specified date (0=Sunday, 6=Saturday)",
      "contents": "DayOfWeek(${1:Date})$2",
      "kind"    : "function",
      "trigger" : "DayOfWeek"
    },
    {
      "details" : "Create a new blank sprite",
      "contents": "CreateSprite(${1:#Sprite}, ${2:Width})$3",
      "kind"    : "function",
      "trigger" : "CreateSprite"
    },
    {
      "details" : "Apply a force to the #Entity",
      "contents": "ApplyEntityForce(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ApplyEntityForce"
    },
    {
      "details" : "Wait until the thread ends",
      "contents": "WaitThread(${1:Thread})$2",
      "kind"    : "function",
      "trigger" : "WaitThread"
    },
    {
      "details" : "Calculate the height of a text paragraph for vector drawing",
      "contents": "VectorParagraphHeight(${1:Text.s}, ${2:Width.d})$3",
      "kind"    : "function",
      "trigger" : "VectorParagraphHeight"
    },
    {
      "details" : "Release ownership of the mutex object",
      "contents": "UnlockMutex(${1:Mutex})$2",
      "kind"    : "function",
      "trigger" : "UnlockMutex"
    },
    {
      "details" : "Draw a line along the vector drawing path",
      "contents": "StrokePath(${1:Width.d})$2",
      "kind"    : "function",
      "trigger" : "StrokePath"
    },
    {
      "details" : "Change the sound listener position in the world",
      "contents": "SoundListenerLocate(${1:x}, ${2:y})$3",
      "kind"    : "function",
      "trigger" : "SoundListenerLocate"
    },
    {
      "details" : "Show the memory viewer, with an optional memory buffer to display",
      "contents": "ShowMemoryViewer()$1",
      "kind"    : "function",
      "trigger" : "ShowMemoryViewer"
    },
    {
      "details" : "Change the #SerialPort status",
      "contents": "SetSerialPortStatus(${1:#SerialPort}, ${2:Attribute})$3",
      "kind"    : "function",
      "trigger" : "SetSerialPortStatus"
    },
    {
      "details" : "Set an #Entity attribute value",
      "contents": "SetEntityAttribute(${1:#Entity}, ${2:Attribute})$3",
      "kind"    : "function",
      "trigger" : "SetEntityAttribute"
    },
    {
      "details" : "Get the screen mode depth",
      "contents": "ScreenModeDepth()$1",
      "kind"    : "function",
      "trigger" : "ScreenModeDepth"
    },
    {
      "details" : "Rotate the #Light",
      "contents": "RotateLight(${1:#Light}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "RotateLight"
    },
    {
      "details" : "Read a byte number from the address. Unsigned=PeekB(adr) & $FF",
      "contents": "PeekB(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PeekB"
    },
    {
      "details" : "Retrieve the OS version number",
      "contents": "OSVersion()$1",
      "kind"    : "function",
      "trigger" : "OSVersion"
    },
    {
      "details" : "Change the movie position to the given frame",
      "contents": "MovieSeek(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "MovieSeek"
    },
    {
      "details" : "Returns the actual mouse X position (in pixel) on the current screen",
      "contents": "MouseY()$1",
      "kind"    : "function",
      "trigger" : "MouseY"
    },
    {
      "details" : "Get the main node of the XML tree",
      "contents": "MainXMLNode(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "MainXMLNode"
    },
    {
      "details" : "Change the #Light attenuation",
      "contents": "LightAttenuation(${1:#Light}, ${2:Range})$3",
      "kind"    : "function",
      "trigger" : "LightAttenuation"
    },
    {
      "details" : "Finish a database query and release associated memory",
      "contents": "FinishDatabaseQuery(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "FinishDatabaseQuery"
    },
    {
      "details" : "After a WindowEvent() or WaitWindowEvent() command, use this function to determine of which type the event is",
      "contents": "EventType()$1",
      "kind"    : "function",
      "trigger" : "EventType"
    },
    {
      "details" : "Create a new #ParticleEmitter at the given position",
      "contents": "CreateParticleEmitter(${1:#ParticleEmitter}, ${2:Width}, ${3:Height}, ${4:Depth})$5",
      "kind"    : "function",
      "trigger" : "CreateParticleEmitter"
    },
    {
      "details" : "Change the cursor display",
      "contents": "ConsoleCursor(${1:Height})$2",
      "kind"    : "function",
      "trigger" : "ConsoleCursor"
    },
    {
      "details" : "Returns the character associated with the given ASCII value",
      "contents": "Chr(${1:ASCII})$2",
      "kind"    : "function",
      "trigger" : "Chr"
    },
    {
      "details" : "Yaw the specified object",
      "contents": "Yaw(${1:ObjectID}, ${2:Value.f})$3",
      "kind"    : "function",
      "trigger" : "Yaw"
    },
    {
      "details" : "Get a node in the XML tree from its ID-tag",
      "contents": "XMLNodeFromID(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "XMLNodeFromID"
    },
    {
      "details" : "Write a BOM (Byte Order Mark) to identify the string format used in the file",
      "contents": "WriteStringFormat(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteStringFormat"
    },
    {
      "details" : "Return the height (in pixel) of the given string in the current output using the current font",
      "contents": "TextHeight(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "TextHeight"
    },
    {
      "details" : "Skew the vector drawing coordinate system",
      "contents": "SkewCoordinates(${1:AngleX.d})$2",
      "kind"    : "function",
      "trigger" : "SkewCoordinates"
    },
    {
      "details" : "Set the number of characters of text between this node and the previous one in the tree",
      "contents": "SetXMLNodeOffset(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "SetXMLNodeOffset"
    },
    {
      "details" : "Set the #Terrain tile layer blend value",
      "contents": "SetTerrainTileLayerBlend(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:Layer}, ${5:x}, ${6:y})$7",
      "kind"    : "function",
      "trigger" : "SetTerrainTileLayerBlend"
    },
    {
      "details" : "Set the current playing position for the #Sound",
      "contents": "SetSoundPosition(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "SetSoundPosition"
    },
    {
      "details" : "Change the specified #Menu title text",
      "contents": "SetMenuTitleText(${1:#Menu}, ${2:Index})$3",
      "kind"    : "function",
      "trigger" : "SetMenuTitleText"
    },
    {
      "details" : "Save the #Terrain on disk",
      "contents": "SaveTerrain(${1:#Terrain})$2",
      "kind"    : "function",
      "trigger" : "SaveTerrain"
    },
    {
      "details" : "Resize and move the movie display area on the movie window",
      "contents": "ResizeMovie(${1:#Movie}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ResizeMovie"
    },
    {
      "details" : "Get the matching string from the current regular expression match",
      "contents": "RegularExpressionMatchString(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "RegularExpressionMatchString"
    },
    {
      "details" : "Return the yaw of the #Node",
      "contents": "NodeYaw(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "NodeYaw"
    },
    {
      "details" : "Return the specified #NodeAnimation status",
      "contents": "NodeAnimationStatus(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "NodeAnimationStatus"
    },
    {
      "details" : "Go to the next FTP directory entry",
      "contents": "NextFTPDirectoryEntry(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "NextFTPDirectoryEntry"
    },
    {
      "details" : "Returns the actual mouse X position (in pixel) on the current screen",
      "contents": "MouseX()$1",
      "kind"    : "function",
      "trigger" : "MouseX"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsMovie(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "IsMovie"
    },
    {
      "details" : "Create an Image gadget in the current GadgetList",
      "contents": "ImageGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "ImageGadget3D"
    },
    {
      "details" : "Returns the computer hostname",
      "contents": "Hostname()$1",
      "kind"    : "function",
      "trigger" : "Hostname"
    },
    {
      "details" : "Get the state of the specified button",
      "contents": "GetToolBarButtonState(${1:#ToolBar})$2",
      "kind"    : "function",
      "trigger" : "GetToolBarButtonState"
    },
    {
      "details" : "Return the X position, in pixel, of the #Gadget3D",
      "contents": "GadgetX3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GadgetX3D"
    },
    {
      "details" : "Display a fog effect",
      "contents": "Fog(${1:Color}, ${2:Intensity}, ${3:StartDistance})$4",
      "kind"    : "function",
      "trigger" : "Fog"
    },
    {
      "details" : "First entity of the current collision",
      "contents": "FirstWorldCollisionEntity()$1",
      "kind"    : "function",
      "trigger" : "FirstWorldCollisionEntity"
    },
    {
      "details" : "End a transparent layer for vector drawing",
      "contents": "EndVectorLayer()$1",
      "kind"    : "function",
      "trigger" : "EndVectorLayer"
    },
    {
      "details" : "Enable the world collisions",
      "contents": "EnableWorldCollisions(${1:Enable})$2",
      "kind"    : "function",
      "trigger" : "EnableWorldCollisions"
    },
    {
      "details" : "Draw text directly to the vector drawing output",
      "contents": "DrawVectorText(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "DrawVectorText"
    },
    {
      "details" : "Executes the SQL Request$ on the specified database (update mode)",
      "contents": "DatabaseUpdate(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "DatabaseUpdate"
    },
    {
      "details" : "Create a new keyframe to the #Mesh track",
      "contents": "CreateVertexPoseKeyFrame(${1:#Mesh}, ${2:Animation.s}, ${3:Track})$4",
      "kind"    : "function",
      "trigger" : "CreateVertexPoseKeyFrame"
    },
    {
      "details" : "Create a new lens flare #Effect",
      "contents": "CreateLensFlareEffect(${1:#Effect}, ${2:CameraID}, ${3:NodeID}, ${4:BurstSize}, ${5:HaloSize}, ${6:HaloMaterialID}, ${7:\tCircleMaterialID})$8",
      "kind"    : "function",
      "trigger" : "CreateLensFlareEffect"
    },
    {
      "details" : "Create a new body for the #Entity",
      "contents": "CreateEntityBody(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "CreateEntityBody"
    },
    {
      "details" : "Create a new #Entity based on the specified Mesh and Material at the given position",
      "contents": "CreateEntity(${1:#Entity}, ${2:MeshID})$3",
      "kind"    : "function",
      "trigger" : "CreateEntity"
    },
    {
      "details" : "Returns the name of the CPU",
      "contents": "CPUName()$1",
      "kind"    : "function",
      "trigger" : "CPUName"
    },
    {
      "details" : "Create a new #Image2 identical to the source #Image1",
      "contents": "CopyImage(${1:#Image1})$2",
      "kind"    : "function",
      "trigger" : "CopyImage"
    },
    {
      "details" : "Terminates the current GadgetList creation and go back to the previous GadgetList",
      "contents": "CloseGadgetList3D()$1",
      "kind"    : "function",
      "trigger" : "CloseGadgetList3D"
    },
    {
      "details" : "Get the path string that represents the given XML node in the document (or relative to ParentNode)",
      "contents": "XMLNodePath(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "XMLNodePath"
    },
    {
      "details" : "Get the name of the current examined attribute in the XML node",
      "contents": "XMLAttributeName(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "XMLAttributeName"
    },
    {
      "details" : "Associates the specified Text$ to the current ToolBar #ButtonID",
      "contents": "ToolBarToolTip(${1:#ToolBar}, ${2:ButtonID})$3",
      "kind"    : "function",
      "trigger" : "ToolBarToolTip"
    },
    {
      "details" : "Set the frame rate (in frames per second) for the current screen",
      "contents": "SetFrameRate(${1:FrameRate})$2",
      "kind"    : "function",
      "trigger" : "SetFrameRate"
    },
    {
      "details" : "Begin a new page in the vector drawing output",
      "contents": "NewVectorPage()$1",
      "kind"    : "function",
      "trigger" : "NewVectorPage"
    },
    {
      "details" : "Returns 0 if the specified button is not pressed, else the button is pressed",
      "contents": "MouseButton(${1:ButtonNumber})$2",
      "kind"    : "function",
      "trigger" : "MouseButton"
    },
    {
      "details" : "Get the text content of the given XML node",
      "contents": "GetXMLNodeText(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "GetXMLNodeText"
    },
    {
      "details" : "Returns the full path of the temporary directory",
      "contents": "GetTemporaryDirectory()$1",
      "kind"    : "function",
      "trigger" : "GetTemporaryDirectory"
    },
    {
      "details" : "Return the Y position, in pixel, of the #Gadget3D",
      "contents": "GadgetY3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GadgetY3D"
    },
    {
      "details" : "Returns the calculated fingerprint string and frees all resources",
      "contents": "FinishFingerprint(${1:#Fingerprint})$2",
      "kind"    : "function",
      "trigger" : "FinishFingerprint"
    },
    {
      "details" : "Create a new #NodeAnimation",
      "contents": "CreateNodeAnimation(${1:#NodeAnimation}, ${2:NodeID}, ${3:Length}, ${4:Interpolation})$5",
      "kind"    : "function",
      "trigger" : "CreateNodeAnimation"
    },
    {
      "details" : "Create a new empty #Mesh",
      "contents": "CreateMesh(${1:#Mesh})$2",
      "kind"    : "function",
      "trigger" : "CreateMesh"
    },
    {
      "details" : "Close the specified client connection and send a notification to the server",
      "contents": "CloseNetworkConnection(${1:Connection})$2",
      "kind"    : "function",
      "trigger" : "CloseNetworkConnection"
    },
    {
      "details" : "Remove and destroy all the billboards of the #BillboardGroup",
      "contents": "ClearBillboards(${1:#BillboardGroup})$2",
      "kind"    : "function",
      "trigger" : "ClearBillboards"
    },
    {
      "details" : "Load a sound found a the specified memory address",
      "contents": "CatchSound(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "CatchSound"
    },
    {
      "details" : "Add a color to the vector drawing gradient",
      "contents": "VectorSourceGradientColor(${1:Color})$2",
      "kind"    : "function",
      "trigger" : "VectorSourceGradientColor"
    },
    {
      "details" : "Returns the offset of the specified structure field",
      "contents": "OffsetOf(${1:StructureField})$2",
      "kind"    : "function",
      "trigger" : "OffsetOf"
    },
    {
      "details" : "Change the text of the specified \"Field\" in the given ",
      "contents": "StatusBarText(${1:#StatusBar}, ${2:Field})$3",
      "kind"    : "function",
      "trigger" : "StatusBarText"
    },
    {
      "details" : "Set the (tag-)name of the given XML node",
      "contents": "SetXMLNodeName(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "SetXMLNodeName"
    },
    {
      "details" : "Change the #Gadget3D current state",
      "contents": "SetGadgetState3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "SetGadgetState3D"
    },
    {
      "details" : "Change the #Gadget current state",
      "contents": "SetGadgetState(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "SetGadgetState"
    },
    {
      "details" : "Save the current vector drawing state",
      "contents": "SaveVectorState()$1",
      "kind"    : "function",
      "trigger" : "SaveVectorState"
    },
    {
      "details" : "Replace some strings according to the regular expression",
      "contents": "ReplaceRegularExpression(${1:#RegularExpression}, ${2:String.s})$3",
      "kind"    : "function",
      "trigger" : "ReplaceRegularExpression"
    },
    {
      "details" : "Remove the icon from the Systray area",
      "contents": "RemoveSysTrayIcon(${1:#SysTrayIcon})$2",
      "kind"    : "function",
      "trigger" : "RemoveSysTrayIcon"
    },
    {
      "details" : "Finds occurrences of \"StringToRemove$\" into the given \"String$\" and removes them",
      "contents": "RemoveString(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "RemoveString"
    },
    {
      "details" : "Try to detect the String format in the file from a BOM. (Byte Order Mark)",
      "contents": "ReadStringFormat(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadStringFormat"
    },
    {
      "details" : "Get the parent of the given XML node",
      "contents": "ParentXMLNode(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "ParentXMLNode"
    },
    {
      "details" : "Opens a new window according to the specified parameters",
      "contents": "OpenWindow(${1:#Window}, ${2:x}, ${3:y}, ${4:InnerWidth}, ${5:InnerHeight}, ${6:Title$})$7",
      "kind"    : "function",
      "trigger" : "OpenWindow"
    },
    {
      "details" : "Go to the next key after a call to ExaminePreferenceKeys()",
      "contents": "NextPreferenceKey()$1",
      "kind"    : "function",
      "trigger" : "NextPreferenceKey"
    },
    {
      "details" : "Change the texture filtering mode for the #Material",
      "contents": "MaterialFilteringMode(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "MaterialFilteringMode"
    },
    {
      "details" : "Load the specified image",
      "contents": "LoadImage(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "LoadImage"
    },
    {
      "details" : "Create a ListView gadget in the current GadgetList",
      "contents": "ListViewGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ListViewGadget3D"
    },
    {
      "details" : "Create a ListView gadget in the current GadgetList",
      "contents": "ListViewGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ListViewGadget"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsSound(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "IsSound"
    },
    {
      "details" : "Get the #NodeAnimation length",
      "contents": "GetNodeAnimationLength(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "GetNodeAnimationLength"
    },
    {
      "details" : "Free the specified #Movie and remove it from memory",
      "contents": "FreeMovie(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "FreeMovie"
    },
    {
      "details" : "Change the read/write pointer position of the specified file",
      "contents": "FileSeek(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "FileSeek"
    },
    {
      "details" : "Fetch the #Entity material",
      "contents": "FetchEntityMaterial(${1:#Entity}, ${2:#Material})$3",
      "kind"    : "function",
      "trigger" : "FetchEntityMaterial"
    },
    {
      "details" : "Return the yaw of the #Entity",
      "contents": "EntityYaw(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityYaw"
    },
    {
      "details" : "Return the position of the #Entity bounding box",
      "contents": "EntityBoundingBox(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityBoundingBox"
    },
    {
      "details" : "Create a new #Terrain",
      "contents": "CreateTerrain(${1:#Terrain}, ${2:Size}, ${3:WorldSize}, ${4:Scale}, ${5:NbLayers}, ${6:Filename.s})$7",
      "kind"    : "function",
      "trigger" : "CreateTerrain"
    },
    {
      "details" : "Create a new directory on the FTP server",
      "contents": "CreateFTPDirectory(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "CreateFTPDirectory"
    },
    {
      "details" : "Converts a number in binary string form",
      "contents": "Bin(${1:Number.q})$2",
      "kind"    : "function",
      "trigger" : "Bin"
    },
    {
      "details" : "Returns the area hyperbolic tangent of the specified number",
      "contents": "ATanH(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "ATanH"
    },
    {
      "details" : "Returns the type of the given object",
      "contents": "TypeOf(${1:Object})$2",
      "kind"    : "function",
      "trigger" : "TypeOf"
    },
    {
      "details" : "Change the thread priority and returns the old priority",
      "contents": "ThreadPriority(${1:Thread})$2",
      "kind"    : "function",
      "trigger" : "ThreadPriority"
    },
    {
      "details" : "Changes the realtime blending mode",
      "contents": "SpriteBlendingMode(${1:SourceOperation})$2",
      "kind"    : "function",
      "trigger" : "SpriteBlendingMode"
    },
    {
      "details" : "Show the watchlist window",
      "contents": "ShowWatchlist()$1",
      "kind"    : "function",
      "trigger" : "ShowWatchlist"
    },
    {
      "details" : "Reverse all the characters of the string",
      "contents": "ReverseString(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "ReverseString"
    },
    {
      "details" : "Return the Heigth of the drawing area, in pixel",
      "contents": "PrinterPageHeight()$1",
      "kind"    : "function",
      "trigger" : "PrinterPageHeight"
    },
    {
      "details" : "Start to play the CD-Audio from \"StartTrack\" until the end of \"EndTrack\"",
      "contents": "PlayAudioCD(${1:StartTrack})$2",
      "kind"    : "function",
      "trigger" : "PlayAudioCD"
    },
    {
      "details" : "Read a float (4 bytes) from the specified memory address",
      "contents": "PeekF(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PeekF"
    },
    {
      "details" : "Move the #Entity bone relative to its previous position",
      "contents": "MoveEntityBone(${1:#Entity}, ${2:Bone.s}, ${3:x}, ${4:y}, ${5:z})$6",
      "kind"    : "function",
      "trigger" : "MoveEntityBone"
    },
    {
      "details" : "Get the (tag-)name of the given XML node",
      "contents": "GetXMLNodeName(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "GetXMLNodeName"
    },
    {
      "details" : "Return the gadget current state",
      "contents": "GetGadgetState3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetState3D"
    },
    {
      "details" : "Return the gadget current state",
      "contents": "GetGadgetState(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetState"
    },
    {
      "details" : "Return the size of the specified file",
      "contents": "FileSize(${1:FileName.s})$2",
      "kind"    : "function",
      "trigger" : "FileSize"
    },
    {
      "details" : "Start examining the groups in the preference file",
      "contents": "ExaminePreferenceGroups()$1",
      "kind"    : "function",
      "trigger" : "ExaminePreferenceGroups"
    },
    {
      "details" : "Delete the given XML node and all its children from its XML tree",
      "contents": "DeleteXMLNode(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "DeleteXMLNode"
    },
    {
      "details" : "Count the billboards number contained in the #BillboardGroup",
      "contents": "CountBillboards(${1:#BillboardGroup})$2",
      "kind"    : "function",
      "trigger" : "CountBillboards"
    },
    {
      "details" : "Call a C function quickly, using its pointer",
      "contents": "CallCFunctionFast(${1:*Function})$2",
      "kind"    : "function",
      "trigger" : "CallCFunctionFast"
    },
    {
      "details" : "Add a file attachment from a memory area",
      "contents": "AddMailAttachmentData(${1:#Mail}, ${2:Description.s}, ${3:*Buffer})$4",
      "kind"    : "function",
      "trigger" : "AddMailAttachmentData"
    },
    {
      "details" : "Add a keyboard shortcut to the specified #Window",
      "contents": "AddKeyboardShortcut(${1:#Window}, ${2:Key})$3",
      "kind"    : "function",
      "trigger" : "AddKeyboardShortcut"
    },
    {
      "details" : "Get the OS handle for the thread",
      "contents": "ThreadID(${1:Thread})$2",
      "kind"    : "function",
      "trigger" : "ThreadID"
    },
    {
      "details" : "Scale the #Text3D",
      "contents": "ScaleText3D(${1:#Text3D}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ScaleText3D"
    },
    {
      "details" : "Scale the #Node",
      "contents": "ScaleNode(${1:#Node}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ScaleNode"
    },
    {
      "details" : "Scale the #Entity",
      "contents": "ScaleEntity(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ScaleEntity"
    },
    {
      "details" : "Clear all colors from the drawing gradient and reset it to BackColor->FrontColor",
      "contents": "ResetGradientColors()$1",
      "kind"    : "function",
      "trigger" : "ResetGradientColors"
    },
    {
      "details" : "Remove the timer event from the window",
      "contents": "RemoveWindowTimer(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "RemoveWindowTimer"
    },
    {
      "details" : "Read a word (2 bytes) from the specified file",
      "contents": "ReadWord(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadWord"
    },
    {
      "details" : "Open a print requester, necessary to print",
      "contents": "PrintRequester()$1",
      "kind"    : "function",
      "trigger" : "PrintRequester"
    },
    {
      "details" : "Get the name of the currently examined preference group",
      "contents": "PreferenceGroupName()$1",
      "kind"    : "function",
      "trigger" : "PreferenceGroupName"
    },
    {
      "details" : "Reads an integer (8 bytes) from the specified memory address",
      "contents": "PeekI(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "PeekI"
    },
    {
      "details" : "Change the current module volume in realtime",
      "contents": "MusicVolume(${1:#Music})$2",
      "kind"    : "function",
      "trigger" : "MusicVolume"
    },
    {
      "details" : "Return the specified #Gadget item attribute value",
      "contents": "GetGadgetItemAttribute(${1:#Gadget}, ${2:Item})$3",
      "kind"    : "function",
      "trigger" : "GetGadgetItemAttribute"
    },
    {
      "details" : "Return the height, in pixel, of the #Gadget",
      "contents": "GadgetHeight(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GadgetHeight"
    },
    {
      "details" : "Stop and remove a sound from memory",
      "contents": "FreeSound(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "FreeSound"
    },
    {
      "details" : "Export a XML tree to a memory buffer",
      "contents": "ExportXML(${1:#XML}, ${2:*Address})$3",
      "kind"    : "function",
      "trigger" : "ExportXML"
    },
    {
      "details" : "Examine the attribute list of the given XML node",
      "contents": "ExamineXMLAttributes(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "ExamineXMLAttributes"
    },
    {
      "details" : "Examines the installed database drivers available on the system",
      "contents": "ExamineDatabaseDrivers()$1",
      "kind"    : "function",
      "trigger" : "ExamineDatabaseDrivers"
    },
    {
      "details" : "Disable or enable the given toolbar button (1=Disable, 0=Enable)",
      "contents": "DisableToolBarButton(${1:#ToolBar}, ${2:ButtonID})$3",
      "kind"    : "function",
      "trigger" : "DisableToolBarButton"
    },
    {
      "details" : "Disable or enable a menu item",
      "contents": "DisableMenuItem(${1:#Menu}, ${2:MenuItem})$3",
      "kind"    : "function",
      "trigger" : "DisableMenuItem"
    },
    {
      "details" : "Executes the SQL Request$ on the specified database",
      "contents": "DatabaseQuery(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "DatabaseQuery"
    },
    {
      "details" : "Create a gadget container in the current GadgetList",
      "contents": "ContainerGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ContainerGadget"
    },
    {
      "details" : "Add a curve to the vector drawing path",
      "contents": "AddPathCurve(${1:x1.d}, ${2:y1.d}, ${3:x2.d}, ${4:y2.d}, ${5:x3.d})$6",
      "kind"    : "function",
      "trigger" : "AddPathCurve"
    },
    {
      "details" : "Get the value of the current examined attribute in the XML node",
      "contents": "XMLAttributeValue(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "XMLAttributeValue"
    },
    {
      "details" : "Add SQLite support to the database commandset",
      "contents": "UseSQLiteDatabase()$1",
      "kind"    : "function",
      "trigger" : "UseSQLiteDatabase"
    },
    {
      "details" : "Returns the unique ID which identifies the toolbar in the operating system",
      "contents": "ToolBarID(${1:#ToolBar})$2",
      "kind"    : "function",
      "trigger" : "ToolBarID"
    },
    {
      "details" : "Return the length (in pixel) of the given string in the current output using the current font",
      "contents": "TextWidth(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "TextWidth"
    },
    {
      "details" : "Returns the #Texture unique ID",
      "contents": "TextureID(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "TextureID"
    },
    {
      "details" : "Start a step by step fingerprint calculation",
      "contents": "StartFingerprint(${1:#Fingerprint})$2",
      "kind"    : "function",
      "trigger" : "StartFingerprint"
    },
    {
      "details" : "Create a new streaming cipher",
      "contents": "StartAESCipher(${1:#Cipher}, ${2:*Key}, ${3:KeyBits}, ${4:*InitializationVector})$5",
      "kind"    : "function",
      "trigger" : "StartAESCipher"
    },
    {
      "details" : "Change the state of the specified button",
      "contents": "SetToolBarButtonState(${1:#ToolBar}, ${2:ButtonID})$3",
      "kind"    : "function",
      "trigger" : "SetToolBarButtonState"
    },
    {
      "details" : "Rounds the specified float number according to the given mode",
      "contents": "Round(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "Round"
    },
    {
      "details" : "Returns the month value of the specified date (between 1 and 12)",
      "contents": "Month(${1:Date})$2",
      "kind"    : "function",
      "trigger" : "Month"
    },
    {
      "details" : "Returns the specified #LibraryID",
      "contents": "LibraryID(${1:#Library})$2",
      "kind"    : "function",
      "trigger" : "LibraryID"
    },
    {
      "details" : "Returns the ImageID of the specified #Image",
      "contents": "ImageID(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "ImageID"
    },
    {
      "details" : "Get the FontID associated with the specified gadget",
      "contents": "GetGadgetFont(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetFont"
    },
    {
      "details" : "get the content of a register at the time of the error",
      "contents": "ErrorRegister(${1:Register})$2",
      "kind"    : "function",
      "trigger" : "ErrorRegister"
    },
    {
      "details" : "Encode the specified image into memory",
      "contents": "EncodeImage(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "EncodeImage"
    },
    {
      "details" : "Start a Drag and Drop operation with the given Image",
      "contents": "DragImage(${1:ImageID})$2",
      "kind"    : "function",
      "trigger" : "DragImage"
    },
    {
      "details" : "Returns the name of the current database driver",
      "contents": "DatabaseDriverName()$1",
      "kind"    : "function",
      "trigger" : "DatabaseDriverName"
    },
    {
      "details" : "Returns #True if the specified column contains NULL",
      "contents": "CheckDatabaseNull(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "CheckDatabaseNull"
    },
    {
      "details" : "Get the specified CGI cookie name",
      "contents": "CGICookieName(${1:Index})$2",
      "kind"    : "function",
      "trigger" : "CGICookieName"
    },
    {
      "details" : "Create a new #Image found at the specified memory address",
      "contents": "CatchImage(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "CatchImage"
    },
    {
      "details" : "Draw a filled box of given dimensions on the current output",
      "contents": "Box(${1:x}, ${2:y}, ${3:Width})$4",
      "kind"    : "function",
      "trigger" : "Box"
    },
    {
      "details" : "Write data to the console output",
      "contents": "WriteConsoleData(${1:*Buffer})$2",
      "kind"    : "function",
      "trigger" : "WriteConsoleData"
    },
    {
      "details" : "Add SHA1 fingerprint support to the cipher commandset",
      "contents": "UseMD5Fingerprint()$1",
      "kind"    : "function",
      "trigger" : "UseMD5Fingerprint"
    },
    {
      "details" : "End the file at the current position and cut all following data",
      "contents": "TruncateFile(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "TruncateFile"
    },
    {
      "details" : "Set the text content of the given XML node",
      "contents": "SetXMLNodeText(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "SetXMLNodeText"
    },
    {
      "details" : "Set the current #NodeAnimation time",
      "contents": "SetNodeAnimationTime(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "SetNodeAnimationTime"
    },
    {
      "details" : "Write an ascii character (1 byte) to the specified memory address",
      "contents": "PokeA(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeA"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsDirectory(${1:#Directory})$2",
      "kind"    : "function",
      "trigger" : "IsDirectory"
    },
    {
      "details" : "Insert the specified Map() into the XML node",
      "contents": "InsertXMLMap(${1:ParentNode})$2",
      "kind"    : "function",
      "trigger" : "InsertXMLMap"
    },
    {
      "details" : "Returns the row position in the pattern currently played",
      "contents": "GetMusicRow(${1:#Music})$2",
      "kind"    : "function",
      "trigger" : "GetMusicRow"
    },
    {
      "details" : "Return the last text pasted in the clipboard",
      "contents": "GetClipboardText()$1",
      "kind"    : "function",
      "trigger" : "GetClipboardText"
    },
    {
      "details" : "Free the water plane",
      "contents": "FreeWater(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "FreeWater"
    },
    {
      "details" : "Extract an XML node into the specified structure",
      "contents": "ExtractXMLStructure(${1:Node}, ${2:*Buffer})$3",
      "kind"    : "function",
      "trigger" : "ExtractXMLStructure"
    },
    {
      "details" : "Change the angular factor of the #Entity",
      "contents": "EntityAngularFactor(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "EntityAngularFactor"
    },
    {
      "details" : "Returns last error (if any) in human readable form",
      "contents": "DatabaseError()$1",
      "kind"    : "function",
      "trigger" : "DatabaseError"
    },
    {
      "details" : "Creates a new empty popup menu with images support",
      "contents": "CreatePopupImageMenu(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "CreatePopupImageMenu"
    },
    {
      "details" : "Change a specified icon in the SysTray area",
      "contents": "ChangeSysTrayIcon(${1:#SysTrayIcon})$2",
      "kind"    : "function",
      "trigger" : "ChangeSysTrayIcon"
    },
    {
      "details" : "Retrieve the yaw of the #Camera",
      "contents": "CameraYaw(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraYaw"
    },
    {
      "details" : "Get the number of children that the given XML node has",
      "contents": "XMLChildCount(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "XMLChildCount"
    },
    {
      "details" : "Test if the two sprites are overlapped",
      "contents": "SpritePixelCollision(${1:#Sprite1}, ${2:x1}, ${3:y1}, ${4:#Sprite2}, ${5:x2})$6",
      "kind"    : "function",
      "trigger" : "SpritePixelCollision"
    },
    {
      "details" : "Create an empty string of the given \"Length\": filled with \"space\" characters",
      "contents": "Space(${1:Length})$2",
      "kind"    : "function",
      "trigger" : "Space"
    },
    {
      "details" : "Set the value of the given attribute of the XML node (creates the attribute if needed)",
      "contents": "SetXMLAttribute(${1:Node}, ${2:Attribute.s})$3",
      "kind"    : "function",
      "trigger" : "SetXMLAttribute"
    },
    {
      "details" : "Set a double as a bind variable for the next DatabaseQuery() or DatabaseUpdate()",
      "contents": "SetDatabaseDouble(${1:#Database}, ${2:StatementIndex})$3",
      "kind"    : "function",
      "trigger" : "SetDatabaseDouble"
    },
    {
      "details" : "Get the screen mode refreshrate",
      "contents": "ScreenModeRefreshRate()$1",
      "kind"    : "function",
      "trigger" : "ScreenModeRefreshRate"
    },
    {
      "details" : "Initialize the joystick environment for later use",
      "contents": "InitJoystick()$1",
      "kind"    : "function",
      "trigger" : "InitJoystick"
    },
    {
      "details" : "Retrieve the current menu title text",
      "contents": "GetMenuTitleText(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "GetMenuTitleText"
    },
    {
      "details" : "Returns the system ID of the specified gadget item",
      "contents": "GadgetItemID(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GadgetItemID"
    },
    {
      "details" : "Change the size of the buffers for the specified file",
      "contents": "FileBuffersSize(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "FileBuffersSize"
    },
    {
      "details" : "Returns the numbers of columns (fields) in the specified opened database",
      "contents": "DatabaseColumns(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "DatabaseColumns"
    },
    {
      "details" : "Open the standard requester to choose a color",
      "contents": "ColorRequester()$1",
      "kind"    : "function",
      "trigger" : "ColorRequester"
    },
    {
      "details" : "Create a checkbox gadget in the GadgetList",
      "contents": "CheckBoxGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "CheckBoxGadget"
    },
    {
      "details" : "Get the specified CGI variable content",
      "contents": "CGIVariable(${1:VariableName.s})$2",
      "kind"    : "function",
      "trigger" : "CGIVariable"
    },
    {
      "details" : "Add a new texture layer to the #Material",
      "contents": "AddMaterialLayer(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "AddMaterialLayer"
    },
    {
      "details" : "Uncompress the current or the specified filename in the archive to memory",
      "contents": "UncompressPackMemory(${1:#Pack}, ${2:*Buffer})$3",
      "kind"    : "function",
      "trigger" : "UncompressPackMemory"
    },
    {
      "details" : "Decrement the semaphore count only if it is above 0, else return 0",
      "contents": "TrySemaphore(${1:Semaphore})$2",
      "kind"    : "function",
      "trigger" : "TrySemaphore"
    },
    {
      "details" : "Returns the size of the given structure",
      "contents": "SizeOf(${1:Structure})$2",
      "kind"    : "function",
      "trigger" : "SizeOf"
    },
    {
      "details" : "Stop the profiler",
      "contents": "StopProfiler()$1",
      "kind"    : "function",
      "trigger" : "StopProfiler"
    },
    {
      "details" : "Stop the specified #Entity animation",
      "contents": "StopEntityAnimation(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "StopEntityAnimation"
    },
    {
      "details" : "Returns the sinus of the specified angle, in radian",
      "contents": "Sin(${1:Angle})$2",
      "kind"    : "function",
      "trigger" : "Sin"
    },
    {
      "details" : "Show the variable viewer window",
      "contents": "ShowVariableViewer()$1",
      "kind"    : "function",
      "trigger" : "ShowVariableViewer"
    },
    {
      "details" : "Change the current pattern position of the playing module to the new one",
      "contents": "SetMusicPosition(${1:#Music})$2",
      "kind"    : "function",
      "trigger" : "SetMusicPosition"
    },
    {
      "details" : "Send raw data to the specified client",
      "contents": "SendNetworkData(${1:ClientID}, ${2:*MemoryBuffer})$3",
      "kind"    : "function",
      "trigger" : "SendNetworkData"
    },
    {
      "details" : "Returns the size of the font chosen by the user with the FontRequester() command",
      "contents": "SelectedFontSize()$1",
      "kind"    : "function",
      "trigger" : "SelectedFontSize"
    },
    {
      "details" : "Get the root-node of the XML tree",
      "contents": "RootXMLNode(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "RootXMLNode"
    },
    {
      "details" : "Rename or move a file on the FTP server",
      "contents": "RenameFTPFile(${1:#Ftp}, ${2:Filename.s})$3",
      "kind"    : "function",
      "trigger" : "RenameFTPFile"
    },
    {
      "details" : "Get the position in the string of the current regular expression match",
      "contents": "RegularExpressionMatchPosition(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "RegularExpressionMatchPosition"
    },
    {
      "details" : "Read the double value associated to the keyword",
      "contents": "ReadPreferenceDouble(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "ReadPreferenceDouble"
    },
    {
      "details" : "Return a random number between 0 (unless \"Minimum\" is specified) and the \"Maximum\" value",
      "contents": "Random(${1:Maximum})$2",
      "kind"    : "function",
      "trigger" : "Random"
    },
    {
      "details" : "Write a double (8 bytes) to the specified memory address",
      "contents": "PokeD(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeD"
    },
    {
      "details" : "Opens a new Help window",
      "contents": "OpenHelp(${1:Filename.s})$2",
      "kind"    : "function",
      "trigger" : "OpenHelp"
    },
    {
      "details" : "Change the shading mode for the #Material",
      "contents": "MaterialShadingMode(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "MaterialShadingMode"
    },
    {
      "details" : "Initialize the scintilla library",
      "contents": "InitScintilla()$1",
      "kind"    : "function",
      "trigger" : "InitScintilla"
    },
    {
      "details" : "Returns the content of the specified column as a standard number",
      "contents": "GetDatabaseLong(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "GetDatabaseLong"
    },
    {
      "details" : "Fetch the orientation for the specified object (use GetX(), GetY(), GetZ() and GetW() to get the values)",
      "contents": "FetchOrientation(${1:ObjectID})$2",
      "kind"    : "function",
      "trigger" : "FetchOrientation"
    },
    {
      "details" : "Examine the current directory on the FTP server",
      "contents": "ExamineFTPDirectory(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "ExamineFTPDirectory"
    },
    {
      "details" : "Return the modified/created/accessed date of the current entry in the directory",
      "contents": "DirectoryEntryDate(${1:#Directory})$2",
      "kind"    : "function",
      "trigger" : "DirectoryEntryDate"
    },
    {
      "details" : "Delete the specified file",
      "contents": "DeleteFile(${1:FileName.s})$2",
      "kind"    : "function",
      "trigger" : "DeleteFile"
    },
    {
      "details" : "Change the colors used by the text display",
      "contents": "ConsoleColor(${1:CharacterColor})$2",
      "kind"    : "function",
      "trigger" : "ConsoleColor"
    },
    {
      "details" : "Create a combobox gadget in the current GadgetList",
      "contents": "ComboBoxGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ComboBoxGadget3D"
    },
    {
      "details" : "Create a combobox gadget in the current GadgetList",
      "contents": "ComboBoxGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ComboBoxGadget"
    },
    {
      "details" : "Set the billboardgroup common up vector",
      "contents": "BillboardGroupCommonUpVector(${1:#BillboardGroup}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "BillboardGroupCommonUpVector"
    },
    {
      "details" : "Return the number of seconds elapsed since the current track has being start to play",
      "contents": "AudioCDTrackSeconds()$1",
      "kind"    : "function",
      "trigger" : "AudioCDTrackSeconds"
    },
    {
      "details" : "Add a timer event to the window",
      "contents": "AddWindowTimer(${1:#Window}, ${2:Timer})$3",
      "kind"    : "function",
      "trigger" : "AddWindowTimer"
    },
    {
      "details" : "Remove any clipping from the drawing output",
      "contents": "UnclipOutput()$1",
      "kind"    : "function",
      "trigger" : "UnclipOutput"
    },
    {
      "details" : "Add a vertical separator to toolbar being constructed",
      "contents": "ToolBarSeparator()$1",
      "kind"    : "function",
      "trigger" : "ToolBarSeparator"
    },
    {
      "details" : "Start to play the #Sound",
      "contents": "PlaySound(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "PlaySound"
    },
    {
      "details" : "Read a long (4 bytes) number from the specified memory address",
      "contents": "PeekL(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PeekL"
    },
    {
      "details" : "Reads a double (8 bytes) from the specified memory address",
      "contents": "PeekD(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "PeekD"
    },
    {
      "details" : "Creates a new item entry for the menu",
      "contents": "MenuItem(${1:MenuItemID})$2",
      "kind"    : "function",
      "trigger" : "MenuItem"
    },
    {
      "details" : "Returns 1 if the specified key is currently pushed",
      "contents": "KeyboardPushed(${1:KeyID})$2",
      "kind"    : "function",
      "trigger" : "KeyboardPushed"
    },
    {
      "details" : "Returns the integer part of the specified value as a quad",
      "contents": "IntQ(${1:Float})$2",
      "kind"    : "function",
      "trigger" : "IntQ"
    },
    {
      "details" : "Allows to catch a whole character line",
      "contents": "Input()$1",
      "kind"    : "function",
      "trigger" : "Input"
    },
    {
      "details" : "Returns the original format of the specified #Image",
      "contents": "ImageFormat(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "ImageFormat"
    },
    {
      "details" : "Returns on which window the event has occured (return the #Window identifier)",
      "contents": "EventWindow()$1",
      "kind"    : "function",
      "trigger" : "EventWindow"
    },
    {
      "details" : "Create a new #Node",
      "contents": "CreateNode(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "CreateNode"
    },
    {
      "details" : "Create a gadget container in the current GadgetList",
      "contents": "ContainerGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ContainerGadget3D"
    },
    {
      "details" : "Returns the #Billboard X absolute position in the #BillboardGroup",
      "contents": "BillboardX(${1:#Billboard})$2",
      "kind"    : "function",
      "trigger" : "BillboardX"
    },
    {
      "details" : "Returns the length of the specified track, in seconds",
      "contents": "AudioCDTrackLength(${1:TrackNumber})$2",
      "kind"    : "function",
      "trigger" : "AudioCDTrackLength"
    },
    {
      "details" : "Add an ellipse (or part of it) to the vector drawing path",
      "contents": "AddPathEllipse(${1:x.d}, ${2:y.d}, ${3:RadiusX.d})$4",
      "kind"    : "function",
      "trigger" : "AddPathEllipse"
    },
    {
      "details" : "Creates a Gadget to select a keyboard shortcut in the current GadgetList",
      "contents": "ShortcutGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "ShortcutGadget"
    },
    {
      "details" : "Set the minimized/maximized state of the window",
      "contents": "SetWindowState(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "SetWindowState"
    },
    {
      "details" : "Set the #Entity material",
      "contents": "SetEntityMaterial(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "SetEntityMaterial"
    },
    {
      "details" : "Rotate the #Material texture",
      "contents": "RotateMaterial(${1:#Material}, ${2:Angle})$3",
      "kind"    : "function",
      "trigger" : "RotateMaterial"
    },
    {
      "details" : "Read the value associated to the keyword",
      "contents": "ReadPreferenceString(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "ReadPreferenceString"
    },
    {
      "details" : "Reads a character (1 bytes in ascii, 2 bytes in unicode) from the specified memory address",
      "contents": "PeekC(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "PeekC"
    },
    {
      "details" : "Returns the current pack entry size",
      "contents": "PackEntrySize(${1:#Pack})$2",
      "kind"    : "function",
      "trigger" : "PackEntrySize"
    },
    {
      "details" : "Start a new page",
      "contents": "NewPrinterPage()$1",
      "kind"    : "function",
      "trigger" : "NewPrinterPage"
    },
    {
      "details" : "Get a particle emitter defined in scripts files",
      "contents": "GetScriptParticleEmitter(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "GetScriptParticleEmitter"
    },
    {
      "details" : "Returns the modified/created/accessed date of the specified file",
      "contents": "GetFileDate(${1:FileName.s})$2",
      "kind"    : "function",
      "trigger" : "GetFileDate"
    },
    {
      "details" : "Return the type of the current entry in the directory",
      "contents": "DirectoryEntryType(${1:#Directory})$2",
      "kind"    : "function",
      "trigger" : "DirectoryEntryType"
    },
    {
      "details" : "Clear the clipboard of its content",
      "contents": "ClearClipboard()$1",
      "kind"    : "function",
      "trigger" : "ClearClipboard"
    },
    {
      "details" : "Call a function quickly, using its pointer",
      "contents": "CallFunctionFast(${1:*Function})$2",
      "kind"    : "function",
      "trigger" : "CallFunctionFast"
    },
    {
      "details" : "Returns the #Billboard Y absolute position in the #BillboardGroup",
      "contents": "BillboardY(${1:#Billboard})$2",
      "kind"    : "function",
      "trigger" : "BillboardY"
    },
    {
      "details" : "Return the number of remaining bytes in the output buffer",
      "contents": "AvailableSerialPortOutput(${1:#SerialPort})$2",
      "kind"    : "function",
      "trigger" : "AvailableSerialPortOutput"
    },
    {
      "details" : "Returns the arc tangent of the specified number, in radian",
      "contents": "ATan(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "ATan"
    },
    {
      "details" : "Save the specified image",
      "contents": "SaveImage(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "SaveImage"
    },
    {
      "details" : "Get the length of the current regular expression match",
      "contents": "RegularExpressionMatchLength(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "RegularExpressionMatchLength"
    },
    {
      "details" : "Read a double (8 bytes) from the specified file",
      "contents": "ReadDouble(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadDouble"
    },
    {
      "details" : "Start to play a movie previously loaded with LoadMovie() on the specified window",
      "contents": "PlayMovie(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "PlayMovie"
    },
    {
      "details" : "Get the height of the current drawing output",
      "contents": "OutputHeight()$1",
      "kind"    : "function",
      "trigger" : "OutputHeight"
    },
    {
      "details" : "Get the next XML node on the same level as the given node",
      "contents": "NextXMLNode(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "NextXMLNode"
    },
    {
      "details" : "Move the #Text3D",
      "contents": "MoveText3D(${1:#Text3D}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "MoveText3D"
    },
    {
      "details" : "Move the #Node",
      "contents": "MoveNode(${1:#Node}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "MoveNode"
    },
    {
      "details" : "Move the #Entity relative to its previous position",
      "contents": "MoveEntity(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "MoveEntity"
    },
    {
      "details" : "Move the #Camera relative to its previous position",
      "contents": "MoveCamera(${1:#Camera}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "MoveCamera"
    },
    {
      "details" : "Move the #BillboardGroup relatives to its previous location",
      "contents": "MoveBillboardGroup(${1:#BillboardGroup}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "MoveBillboardGroup"
    },
    {
      "details" : "Returns the joystick name",
      "contents": "JoystickName(${1:#Joystick})$2",
      "kind"    : "function",
      "trigger" : "JoystickName"
    },
    {
      "details" : "Get the Gadget that has the focus",
      "contents": "GetActiveGadget()$1",
      "kind"    : "function",
      "trigger" : "GetActiveGadget"
    },
    {
      "details" : "Update the keyboard state",
      "contents": "ExamineKeyboard()$1",
      "kind"    : "function",
      "trigger" : "ExamineKeyboard"
    },
    {
      "details" : "Returns the escaped string",
      "contents": "EscapeString(${1:String})$2",
      "kind"    : "function",
      "trigger" : "EscapeString"
    },
    {
      "details" : "Disable or enable a particle emitter",
      "contents": "DisableParticleEmitter(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "DisableParticleEmitter"
    },
    {
      "details" : "Returns the #Billboard Z absolute position in the #BillboardGroup",
      "contents": "BillboardZ(${1:#Billboard})$2",
      "kind"    : "function",
      "trigger" : "BillboardZ"
    },
    {
      "details" : "Add an item to a gadget (ListView, ComboBox etc...)",
      "contents": "AddGadgetItem(${1:#Gadget}, ${2:Position}, ${3:Text.s})$4",
      "kind"    : "function",
      "trigger" : "AddGadgetItem"
    },
    {
      "details" : "Get a node in the XML tree from a path string",
      "contents": "XMLNodeFromPath(${1:ParentNode})$2",
      "kind"    : "function",
      "trigger" : "XMLNodeFromPath"
    },
    {
      "details" : "Get the normal vector of the current collision",
      "contents": "WorldCollisionNormal()$1",
      "kind"    : "function",
      "trigger" : "WorldCollisionNormal"
    },
    {
      "details" : "Returns the unit of measurement used by the vector drawing output",
      "contents": "VectorUnit()$1",
      "kind"    : "function",
      "trigger" : "VectorUnit"
    },
    {
      "details" : "Add a standard button to the toolbar being constructed",
      "contents": "ToolBarStandardButton(${1:#ButtonID})$2",
      "kind"    : "function",
      "trigger" : "ToolBarStandardButton"
    },
    {
      "details" : "Convert a value into unsigned form",
      "contents": "StrU(${1:Value})$2",
      "kind"    : "function",
      "trigger" : "StrU"
    },
    {
      "details" : "Returns the string field at the specified index",
      "contents": "StringField(${1:String.s}, ${2:Index})$3",
      "kind"    : "function",
      "trigger" : "StringField"
    },
    {
      "details" : "Send a file to a FTP Server",
      "contents": "SendFTPFile(${1:#Ftp}, ${2:Filename.s})$3",
      "kind"    : "function",
      "trigger" : "SendFTPFile"
    },
    {
      "details" : "Returns the style of the font chosen by the user with the FontRequester() command",
      "contents": "SelectedFontStyle()$1",
      "kind"    : "function",
      "trigger" : "SelectedFontStyle"
    },
    {
      "details" : "Create a ScrollArea gadget in the current GadgetList",
      "contents": "ScrollAreaGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:ScrollAreaWidth}, ${7:ScrollAreaHeight})$8",
      "kind"    : "function",
      "trigger" : "ScrollAreaGadget3D"
    },
    {
      "details" : "Fill the buffer with bytes from the random number generator",
      "contents": "RandomData(${1:*Buffer})$2",
      "kind"    : "function",
      "trigger" : "RandomData"
    },
    {
      "details" : "Reads an ascii character (1 byte) from the specified memory address",
      "contents": "PeekA(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "PeekA"
    },
    {
      "details" : "Load the specified sound into memory",
      "contents": "LoadSound3D(${1:#Sound3D})$2",
      "kind"    : "function",
      "trigger" : "LoadSound3D"
    },
    {
      "details" : "Create a ListIcon gadget in the current GadgetList",
      "contents": "ListIconGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:FirstColumnTitle.s})$7",
      "kind"    : "function",
      "trigger" : "ListIconGadget"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsJoint(${1:#Joint})$2",
      "kind"    : "function",
      "trigger" : "IsJoint"
    },
    {
      "details" : "Initialize all CD-Audio resources",
      "contents": "InitAudioCD()$1",
      "kind"    : "function",
      "trigger" : "InitAudioCD"
    },
    {
      "details" : "Hide or show the specified #Entity",
      "contents": "HideEntity(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "HideEntity"
    },
    {
      "details" : "Return the runtime integer item value",
      "contents": "GetRuntimeInteger(${1:Name})$2",
      "kind"    : "function",
      "trigger" : "GetRuntimeInteger"
    },
    {
      "details" : "Get the keyframe pitch for the #NodeAnimation",
      "contents": "GetNodeAnimationKeyFramePitch(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "GetNodeAnimationKeyFramePitch"
    },
    {
      "details" : "Create an empty file",
      "contents": "CreateFile(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "CreateFile"
    },
    {
      "details" : "Clear the content of the debug output window",
      "contents": "ClearDebugOutput()$1",
      "kind"    : "function",
      "trigger" : "ClearDebugOutput"
    },
    {
      "details" : "Create a checkbox gadget in the GadgetList",
      "contents": "CheckBoxGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "CheckBoxGadget3D"
    },
    {
      "details" : "Parse XML from memory",
      "contents": "CatchXML(${1:#XML}, ${2:*Address})$3",
      "kind"    : "function",
      "trigger" : "CatchXML"
    },
    {
      "details" : "Retrieve the height of the #Camera view, in pixels",
      "contents": "CameraViewHeight(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraViewHeight"
    },
    {
      "details" : "Change the #Camera render mode",
      "contents": "CameraRenderMode(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraRenderMode"
    },
    {
      "details" : "Add a new archive as path to search",
      "contents": "Add3DArchive(${1:Name.s})$2",
      "kind"    : "function",
      "trigger" : "Add3DArchive"
    },
    {
      "details" : "Uncompress the content of the *Buffer into *Output",
      "contents": "UncompressMemory(${1:*Buffer}, ${2:Size}, ${3:*Output})$4",
      "kind"    : "function",
      "trigger" : "UncompressMemory"
    },
    {
      "details" : "Returns the fingerprint of the specified string",
      "contents": "StringFingerprint(${1:String})$2",
      "kind"    : "function",
      "trigger" : "StringFingerprint"
    },
    {
      "details" : "Set an image to display in the specified statusbar field",
      "contents": "StatusBarImage(${1:#StatusBar}, ${2:Field})$3",
      "kind"    : "function",
      "trigger" : "StatusBarImage"
    },
    {
      "details" : "Returns the height of the statusbar",
      "contents": "StatusBarHeight(${1:#StatusBar})$2",
      "kind"    : "function",
      "trigger" : "StatusBarHeight"
    },
    {
      "details" : "Returns 1, 0 or -1 depending on the sign of the given number",
      "contents": "Sign(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "Sign"
    },
    {
      "details" : "Show the profiler window",
      "contents": "ShowProfiler()$1",
      "kind"    : "function",
      "trigger" : "ShowProfiler"
    },
    {
      "details" : "Set the new frequency for the #Sound. Values are from 1000 to 100000 hz",
      "contents": "SetSoundFrequency(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "SetSoundFrequency"
    },
    {
      "details" : "Set the keyframe scale for the #NodeAnimation",
      "contents": "SetNodeAnimationKeyFrameScale(${1:#NodeAnimation}, ${2:KeyFrame}, ${3:ScaleX}, ${4:ScaleY})$5",
      "kind"    : "function",
      "trigger" : "SetNodeAnimationKeyFrameScale"
    },
    {
      "details" : "Change the image of the specified gadget item",
      "contents": "SetGadgetItemImage(${1:#Gadget}, ${2:Item})$3",
      "kind"    : "function",
      "trigger" : "SetGadgetItemImage"
    },
    {
      "details" : "Pastes the specified Text$ into the clipboard",
      "contents": "SetClipboardText(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "SetClipboardText"
    },
    {
      "details" : "Create a ScrollArea gadget in the current GadgetList",
      "contents": "ScrollAreaGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:ScrollAreaWidth})$7",
      "kind"    : "function",
      "trigger" : "ScrollAreaGadget"
    },
    {
      "details" : "Download a file from an URL to a memory buffer",
      "contents": "ReceiveHTTPMemory(${1:URL.s})$2",
      "kind"    : "function",
      "trigger" : "ReceiveHTTPMemory"
    },
    {
      "details" : "Display the Text$ in the console and add a line return",
      "contents": "PrintN(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "PrintN"
    },
    {
      "details" : "Return the x position of the #ParticleEmitter",
      "contents": "ParticleEmitterX(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "ParticleEmitterX"
    },
    {
      "details" : "Change the #ParticleEmitter emission rate (particles per seconds)",
      "contents": "ParticleEmissionRate(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "ParticleEmissionRate"
    },
    {
      "details" : "Parse XML from a string. The XML must be encoded in PB string format",
      "contents": "ParseXML(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "ParseXML"
    },
    {
      "details" : "Next pack entry",
      "contents": "NextPackEntry(${1:#Pack})$2",
      "kind"    : "function",
      "trigger" : "NextPackEntry"
    },
    {
      "details" : "Return the mesh pose name",
      "contents": "MeshPoseName(${1:#Mesh})$2",
      "kind"    : "function",
      "trigger" : "MeshPoseName"
    },
    {
      "details" : "Returns the menu bar height, in pixels",
      "contents": "MenuHeight()$1",
      "kind"    : "function",
      "trigger" : "MenuHeight"
    },
    {
      "details" : "Returns the current progress of a mail being sent",
      "contents": "MailProgress(${1:#Mail})$2",
      "kind"    : "function",
      "trigger" : "MailProgress"
    },
    {
      "details" : "Return the x position of the #Light",
      "contents": "LightX(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "LightX"
    },
    {
      "details" : "Returns 1 if the specified key has been pressed (pushed and released)",
      "contents": "KeyboardReleased(${1:KeyID})$2",
      "kind"    : "function",
      "trigger" : "KeyboardReleased"
    },
    {
      "details" : "Get the address of the current decoded instruction",
      "contents": "InstructionAddress()$1",
      "kind"    : "function",
      "trigger" : "InstructionAddress"
    },
    {
      "details" : "Hides or shows the specified #Light",
      "contents": "HideLight(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "HideLight"
    },
    {
      "details" : "Grab the screen content at the area x,y,Width,Height, and create a new #Sprite",
      "contents": "GrabSprite(${1:#Sprite}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "GrabSprite"
    },
    {
      "details" : "Get the background color of the window",
      "contents": "GetWindowColor(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "GetWindowColor"
    },
    {
      "details" : "Flip the back and front buffer on the current screen",
      "contents": "FlipBuffers()$1",
      "kind"    : "function",
      "trigger" : "FlipBuffers"
    },
    {
      "details" : "Returns the type of the specified column",
      "contents": "DatabaseColumnSize(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "DatabaseColumnSize"
    },
    {
      "details" : "Returns the name of the computer",
      "contents": "ComputerName()$1",
      "kind"    : "function",
      "trigger" : "ComputerName"
    },
    {
      "details" : "Clear the #Spine",
      "contents": "ClearSpline(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "ClearSpline"
    },
    {
      "details" : "Create a canvas gadget in the current GadgetList",
      "contents": "CanvasGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "CanvasGadget"
    },
    {
      "details" : "Get number of rows affected by a database update",
      "contents": "AffectedDatabaseRows(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "AffectedDatabaseRows"
    },
    {
      "details" : "Write a string to the specified file and add the \"end of line\" character",
      "contents": "WriteStringN(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteStringN"
    },
    {
      "details" : "Wait for the semaphore object once (decrement the count by 1)",
      "contents": "WaitSemaphore(${1:Semaphore})$2",
      "kind"    : "function",
      "trigger" : "WaitSemaphore"
    },
    {
      "details" : "Stop the current module (if it was playing)",
      "contents": "StopMusic(${1:#Music})$2",
      "kind"    : "function",
      "trigger" : "StopMusic"
    },
    {
      "details" : "Return the z position of the #Spline point",
      "contents": "SplinePointZ(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "SplinePointZ"
    },
    {
      "details" : "Set the new volume for the #Sound3D. Values are from 0 to 100",
      "contents": "SoundVolume3D(${1:#Sound3D})$2",
      "kind"    : "function",
      "trigger" : "SoundVolume3D"
    },
    {
      "details" : "Resolves all namespaces for the given node attribute",
      "contents": "ResolveXMLAttributeName(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "ResolveXMLAttributeName"
    },
    {
      "details" : "Change the #Billboard dimensions",
      "contents": "ResizeBillboard(${1:#Billboard}, ${2:#BillboardGroup}, ${3:Width})$4",
      "kind"    : "function",
      "trigger" : "ResizeBillboard"
    },
    {
      "details" : "Return the y position of the #ParticleEmitter",
      "contents": "ParticleEmitterY(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "ParticleEmitterY"
    },
    {
      "details" : "Return the roll of the #Node",
      "contents": "NodeRoll(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "NodeRoll"
    },
    {
      "details" : "Creates a new title entry for the menu",
      "contents": "MenuTitle(${1:Title.s})$2",
      "kind"    : "function",
      "trigger" : "MenuTitle"
    },
    {
      "details" : "Draw a line of given dimension on the current output",
      "contents": "Line(${1:x}, ${2:y}, ${3:Width})$4",
      "kind"    : "function",
      "trigger" : "Line"
    },
    {
      "details" : "Return the y position of the #Light",
      "contents": "LightY(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "LightY"
    },
    {
      "details" : "Get the #Entity attribute value",
      "contents": "GetEntityAttribute(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "GetEntityAttribute"
    },
    {
      "details" : "Returns a string representation of the Date, according to the specified Mask$",
      "contents": "FormatDate(${1:Mask.s})$2",
      "kind"    : "function",
      "trigger" : "FormatDate"
    },
    {
      "details" : "Return the roll of the #Entity",
      "contents": "EntityRoll(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityRoll"
    },
    {
      "details" : "Disable the dynamic lighting on the #Material",
      "contents": "DisableMaterialLighting(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "DisableMaterialLighting"
    },
    {
      "details" : "Create a new track to the #Mesh animation",
      "contents": "CreateVertexTrack(${1:#Mesh}, ${2:Animation.s})$3",
      "kind"    : "function",
      "trigger" : "CreateVertexTrack"
    },
    {
      "details" : "Get the CGI web content buffer pointer",
      "contents": "CGIBuffer()$1",
      "kind"    : "function",
      "trigger" : "CGIBuffer"
    },
    {
      "details" : "Retrieve the roll of the #Camera",
      "contents": "CameraRoll(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraRoll"
    },
    {
      "details" : "Change the debug mode for the whole world",
      "contents": "WorldDebug(${1:Mode})$2",
      "kind"    : "function",
      "trigger" : "WorldDebug"
    },
    {
      "details" : "Add TAR support to the packer commandset",
      "contents": "UseTARPacker()$1",
      "kind"    : "function",
      "trigger" : "UseTARPacker"
    },
    {
      "details" : "Enables the FLAC support for CatchSound(), LoadSound()",
      "contents": "UseFLACSoundDecoder()$1",
      "kind"    : "function",
      "trigger" : "UseFLACSoundDecoder"
    },
    {
      "details" : "Uncompress the current or the specified filename in the archive to the specified file",
      "contents": "UncompressPackFile(${1:#Pack})$2",
      "kind"    : "function",
      "trigger" : "UncompressPackFile"
    },
    {
      "details" : "Return the y position of the #Spline point",
      "contents": "SplinePointY(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "SplinePointY"
    },
    {
      "details" : "Set the height of the #Terrain tile at the specified position",
      "contents": "SetTerrainTileHeightAtPoint(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x}, ${5:y})$6",
      "kind"    : "function",
      "trigger" : "SetTerrainTileHeightAtPoint"
    },
    {
      "details" : "Return the z position of the #ParticleEmitter",
      "contents": "ParticleEmitterZ(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "ParticleEmitterZ"
    },
    {
      "details" : "Parse all the scripts founds in the declared path or archives",
      "contents": "Parse3DScripts()$1",
      "kind"    : "function",
      "trigger" : "Parse3DScripts"
    },
    {
      "details" : "Open and load a preference file",
      "contents": "OpenPreferences(${1:Filename.s})$2",
      "kind"    : "function",
      "trigger" : "OpenPreferences"
    },
    {
      "details" : "Return the pitch of the #Node",
      "contents": "NodePitch(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "NodePitch"
    },
    {
      "details" : "Load the specified module into memory",
      "contents": "LoadMusic(${1:#Music})$2",
      "kind"    : "function",
      "trigger" : "LoadMusic"
    },
    {
      "details" : "Return the z position of the #Light",
      "contents": "LightZ(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "LightZ"
    },
    {
      "details" : "Return the unique #Light ID",
      "contents": "LightID(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "LightID"
    },
    {
      "details" : "Get the \"z\" value of the last call",
      "contents": "GetZ()$1",
      "kind"    : "function",
      "trigger" : "GetZ"
    },
    {
      "details" : "Get the current playing #Sound position",
      "contents": "GetSoundPosition(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "GetSoundPosition"
    },
    {
      "details" : "Get the #Light color value",
      "contents": "GetLightColor(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "GetLightColor"
    },
    {
      "details" : "Returns the attributes of the specified file",
      "contents": "GetFileAttributes(${1:FileName.s})$2",
      "kind"    : "function",
      "trigger" : "GetFileAttributes"
    },
    {
      "details" : "Returns the data associated to the event",
      "contents": "EventData()$1",
      "kind"    : "function",
      "trigger" : "EventData"
    },
    {
      "details" : "Returns the systen setting for the double-click time in milliseconds",
      "contents": "DoubleClickTime()$1",
      "kind"    : "function",
      "trigger" : "DoubleClickTime"
    },
    {
      "details" : "Create a Date/Time selector Gadget",
      "contents": "DateGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "DateGadget"
    },
    {
      "details" : "Copy the source file to the destination",
      "contents": "CopyFile(${1:SourceFileName.s})$2",
      "kind"    : "function",
      "trigger" : "CopyFile"
    },
    {
      "details" : "Copy the source file to the destination",
      "contents": "CopyDirectory(${1:SourceDirectory.s}, ${2:DestinationDirectory.s})$3",
      "kind"    : "function",
      "trigger" : "CopyDirectory"
    },
    {
      "details" : "Returns 0 if *String1 equals *String2, -1 or 1 if *String1 is below or above than *String2",
      "contents": "CompareMemoryString(${1:*String1})$2",
      "kind"    : "function",
      "trigger" : "CompareMemoryString"
    },
    {
      "details" : "Close the current screen (Either windowed or full screen mode)",
      "contents": "CloseScreen()$1",
      "kind"    : "function",
      "trigger" : "CloseScreen"
    },
    {
      "details" : "Returns the result of blending Color1 on Color2 with alpha channel",
      "contents": "AlphaBlend(${1:Color1})$2",
      "kind"    : "function",
      "trigger" : "AlphaBlend"
    },
    {
      "details" : "Allocates a contiguous memory area according to the specified size and returns the buffer start",
      "contents": "AllocateMemory(${1:Size})$2",
      "kind"    : "function",
      "trigger" : "AllocateMemory"
    },
    {
      "details" : "Add a texture to the #Terrain",
      "contents": "AddTerrainTexture(${1:#Terrain}, ${2:Layer}, ${3:WorldSize}, ${4:DiffuseSpecular.s})$5",
      "kind"    : "function",
      "trigger" : "AddTerrainTexture"
    },
    {
      "details" : "Add a file attachment",
      "contents": "AddMailAttachment(${1:#Mail}, ${2:Description.s})$3",
      "kind"    : "function",
      "trigger" : "AddMailAttachment"
    },
    {
      "details" : "Write a word number to the specified file",
      "contents": "WriteWord(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteWord"
    },
    {
      "details" : "Change the #Terrain render mode",
      "contents": "TerrainRenderMode(${1:#Terrain})$2",
      "kind"    : "function",
      "trigger" : "TerrainRenderMode"
    },
    {
      "details" : "Make the window stay in front of all other windows",
      "contents": "StickyWindow(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "StickyWindow"
    },
    {
      "details" : "Set the specified \"Field\" to display a progressbar",
      "contents": "StatusBarProgress(${1:#StatusBar}, ${2:Field})$3",
      "kind"    : "function",
      "trigger" : "StatusBarProgress"
    },
    {
      "details" : "Return the x position of the #Spline point",
      "contents": "SplinePointX(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "SplinePointX"
    },
    {
      "details" : "Set the encoding used to export/save the XML tree",
      "contents": "SetXMLEncoding(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "SetXMLEncoding"
    },
    {
      "details" : "Change the #Gadget3D item text content",
      "contents": "SetGadgetItemText3D(${1:#Gadget3D}, ${2:Position})$3",
      "kind"    : "function",
      "trigger" : "SetGadgetItemText3D"
    },
    {
      "details" : "Change the #Gadget item text content",
      "contents": "SetGadgetItemText(${1:#Gadget}, ${2:Position})$3",
      "kind"    : "function",
      "trigger" : "SetGadgetItemText"
    },
    {
      "details" : "Remove a column to the specified #Gadget",
      "contents": "RemoveGadgetColumn(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "RemoveGadgetColumn"
    },
    {
      "details" : "Open a console window",
      "contents": "OpenConsole()$1",
      "kind"    : "function",
      "trigger" : "OpenConsole"
    },
    {
      "details" : "Continue execution at the given label if an error occurs",
      "contents": "OnErrorGoto(${1:?LabelAddress})$2",
      "kind"    : "function",
      "trigger" : "OnErrorGoto"
    },
    {
      "details" : "Returns the length (in frames) of the movie",
      "contents": "MovieLength(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "MovieLength"
    },
    {
      "details" : "Return the size of the specified memory block",
      "contents": "MemorySize(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "MemorySize"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsParticleEmitter(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "IsParticleEmitter"
    },
    {
      "details" : "Get the \"y\" value of the last call",
      "contents": "GetY()$1",
      "kind"    : "function",
      "trigger" : "GetY"
    },
    {
      "details" : "Retrieve the current menu item text",
      "contents": "GetMenuItemText(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "GetMenuItemText"
    },
    {
      "details" : "Return the type of format that was received from the Drag and Drop event",
      "contents": "EventDropType()$1",
      "kind"    : "function",
      "trigger" : "EventDropType"
    },
    {
      "details" : "Enable the #Entity bone manual control",
      "contents": "EnableManualEntityBoneControl(${1:#Entity}, ${2:Bone.s}, ${3:State})$4",
      "kind"    : "function",
      "trigger" : "EnableManualEntityBoneControl"
    },
    {
      "details" : "Returns the #Window associated with the dialog",
      "contents": "DialogWindow(${1:#Dialog})$2",
      "kind"    : "function",
      "trigger" : "DialogWindow"
    },
    {
      "details" : "Create a new render #Texture",
      "contents": "CreateRenderTexture(${1:#Texture}, ${2:CameraID}, ${3:Width})$4",
      "kind"    : "function",
      "trigger" : "CreateRenderTexture"
    },
    {
      "details" : "Create a new mutex synchronisation object",
      "contents": "CreateMutex()$1",
      "kind"    : "function",
      "trigger" : "CreateMutex"
    },
    {
      "details" : "Compares two memory areas and returns 1 if its equal or 0 if it doesn't match",
      "contents": "CompareMemory(${1:SourceMemory}, ${2:DestinationMemory})$3",
      "kind"    : "function",
      "trigger" : "CompareMemory"
    },
    {
      "details" : "Retrieve the z direction of the #Camera",
      "contents": "CameraDirectionZ(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraDirectionZ"
    },
    {
      "details" : "Change the gravity in the world",
      "contents": "WorldGravity(${1:Gravity})$2",
      "kind"    : "function",
      "trigger" : "WorldGravity"
    },
    {
      "details" : "Set the #Window bounds",
      "contents": "WindowBounds(${1:#Window}, ${2:MinimumWidth}, ${3:MinimumHeight}, ${4:MaximumWidth})$5",
      "kind"    : "function",
      "trigger" : "WindowBounds"
    },
    {
      "details" : "Return the vertex pose reference size of the specified #Mesh track",
      "contents": "VertexPoseReferenceCount(${1:#Mesh}, ${2:Animation.s}, ${3:Track})$4",
      "kind"    : "function",
      "trigger" : "VertexPoseReferenceCount"
    },
    {
      "details" : "Returns the width of the current vector output",
      "contents": "VectorOutputWidth()$1",
      "kind"    : "function",
      "trigger" : "VectorOutputWidth"
    },
    {
      "details" : "Update a new vertex pose reference to the #Mesh track",
      "contents": "UpdateVertexPoseReference(${1:#Mesh}, ${2:Animation.s}, ${3:Track}, ${4:Index}, ${5:PoseIndex})$6",
      "kind"    : "function",
      "trigger" : "UpdateVertexPoseReference"
    },
    {
      "details" : "Initialize the structure at the given *Address",
      "contents": "InitializeStructure(${1:*Address})$2",
      "kind"    : "function",
      "trigger" : "InitializeStructure"
    },
    {
      "details" : "Creates a Text gadget in the current GadgetList",
      "contents": "TextGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "TextGadget"
    },
    {
      "details" : "Return the #Terrain tile layer map size",
      "contents": "TerrainTileLayerMapSize(${1:#Terrain}, ${2:TileX})$3",
      "kind"    : "function",
      "trigger" : "TerrainTileLayerMapSize"
    },
    {
      "details" : "Returns the tangent of the specified angle, in radian",
      "contents": "Tan(${1:Angle})$2",
      "kind"    : "function",
      "trigger" : "Tan"
    },
    {
      "details" : "Create a Spin gadget in the current GadgetList",
      "contents": "SpinGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7",
      "kind"    : "function",
      "trigger" : "SpinGadget"
    },
    {
      "details" : "Sort the specified list according to the given options and range",
      "contents": "SortStructuredList(${1:List()}, ${2:Options}, ${3:Offset})$4",
      "kind"    : "function",
      "trigger" : "SortStructuredList"
    },
    {
      "details" : "Shows or hides the GUI",
      "contents": "ShowGUI(${1:Intensity})$2",
      "kind"    : "function",
      "trigger" : "ShowGUI"
    },
    {
      "details" : "Get the position of a matching named group within the current match",
      "contents": "RegularExpressionNamedGroupPosition(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "RegularExpressionNamedGroupPosition"
    },
    {
      "details" : "Converts the given angle from degree to radian",
      "contents": "Radian(${1:Angle})$2",
      "kind"    : "function",
      "trigger" : "Radian"
    },
    {
      "details" : "Get the next screen mode information",
      "contents": "NextScreenMode()$1",
      "kind"    : "function",
      "trigger" : "NextScreenMode"
    },
    {
      "details" : "Go to the next directory entry",
      "contents": "NextDirectoryEntry(${1:#Directory})$2",
      "kind"    : "function",
      "trigger" : "NextDirectoryEntry"
    },
    {
      "details" : "Retrieves information about the next database row",
      "contents": "NextDatabaseRow(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "NextDatabaseRow"
    },
    {
      "details" : "Get the \"x\" value of the last call",
      "contents": "GetX()$1",
      "kind"    : "function",
      "trigger" : "GetX"
    },
    {
      "details" : "Get the specified #Material color",
      "contents": "GetMaterialColor(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "GetMaterialColor"
    },
    {
      "details" : "Return the pitch of the #Entity",
      "contents": "EntityPitch(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityPitch"
    },
    {
      "details" : "Change the #Entity mesh with the new one",
      "contents": "EntityMesh(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityMesh"
    },
    {
      "details" : "Returns the number of bytes need for a full line",
      "contents": "DrawingBufferPitch()$1",
      "kind"    : "function",
      "trigger" : "DrawingBufferPitch"
    },
    {
      "details" : "Start a Drag and Drop operation with multiple clipboard formats",
      "contents": "DragOSFormats(${1:Formats()})$2",
      "kind"    : "function",
      "trigger" : "DragOSFormats"
    },
    {
      "details" : "Create and add an empty StatusBar to the specified WindowID",
      "contents": "CreateStatusBar(${1:#StatusBar})$2",
      "kind"    : "function",
      "trigger" : "CreateStatusBar"
    },
    {
      "details" : "Returns the number of textures layers the #Material contains",
      "contents": "CountMaterialLayers(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "CountMaterialLayers"
    },
    {
      "details" : "Terminates the current GadgetList creation and go back to the previous GadgetList",
      "contents": "CloseGadgetList()$1",
      "kind"    : "function",
      "trigger" : "CloseGadgetList"
    },
    {
      "details" : "Retrieve the y direction of the #Camera",
      "contents": "CameraDirectionY(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraDirectionY"
    },
    {
      "details" : "Returns the #BillboardGroup Z absolute position",
      "contents": "BillboardGroupZ(${1:#BillboardGroup})$2",
      "kind"    : "function",
      "trigger" : "BillboardGroupZ"
    },
    {
      "details" : "Change the #BillboardGroup material used by all the billboards",
      "contents": "BillboardGroupMaterial(${1:#BillboardGroup})$2",
      "kind"    : "function",
      "trigger" : "BillboardGroupMaterial"
    },
    {
      "details" : "Returns the name, system dependent, attached to the current CD-Audio drive",
      "contents": "AudioCDName()$1",
      "kind"    : "function",
      "trigger" : "AudioCDName"
    },
    {
      "details" : "Returns the ASCII value of the first character in the string",
      "contents": "Asc(${1:String})$2",
      "kind"    : "function",
      "trigger" : "Asc"
    },
    {
      "details" : "Returns the unescaped string",
      "contents": "UnescapeString(${1:String})$2",
      "kind"    : "function",
      "trigger" : "UnescapeString"
    },
    {
      "details" : "Transform the sprite to the new given dimensions",
      "contents": "TransformSprite(${1:#Sprite}, ${2:x1})$3",
      "kind"    : "function",
      "trigger" : "TransformSprite"
    },
    {
      "details" : "Open an existing file for read only operations",
      "contents": "ReadFile(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadFile"
    },
    {
      "details" : "Read one ascii character from the specified file",
      "contents": "ReadAsciiCharacter(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadAsciiCharacter"
    },
    {
      "details" : "Check if the given ray collide with an object",
      "contents": "RayCollide(${1:x}, ${2:y}, ${3:z}, ${4:DestinationX}, ${5:DestinationY})$6",
      "kind"    : "function",
      "trigger" : "RayCollide"
    },
    {
      "details" : "Write an unicode character (2 bytes) to the specified memory address",
      "contents": "PokeU(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeU"
    },
    {
      "details" : "Write a string (including the ending \"0\") to the specified memory address",
      "contents": "PokeS(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeS"
    },
    {
      "details" : "Load a whole world and initialize it",
      "contents": "LoadWorld(${1:FileName.s})$2",
      "kind"    : "function",
      "trigger" : "LoadWorld"
    },
    {
      "details" : "Returns the IP Address field value",
      "contents": "IPAddressField(${1:IPAddress})$2",
      "kind"    : "function",
      "trigger" : "IPAddressField"
    },
    {
      "details" : "Hides or show the specified #Window",
      "contents": "HideWindow(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "HideWindow"
    },
    {
      "details" : "Get the \"w\" value of the last call",
      "contents": "GetW()$1",
      "kind"    : "function",
      "trigger" : "GetW"
    },
    {
      "details" : "Get the z keyframe position for the #NodeAnimation",
      "contents": "GetNodeAnimationKeyFrameZ(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "GetNodeAnimationKeyFrameZ"
    },
    {
      "details" : "Free the specified #ParticleEmitter",
      "contents": "FreeParticleEmitter(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "FreeParticleEmitter"
    },
    {
      "details" : "Fill a memory area with the specified value",
      "contents": "FillMemory(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "FillMemory"
    },
    {
      "details" : "Delete the directory",
      "contents": "DeleteDirectory(${1:SourceDirectory.s})$2",
      "kind"    : "function",
      "trigger" : "DeleteDirectory"
    },
    {
      "details" : "Copy the *String to destination memory address or after the last one",
      "contents": "CopyMemoryString(${1:*String})$2",
      "kind"    : "function",
      "trigger" : "CopyMemoryString"
    },
    {
      "details" : "Copy the specified #Light on the #NewLight",
      "contents": "CopyLight(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "CopyLight"
    },
    {
      "details" : "Convert world position of the object into local coordinate",
      "contents": "ConvertWorldToLocalPosition(${1:ObjectID}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ConvertWorldToLocalPosition"
    },
    {
      "details" : "Retrieve the x direction of the #Camera",
      "contents": "CameraDirectionX(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraDirectionX"
    },
    {
      "details" : "Call a C function using its name",
      "contents": "CallCFunction(${1:#Library}, ${2:FunctionName.s})$3",
      "kind"    : "function",
      "trigger" : "CallCFunction"
    },
    {
      "details" : "Returns the #BillboardGroup Y absolute position",
      "contents": "BillboardGroupY(${1:#BillboardGroup})$2",
      "kind"    : "function",
      "trigger" : "BillboardGroupY"
    },
    {
      "details" : "Returns the mouse position relative to the left of the specified window",
      "contents": "WindowMouseX(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "WindowMouseX"
    },
    {
      "details" : "Add ZIP support to the packer commandset",
      "contents": "UseZipPacker()$1",
      "kind"    : "function",
      "trigger" : "UseZipPacker"
    },
    {
      "details" : "Copy the structure at the given *Address",
      "contents": "CopyStructure(${1:*Source}, ${2:*Destination})$3",
      "kind"    : "function",
      "trigger" : "CopyStructure"
    },
    {
      "details" : "Restore the vector drawing state to the saved state",
      "contents": "RestoreVectorState()$1",
      "kind"    : "function",
      "trigger" : "RestoreVectorState"
    },
    {
      "details" : "Move the #Billboard relatives to its previous location",
      "contents": "MoveBillboard(${1:#Billboard}, ${2:#BillboardGroup}, ${3:x}, ${4:y})$5",
      "kind"    : "function",
      "trigger" : "MoveBillboard"
    },
    {
      "details" : "Converts a numeric number into a string, in hexadecimal format",
      "contents": "Hex(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "Hex"
    },
    {
      "details" : "Create a new #Image2 with the selected area on the source #Image1",
      "contents": "GrabImage(${1:#Image1}, ${2:#Image2}, ${3:x}, ${4:y}, ${5:Width})$6",
      "kind"    : "function",
      "trigger" : "GrabImage"
    },
    {
      "details" : "Get the y keyframe position for the #NodeAnimation",
      "contents": "GetNodeAnimationKeyFrameY(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "GetNodeAnimationKeyFrameY"
    },
    {
      "details" : "Return the #Gadget3D item state",
      "contents": "GetGadgetItemState3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetItemState3D"
    },
    {
      "details" : "Return the #Gadget item state",
      "contents": "GetGadgetItemState(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetItemState"
    },
    {
      "details" : "Return the current directory",
      "contents": "GetFTPDirectory(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "GetFTPDirectory"
    },
    {
      "details" : "Returns the content of the specified column as a quad number",
      "contents": "GetDatabaseQuad(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "GetDatabaseQuad"
    },
    {
      "details" : "Returns the Port of the specified client",
      "contents": "GetClientPort(${1:Connection})$2",
      "kind"    : "function",
      "trigger" : "GetClientPort"
    },
    {
      "details" : "Return the type of the current entry in the last FTP listing",
      "contents": "FTPDirectoryEntryType(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "FTPDirectoryEntryType"
    },
    {
      "details" : "Return the raw line of the current entry in the last FTP listing",
      "contents": "FTPDirectoryEntryRaw(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "FTPDirectoryEntryRaw"
    },
    {
      "details" : "Free all the resources allocated by the #Cipher",
      "contents": "FinishCipher(${1:#Cipher})$2",
      "kind"    : "function",
      "trigger" : "FinishCipher"
    },
    {
      "details" : "Delete a directory on the FTP server",
      "contents": "DeleteFTPDirectory(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "DeleteFTPDirectory"
    },
    {
      "details" : "Close the currently opened preference file",
      "contents": "ClosePreferences()$1",
      "kind"    : "function",
      "trigger" : "ClosePreferences"
    },
    {
      "details" : "Returns the #BillboardGroup X absolute position",
      "contents": "BillboardGroupX(${1:#BillboardGroup})$2",
      "kind"    : "function",
      "trigger" : "BillboardGroupX"
    },
    {
      "details" : "Returns the arc sine of the specified number, in radian",
      "contents": "ASin(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "ASin"
    },
    {
      "details" : "Write a string to the CGI output",
      "contents": "WriteCGIString(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "WriteCGIString"
    },
    {
      "details" : "Write binary data to CGI output",
      "contents": "WriteCGIData(${1:*Buffer})$2",
      "kind"    : "function",
      "trigger" : "WriteCGIData"
    },
    {
      "details" : "Returns the mouse position relative to the top of the specified window",
      "contents": "WindowMouseY(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "WindowMouseY"
    },
    {
      "details" : "Set a circular gradient for vector drawing",
      "contents": "VectorSourceCircularGradient(${1:x.d}, ${2:y.d}, ${3:Radius.d})$4",
      "kind"    : "function",
      "trigger" : "VectorSourceCircularGradient"
    },
    {
      "details" : "Clear the structure at the given *Address",
      "contents": "ClearStructure(${1:*Address})$2",
      "kind"    : "function",
      "trigger" : "ClearStructure"
    },
    {
      "details" : "Stop the specified #NodeAnimation",
      "contents": "StopNodeAnimation(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "StopNodeAnimation"
    },
    {
      "details" : "Set the #NodeAnimation length",
      "contents": "SetNodeAnimationLength(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "SetNodeAnimationLength"
    },
    {
      "details" : "Set the #Entity animation weight",
      "contents": "SetEntityAnimationWeight(${1:#Entity}, ${2:Animation.s})$3",
      "kind"    : "function",
      "trigger" : "SetEntityAnimationWeight"
    },
    {
      "details" : "Set the current #Entity animation time",
      "contents": "SetEntityAnimationTime(${1:#Entity}, ${2:Animation.s})$3",
      "kind"    : "function",
      "trigger" : "SetEntityAnimationTime"
    },
    {
      "details" : "Set the #Entity animation length",
      "contents": "SetEntityAnimationLength(${1:#Entity}, ${2:Animation.s})$3",
      "kind"    : "function",
      "trigger" : "SetEntityAnimationLength"
    },
    {
      "details" : "Reset the vector drawing coordinate system to the default",
      "contents": "ResetCoordinates()$1",
      "kind"    : "function",
      "trigger" : "ResetCoordinates"
    },
    {
      "details" : "Get the length of a matching named group",
      "contents": "RegularExpressionNamedGroupLength(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "RegularExpressionNamedGroupLength"
    },
    {
      "details" : "Read a word (2 bytes) number from the specified memory address",
      "contents": "PeekW(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PeekW"
    },
    {
      "details" : "Tests whether the given point is inside the area of the current path",
      "contents": "IsInsidePath(${1:x.d})$2",
      "kind"    : "function",
      "trigger" : "IsInsidePath"
    },
    {
      "details" : "Get a string representation of the current decoded instruction",
      "contents": "InstructionString()$1",
      "kind"    : "function",
      "trigger" : "InstructionString"
    },
    {
      "details" : "Insert a string at the given position",
      "contents": "InsertString(${1:String.s}, ${2:StringToInsert.s})$3",
      "kind"    : "function",
      "trigger" : "InsertString"
    },
    {
      "details" : "Get the x keyframe position for the #NodeAnimation",
      "contents": "GetNodeAnimationKeyFrameX(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "GetNodeAnimationKeyFrameX"
    },
    {
      "details" : "Retrieves information about the first database row",
      "contents": "FirstDatabaseRow(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "FirstDatabaseRow"
    },
    {
      "details" : "Return the action that is to be taken with the dropped data",
      "contents": "EventDropAction()$1",
      "kind"    : "function",
      "trigger" : "EventDropAction"
    },
    {
      "details" : "Change the linear velocity of the #Entity",
      "contents": "EntityVelocity(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "EntityVelocity"
    },
    {
      "details" : "Return the z position of the bone, relative to the #Entity",
      "contents": "EntityBoneZ(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityBoneZ"
    },
    {
      "details" : "Get the state of the 3D engine",
      "contents": "Engine3DStatus(${1:Type})$2",
      "kind"    : "function",
      "trigger" : "Engine3DStatus"
    },
    {
      "details" : "Display the given string on the current output",
      "contents": "DrawText(${1:x}, ${2:y})$3",
      "kind"    : "function",
      "trigger" : "DrawText"
    },
    {
      "details" : "Returns the pixel format of the current drawing buffer",
      "contents": "DrawingBufferPixelFormat()$1",
      "kind"    : "function",
      "trigger" : "DrawingBufferPixelFormat"
    },
    {
      "details" : "Get a number from the cryptographic random number generator",
      "contents": "CryptRandom(${1:Maximum})$2",
      "kind"    : "function",
      "trigger" : "CryptRandom"
    },
    {
      "details" : "Create a water plane at the given position",
      "contents": "CreateWater(${1:#Camera}, ${2:x}, ${3:y}, ${4:z}, ${5:Transparency})$6",
      "kind"    : "function",
      "trigger" : "CreateWater"
    },
    {
      "details" : "Create a new semaphore synchronisation object",
      "contents": "CreateSemaphore()$1",
      "kind"    : "function",
      "trigger" : "CreateSemaphore"
    },
    {
      "details" : "Create an empty #Image which can be used to do rendering on it",
      "contents": "CreateImage(${1:#Image}, ${2:Width})$3",
      "kind"    : "function",
      "trigger" : "CreateImage"
    },
    {
      "details" : "Copy the XML node to a new location (or different XML tree)",
      "contents": "CopyXMLNode(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "CopyXMLNode"
    },
    {
      "details" : "Compress the content of the *Buffer into *Output",
      "contents": "CompressMemory(${1:*Buffer}, ${2:Size}, ${3:*Output})$4",
      "kind"    : "function",
      "trigger" : "CompressMemory"
    },
    {
      "details" : "Close the current console",
      "contents": "CloseConsole()$1",
      "kind"    : "function",
      "trigger" : "CloseConsole"
    },
    {
      "details" : "Restrict drawing output to a clipping rectangle",
      "contents": "ClipOutput(${1:x}, ${2:y}, ${3:Width})$4",
      "kind"    : "function",
      "trigger" : "ClipOutput"
    },
    {
      "details" : "Apply a force to the  #Entity",
      "contents": "ApplyEntityImpulse(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ApplyEntityImpulse"
    },
    {
      "details" : "Update the whole #Terrain",
      "contents": "UpdateTerrain(${1:#Terrain})$2",
      "kind"    : "function",
      "trigger" : "UpdateTerrain"
    },
    {
      "details" : "Creates a String gadget in the current GadgetList",
      "contents": "StringGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "StringGadget3D"
    },
    {
      "details" : "Creates a String gadget in the current GadgetList",
      "contents": "StringGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "StringGadget"
    },
    {
      "details" : "Set a string as a bind variable for the next DatabaseQuery() or DatabaseUpdate()",
      "contents": "SetDatabaseString(${1:#Database}, ${2:StatementIndex})$3",
      "kind"    : "function",
      "trigger" : "SetDatabaseString"
    },
    {
      "details" : "Change the particles color fader rate",
      "contents": "ParticleColorFader(${1:#ParticleEmitter}, ${2:RedRate}, ${3:GreenRate})$4",
      "kind"    : "function",
      "trigger" : "ParticleColorFader"
    },
    {
      "details" : "Return the z position of the #Node",
      "contents": "NodeZ(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "NodeZ"
    },
    {
      "details" : "Move the #Light",
      "contents": "MoveLight(${1:#Light}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "MoveLight"
    },
    {
      "details" : "Returns the first #Entity at the given position",
      "contents": "MousePick(${1:#Camera}, ${2:x})$3",
      "kind"    : "function",
      "trigger" : "MousePick"
    },
    {
      "details" : "Return the pitch of the #Light",
      "contents": "LightPitch(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "LightPitch"
    },
    {
      "details" : "Check if the thread exists",
      "contents": "IsThread(${1:Thread})$2",
      "kind"    : "function",
      "trigger" : "IsThread"
    },
    {
      "details" : "Return the runtime string item value",
      "contents": "GetRuntimeString(${1:Name})$2",
      "kind"    : "function",
      "trigger" : "GetRuntimeString"
    },
    {
      "details" : "Return the runtime double item value",
      "contents": "GetRuntimeDouble(${1:Name})$2",
      "kind"    : "function",
      "trigger" : "GetRuntimeDouble"
    },
    {
      "details" : "Free all joints associated with the #Entity",
      "contents": "FreeEntityJoints(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "FreeEntityJoints"
    },
    {
      "details" : "Fill a shape with the specified color",
      "contents": "FillArea(${1:x}, ${2:y})$3",
      "kind"    : "function",
      "trigger" : "FillArea"
    },
    {
      "details" : "Return the y position of the bone, relative to the #Entity",
      "contents": "EntityBoneY(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityBoneY"
    },
    {
      "details" : "Check if the filename is valid",
      "contents": "CheckFilename(${1:Filename.s})$2",
      "kind"    : "function",
      "trigger" : "CheckFilename"
    },
    {
      "details" : "Retrieve the pitch of the #Camera",
      "contents": "CameraPitch(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraPitch"
    },
    {
      "details" : "Changes the #Camera background color",
      "contents": "CameraBackColor(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraBackColor"
    },
    {
      "details" : "Get the status (or error code) of the XML parsing",
      "contents": "XMLStatus(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "XMLStatus"
    },
    {
      "details" : "Write the keyword and its associated double value",
      "contents": "WritePreferenceDouble(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "WritePreferenceDouble"
    },
    {
      "details" : "Set an image as the vector drawing source",
      "contents": "VectorSourceImage(${1:ImageID})$2",
      "kind"    : "function",
      "trigger" : "VectorSourceImage"
    },
    {
      "details" : "Enables the OGG support for CatchSound(), LoadSound()",
      "contents": "UseOGGSoundDecoder()$1",
      "kind"    : "function",
      "trigger" : "UseOGGSoundDecoder"
    },
    {
      "details" : "Creates a Text gadget in the current GadgetList",
      "contents": "TextGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "TextGadget3D"
    },
    {
      "details" : "Change the current drawing output to the specified output",
      "contents": "StartDrawing(${1:Output})$2",
      "kind"    : "function",
      "trigger" : "StartDrawing"
    },
    {
      "details" : "Create a Spin gadget in the current GadgetList",
      "contents": "SpinGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7",
      "kind"    : "function",
      "trigger" : "SpinGadget3D"
    },
    {
      "details" : "Changes the current #Window3D title",
      "contents": "SetWindowTitle3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "SetWindowTitle3D"
    },
    {
      "details" : "Changes the current #Window title",
      "contents": "SetWindowTitle(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "SetWindowTitle"
    },
    {
      "details" : "Resize the specified window to the given dimensions",
      "contents": "ResizeWindow3D(${1:#Window3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ResizeWindow3D"
    },
    {
      "details" : "Resize the specified window to the given dimensions",
      "contents": "ResizeWindow(${1:#Window}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ResizeWindow"
    },
    {
      "details" : "Resize the #Image to the given dimension",
      "contents": "ResizeImage(${1:#Image}, ${2:Width})$3",
      "kind"    : "function",
      "trigger" : "ResizeImage"
    },
    {
      "details" : "Resize the specified #Gadget3D at the given position and dimension",
      "contents": "ResizeGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ResizeGadget3D"
    },
    {
      "details" : "Resize the specified #Gadget at the given position and dimension",
      "contents": "ResizeGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ResizeGadget"
    },
    {
      "details" : "Resize the #Camera. All the dimensions are in percents",
      "contents": "ResizeCamera(${1:#Camera}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ResizeCamera"
    },
    {
      "details" : "Remove a recipient to the specified #Mail",
      "contents": "RemoveMailRecipient(${1:#Mail})$2",
      "kind"    : "function",
      "trigger" : "RemoveMailRecipient"
    },
    {
      "details" : "Read a long (4 bytes) from the specified file",
      "contents": "ReadLong(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadLong"
    },
    {
      "details" : "Create an OpenGL gadget in the current GadgetList",
      "contents": "OpenGLGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "OpenGLGadget"
    },
    {
      "details" : "Return the y position of the #Node",
      "contents": "NodeY(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "NodeY"
    },
    {
      "details" : "Returns the Log of the value",
      "contents": "Log(${1:Value})$2",
      "kind"    : "function",
      "trigger" : "Log"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsMusic(${1:#Music})$2",
      "kind"    : "function",
      "trigger" : "IsMusic"
    },
    {
      "details" : "Returns the integer part of the specified value",
      "contents": "Int(${1:Float})$2",
      "kind"    : "function",
      "trigger" : "Int"
    },
    {
      "details" : "Returns the currently active window. (The one with the focus)",
      "contents": "GetActiveWindow3D()$1",
      "kind"    : "function",
      "trigger" : "GetActiveWindow3D"
    },
    {
      "details" : "Free the data allocated with ExamineFTPDirectory",
      "contents": "FinishFTPDirectory(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "FinishFTPDirectory"
    },
    {
      "details" : "Return the x position of the bone, relative to the #Entity",
      "contents": "EntityBoneX(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityBoneX"
    },
    {
      "details" : "Extract an XML node into the specified Map()",
      "contents": "ExtractXMLMap(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "ExtractXMLMap"
    },
    {
      "details" : "Create a new directory",
      "contents": "CreateDirectory(${1:DirectoryName.s})$2",
      "kind"    : "function",
      "trigger" : "CreateDirectory"
    },
    {
      "details" : "Close the current vector drawing path by connecting start & end with a straight line",
      "contents": "ClosePath()$1",
      "kind"    : "function",
      "trigger" : "ClosePath"
    },
    {
      "details" : "Shutdown the specified server",
      "contents": "CloseNetworkServer(${1:#Server})$2",
      "kind"    : "function",
      "trigger" : "CloseNetworkServer"
    },
    {
      "details" : "Get the nth child of the given XML node (default is the 1st child)",
      "contents": "ChildXMLNode(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "ChildXMLNode"
    },
    {
      "details" : "Unbind an event callback",
      "contents": "UnbindEvent(${1:Event})$2",
      "kind"    : "function",
      "trigger" : "UnbindEvent"
    },
    {
      "details" : "Returns the #Billboard height, in world metric",
      "contents": "BillboardHeight(${1:#Billboard})$2",
      "kind"    : "function",
      "trigger" : "BillboardHeight"
    },
    {
      "details" : "Returns the full length of an CD-Audio in seconds",
      "contents": "AudioCDLength()$1",
      "kind"    : "function",
      "trigger" : "AudioCDLength"
    },
    {
      "details" : "Write a double number to the specified file",
      "contents": "WriteDouble(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteDouble"
    },
    {
      "details" : "Returns the hyperbolic tangent of the specified angle",
      "contents": "TanH(${1:Angle})$2",
      "kind"    : "function",
      "trigger" : "TanH"
    },
    {
      "details" : "Must be called after a StartDrawing(), when all graphics operations are finished",
      "contents": "StopDrawing()$1",
      "kind"    : "function",
      "trigger" : "StopDrawing"
    },
    {
      "details" : "Resize the #ParticleEmitter",
      "contents": "ResizeParticleEmitter(${1:#ParticleEmitter}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ResizeParticleEmitter"
    },
    {
      "details" : "Return the printer drawing area for vector drawing output",
      "contents": "PrinterVectorOutput()$1",
      "kind"    : "function",
      "trigger" : "PrinterVectorOutput"
    },
    {
      "details" : "Return the x position of the #Node",
      "contents": "NodeX(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "NodeX"
    },
    {
      "details" : "If the return is 0, then the screen is no more active, else the screen is active",
      "contents": "IsScreenActive()$1",
      "kind"    : "function",
      "trigger" : "IsScreenActive"
    },
    {
      "details" : "Hides or show the specified #Window3D",
      "contents": "HideWindow3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "HideWindow3D"
    },
    {
      "details" : "Hide or display the specified menu",
      "contents": "HideMenu(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "HideMenu"
    },
    {
      "details" : "Hide or show a gadget",
      "contents": "HideGadget3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "HideGadget3D"
    },
    {
      "details" : "Hide or show a gadget",
      "contents": "HideGadget(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "HideGadget"
    },
    {
      "details" : "Associate the specified Text$ to the #Gadget3D",
      "contents": "GadgetToolTip3D(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GadgetToolTip3D"
    },
    {
      "details" : "Open the standard requester to choose a font",
      "contents": "FontRequester(${1:FontName.s}, ${2:FontSize})$3",
      "kind"    : "function",
      "trigger" : "FontRequester"
    },
    {
      "details" : "Return the z position of the #Entity",
      "contents": "EntityZ(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityZ"
    },
    {
      "details" : "Enable the Window as a Drag and Drop target for the given Format",
      "contents": "EnableWindowDrop(${1:#Window}, ${2:Format})$3",
      "kind"    : "function",
      "trigger" : "EnableWindowDrop"
    },
    {
      "details" : "Enable the Gadget as a Drag and Drop target for the given Format",
      "contents": "EnableGadgetDrop(${1:#Gadget}, ${2:Format})$3",
      "kind"    : "function",
      "trigger" : "EnableGadgetDrop"
    },
    {
      "details" : "Returns the height (in pixels) of the specified desktop",
      "contents": "DesktopHeight(${1:#Desktop})$2",
      "kind"    : "function",
      "trigger" : "DesktopHeight"
    },
    {
      "details" : "Returns the name of the specified column",
      "contents": "DatabaseColumnName(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "DatabaseColumnName"
    },
    {
      "details" : "Create a new empty XML tree",
      "contents": "CreateXML(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "CreateXML"
    },
    {
      "details" : "Copy the specified #Texture on the #NewTexture",
      "contents": "CopyTexture(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "CopyTexture"
    },
    {
      "details" : "Retrieve the width of the #Camera view, in pixels",
      "contents": "CameraViewWidth(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraViewWidth"
    },
    {
      "details" : "Add a box to the vector drawing path",
      "contents": "AddPathBox(${1:x.d}, ${2:y.d}, ${3:Width.d})$4",
      "kind"    : "function",
      "trigger" : "AddPathBox"
    },
    {
      "details" : "Check if an event has occured on any of the opened windows",
      "contents": "WindowEvent3D()$1",
      "kind"    : "function",
      "trigger" : "WindowEvent3D"
    },
    {
      "details" : "Get the Y position of the water at the given coordinates",
      "contents": "WaterHeight(${1:#Camera}, ${2:x})$3",
      "kind"    : "function",
      "trigger" : "WaterHeight"
    },
    {
      "details" : "Wait for FastCGI request to process",
      "contents": "WaitFastCGIRequest()$1",
      "kind"    : "function",
      "trigger" : "WaitFastCGIRequest"
    },
    {
      "details" : "Stop the specified sound (if it was playing)",
      "contents": "StopSound3D(${1:#Sound3D})$2",
      "kind"    : "function",
      "trigger" : "StopSound3D"
    },
    {
      "details" : "Return the printer drawing area, to be used with the 2DDrawing commands",
      "contents": "PrinterOutput()$1",
      "kind"    : "function",
      "trigger" : "PrinterOutput"
    },
    {
      "details" : "Returns the special \"Not a Number\" value",
      "contents": "NaN()$1",
      "kind"    : "function",
      "trigger" : "NaN"
    },
    {
      "details" : "Return the value for the specified IP",
      "contents": "MakeIPAddress(${1:Field0}, ${2:Field1}, ${3:Field2})$4",
      "kind"    : "function",
      "trigger" : "MakeIPAddress"
    },
    {
      "details" : "Returns nonzero if the given Number represents positive or negative infinity",
      "contents": "IsInfinity(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "IsInfinity"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsFingerprint(${1:#Fingerprint})$2",
      "kind"    : "function",
      "trigger" : "IsFingerprint"
    },
    {
      "details" : "Create a new #Image with the content of the given drawing output area",
      "contents": "GrabDrawingImage(${1:#Image}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "GrabDrawingImage"
    },
    {
      "details" : "Returns the mail body",
      "contents": "GetMailBody(${1:#Mail})$2",
      "kind"    : "function",
      "trigger" : "GetMailBody"
    },
    {
      "details" : "Stop and remove the specified module previously loaded with the LoadMusic() command from memory",
      "contents": "FreeMusic(${1:#Music})$2",
      "kind"    : "function",
      "trigger" : "FreeMusic"
    },
    {
      "details" : "Return the y position of the #Entity",
      "contents": "EntityY(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityY"
    },
    {
      "details" : "Test if the entities are colliding",
      "contents": "EntityCollide(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityCollide"
    },
    {
      "details" : "Eject (open) or close the current CD-Drive",
      "contents": "EjectAudioCD(${1:State})$2",
      "kind"    : "function",
      "trigger" : "EjectAudioCD"
    },
    {
      "details" : "Create an Editor gadget in the current GadgetList",
      "contents": "EditorGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "EditorGadget3D"
    },
    {
      "details" : "Create an Editor gadget in the current GadgetList",
      "contents": "EditorGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "EditorGadget"
    },
    {
      "details" : "Disable the #Entity body, so the physics are ignored",
      "contents": "DisableEntityBody(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "DisableEntityBody"
    },
    {
      "details" : "Detach the ribbon #Effect from the node",
      "contents": "DetachRibbonEffect(${1:#Effect})$2",
      "kind"    : "function",
      "trigger" : "DetachRibbonEffect"
    },
    {
      "details" : "Create an empty toolbar identified by the number \"#ToolBar\"",
      "contents": "CreateToolBar(${1:#ToolBar}, ${2:WindowID})$3",
      "kind"    : "function",
      "trigger" : "CreateToolBar"
    },
    {
      "details" : "Returns the height of the specified #ToolBar",
      "contents": "ToolBarHeight(${1:#ToolBar})$2",
      "kind"    : "function",
      "trigger" : "ToolBarHeight"
    },
    {
      "details" : "Returns the height in pixel of the #Texture",
      "contents": "TextureHeight(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "TextureHeight"
    },
    {
      "details" : "Returns the length of the #Sound",
      "contents": "SoundLength(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "SoundLength"
    },
    {
      "details" : "Change the runtime item value",
      "contents": "SetRuntimeInteger(${1:Name})$2",
      "kind"    : "function",
      "trigger" : "SetRuntimeInteger"
    },
    {
      "details" : "Get the screen width",
      "contents": "ScreenWidth()$1",
      "kind"    : "function",
      "trigger" : "ScreenWidth"
    },
    {
      "details" : "Rotate the #Entity bone",
      "contents": "RotateEntityBone(${1:#Entity}, ${2:Bone.s}, ${3:x}, ${4:y}, ${5:z})$6",
      "kind"    : "function",
      "trigger" : "RotateEntityBone"
    },
    {
      "details" : "Returns the 32 bits color corresponding to the given RGBA parameters",
      "contents": "RGBA(${1:Red}, ${2:Green}, ${3:Blue})$4",
      "kind"    : "function",
      "trigger" : "RGBA"
    },
    {
      "details" : "Display the Text$ in the console",
      "contents": "Print(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "Print"
    },
    {
      "details" : "Creates a dialog from an XML object",
      "contents": "OpenXMLDialog(${1:#Dialog}, ${2:#Xml})$3",
      "kind"    : "function",
      "trigger" : "OpenXMLDialog"
    },
    {
      "details" : "Returns the height, in pixel, of the specified #Image",
      "contents": "ImageHeight(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "ImageHeight"
    },
    {
      "details" : "Free the IPv6",
      "contents": "FreeIP(${1:IP})$2",
      "kind"    : "function",
      "trigger" : "FreeIP"
    },
    {
      "details" : "Start disassembling code at the given address",
      "contents": "ExamineAssembly(${1:*Address})$2",
      "kind"    : "function",
      "trigger" : "ExamineAssembly"
    },
    {
      "details" : "Return the type that was specified when starting a private Drag and Drop operation",
      "contents": "EventDropPrivate()$1",
      "kind"    : "function",
      "trigger" : "EventDropPrivate"
    },
    {
      "details" : "Return the x position of the #Entity",
      "contents": "EntityX(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityX"
    },
    {
      "details" : "Change the entity blend mode",
      "contents": "EntityAnimationBlendMode(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityAnimationBlendMode"
    },
    {
      "details" : "Enable or disable the graphical console",
      "contents": "EnableGraphicalConsole(${1:State})$2",
      "kind"    : "function",
      "trigger" : "EnableGraphicalConsole"
    },
    {
      "details" : "Return the name of the current entry in the directory",
      "contents": "DirectoryEntryName(${1:#Directory})$2",
      "kind"    : "function",
      "trigger" : "DirectoryEntryName"
    },
    {
      "details" : "Create a new blank #Texture",
      "contents": "CreateTexture(${1:#Texture}, ${2:Width}, ${3:Height})$4",
      "kind"    : "function",
      "trigger" : "CreateTexture"
    },
    {
      "details" : "Count all the items of the specified #Gadget3D",
      "contents": "CountGadgetItems3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "CountGadgetItems3D"
    },
    {
      "details" : "Count all the items of the specified #Gadget",
      "contents": "CountGadgetItems(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "CountGadgetItems"
    },
    {
      "details" : "Copy the #Sprite1 to #Sprite2",
      "contents": "CopySprite(${1:#Sprite1})$2",
      "kind"    : "function",
      "trigger" : "CopySprite"
    },
    {
      "details" : "Call a function using its name",
      "contents": "CallFunction(${1:#Library}, ${2:FunctionName.s})$3",
      "kind"    : "function",
      "trigger" : "CallFunction"
    },
    {
      "details" : "Apply a rotation force to the  #Entity",
      "contents": "ApplyEntityTorque(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ApplyEntityTorque"
    },
    {
      "details" : "Add a new vertex pose reference to the #Mesh track",
      "contents": "AddVertexPoseReference(${1:#Mesh}, ${2:Animation.s}, ${3:Track}, ${4:Index}, ${5:PoseIndex})$6",
      "kind"    : "function",
      "trigger" : "AddVertexPoseReference"
    },
    {
      "details" : "Get the input line where a parsing error occured",
      "contents": "XMLErrorLine(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "XMLErrorLine"
    },
    {
      "details" : "Write the content of the specified memory buffer to the specified file",
      "contents": "WriteData(${1:#File}, ${2:*MemoryBuffer})$3",
      "kind"    : "function",
      "trigger" : "WriteData"
    },
    {
      "details" : "Returns the RGB color of the font chosen by the user with the FontRequester() command",
      "contents": "SelectedFontColor()$1",
      "kind"    : "function",
      "trigger" : "SelectedFontColor"
    },
    {
      "details" : "Scroll the #Material texture",
      "contents": "ScrollMaterial(${1:#Material}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ScrollMaterial"
    },
    {
      "details" : "Create Scintilla Gadget",
      "contents": "ScintillaGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "ScintillaGadget"
    },
    {
      "details" : "Get the content of a matching named group",
      "contents": "RegularExpressionNamedGroup(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "RegularExpressionNamedGroup"
    },
    {
      "details" : "Receive a raw data from the specified client",
      "contents": "ReceiveNetworkData(${1:ClientID}, ${2:*DataBuffer})$3",
      "kind"    : "function",
      "trigger" : "ReceiveNetworkData"
    },
    {
      "details" : "Returns the last pick Z position",
      "contents": "PickZ()$1",
      "kind"    : "function",
      "trigger" : "PickZ"
    },
    {
      "details" : "Get the value of the given attribute of the XML node",
      "contents": "GetXMLAttribute(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "GetXMLAttribute"
    },
    {
      "details" : "Get the #Entity animation length",
      "contents": "GetEntityAnimationLength(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "GetEntityAnimationLength"
    },
    {
      "details" : "Returns the type of the specified #Gadget3D",
      "contents": "GadgetType3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GadgetType3D"
    },
    {
      "details" : "Returns the type of the specified #Gadget",
      "contents": "GadgetType(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GadgetType"
    },
    {
      "details" : "Set the default color for graphic functions and text display",
      "contents": "FrontColor(${1:Color})$2",
      "kind"    : "function",
      "trigger" : "FrontColor"
    },
    {
      "details" : "Finish the current FastCGI request",
      "contents": "FinishFastCGIRequest()$1",
      "kind"    : "function",
      "trigger" : "FinishFastCGIRequest"
    },
    {
      "details" : "Fill the area defined by the vector drawing path",
      "contents": "FillPath()$1",
      "kind"    : "function",
      "trigger" : "FillPath"
    },
    {
      "details" : "Returns the frequency (in Hz) of the specified desktop",
      "contents": "DesktopFrequency(${1:#Desktop})$2",
      "kind"    : "function",
      "trigger" : "DesktopFrequency"
    },
    {
      "details" : "Use the default printer to print",
      "contents": "DefaultPrinter()$1",
      "kind"    : "function",
      "trigger" : "DefaultPrinter"
    },
    {
      "details" : "Fill a buffer with data from the cryptographic random number generator",
      "contents": "CryptRandomData(${1:*Buffer})$2",
      "kind"    : "function",
      "trigger" : "CryptRandomData"
    },
    {
      "details" : "Add a clip zone to the specified sprite",
      "contents": "ClipSprite(${1:#Sprite}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "ClipSprite"
    },
    {
      "details" : "Changes the #Camera Field Of View (FOV)",
      "contents": "CameraFOV(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraFOV"
    },
    {
      "details" : "Apply a rotation force to the #Entity",
      "contents": "ApplyEntityTorqueImpulse(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ApplyEntityTorqueImpulse"
    },
    {
      "details" : "Add ODBC support to the database commandset",
      "contents": "UseODBCDatabase()$1",
      "kind"    : "function",
      "trigger" : "UseODBCDatabase"
    },
    {
      "details" : "Perform a mouse picking on the #Terrain",
      "contents": "TerrainMousePick(${1:#Terrain}, ${2:CameraID}, ${3:x})$4",
      "kind"    : "function",
      "trigger" : "TerrainMousePick"
    },
    {
      "details" : "Returns the last pick Y position",
      "contents": "PickY()$1",
      "kind"    : "function",
      "trigger" : "PickY"
    },
    {
      "details" : "Opens a new window according to the specified parameters",
      "contents": "OpenWindow3D(${1:#Window3D}, ${2:x}, ${3:y}, ${4:width}, ${5:height})$6",
      "kind"    : "function",
      "trigger" : "OpenWindow3D"
    },
    {
      "details" : "Uninstall any error handler so the default OS action is taken on further errors",
      "contents": "OnErrorDefault()$1",
      "kind"    : "function",
      "trigger" : "OnErrorDefault"
    },
    {
      "details" : "Calculate the length of a memory string",
      "contents": "MemoryStringLength(${1:*String})$2",
      "kind"    : "function",
      "trigger" : "MemoryStringLength"
    },
    {
      "details" : "Get the number of characters of text between this node and the previous one in the tree",
      "contents": "GetXMLNodeOffset(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "GetXMLNodeOffset"
    },
    {
      "details" : "Get the z keyframe roll for the #NodeAnimation",
      "contents": "GetNodeAnimationKeyFrameRoll(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "GetNodeAnimationKeyFrameRoll"
    },
    {
      "details" : "Retrieves information about user's desktops and returns the number of desktops",
      "contents": "ExamineDesktops()$1",
      "kind"    : "function",
      "trigger" : "ExamineDesktops"
    },
    {
      "details" : "Returns a string message for the current error or the given error number",
      "contents": "ErrorMessage()$1",
      "kind"    : "function",
      "trigger" : "ErrorMessage"
    },
    {
      "details" : "Start a Drag and Drop operation within the current program only with the given private type",
      "contents": "DragPrivate(${1:Type})$2",
      "kind"    : "function",
      "trigger" : "DragPrivate"
    },
    {
      "details" : "Creates a new empty menu with images support",
      "contents": "CreateImageMenu(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "CreateImageMenu"
    },
    {
      "details" : "Clear all the items of the specified #Gadget3D",
      "contents": "ClearGadgetItems3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "ClearGadgetItems3D"
    },
    {
      "details" : "Clear all the items of the specified #Gadget",
      "contents": "ClearGadgetItems(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "ClearGadgetItems"
    },
    {
      "details" : "Retrieve the z position of the #Camera",
      "contents": "CameraZ(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraZ"
    },
    {
      "details" : "Change the #Camera projection mode",
      "contents": "CameraProjectionMode(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraProjectionMode"
    },
    {
      "details" : "Return the x position of the #Text3D",
      "contents": "Text3DX(${1:#Text3D})$2",
      "kind"    : "function",
      "trigger" : "Text3DX"
    },
    {
      "details" : "Finish the print session and send all the data to the printer",
      "contents": "StopPrinting()$1",
      "kind"    : "function",
      "trigger" : "StopPrinting"
    },
    {
      "details" : "Sort the specified list according to the given options and range",
      "contents": "SortList(${1:List()})$2",
      "kind"    : "function",
      "trigger" : "SortList"
    },
    {
      "details" : "Open the debug output window",
      "contents": "ShowDebugOutput()$1",
      "kind"    : "function",
      "trigger" : "ShowDebugOutput"
    },
    {
      "details" : "Get the screen depth",
      "contents": "ScreenDepth()$1",
      "kind"    : "function",
      "trigger" : "ScreenDepth"
    },
    {
      "details" : "Rotate the vector drawing coordinate system",
      "contents": "RotateCoordinates(${1:x.d}, ${2:y.d})$3",
      "kind"    : "function",
      "trigger" : "RotateCoordinates"
    },
    {
      "details" : "Resume the play of the specified sound (if it was paused)",
      "contents": "ResumeSound(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "ResumeSound"
    },
    {
      "details" : "Return the last rawkey, after the last Inkey() call",
      "contents": "RawKey()$1",
      "kind"    : "function",
      "trigger" : "RawKey"
    },
    {
      "details" : "Draw a plot at the given coordinates in the current output",
      "contents": "Plot(${1:x})$2",
      "kind"    : "function",
      "trigger" : "Plot"
    },
    {
      "details" : "Returns the last pick X position",
      "contents": "PickX()$1",
      "kind"    : "function",
      "trigger" : "PickX"
    },
    {
      "details" : "Control the audio stream of the movie",
      "contents": "MovieAudio(${1:#Movie}, ${2:Volume})$3",
      "kind"    : "function",
      "trigger" : "MovieAudio"
    },
    {
      "details" : "Open a blocking requester to display some information",
      "contents": "MessageRequester(${1:Title.s})$2",
      "kind"    : "function",
      "trigger" : "MessageRequester"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsFTP(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "IsFTP"
    },
    {
      "details" : "Checks if a function exists in the #Library",
      "contents": "GetFunction(${1:#Library})$2",
      "kind"    : "function",
      "trigger" : "GetFunction"
    },
    {
      "details" : "Returns which gadget has been pushed (return the #Gadget3D number)",
      "contents": "EventGadget3D()$1",
      "kind"    : "function",
      "trigger" : "EventGadget3D"
    },
    {
      "details" : "Set a custom parameter to the #Entity shader script",
      "contents": "EntityCustomParameter(${1:#Entity}, ${2:SubEntityIndex}, ${3:ParameterIndex}, ${4:Value1}, ${5:Value2}, ${6:Value3})$7",
      "kind"    : "function",
      "trigger" : "EntityCustomParameter"
    },
    {
      "details" : "Return the specified #Entity animation status",
      "contents": "EntityAnimationStatus(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityAnimationStatus"
    },
    {
      "details" : "Converts the given angle from radian to degree",
      "contents": "Degree(${1:Angle})$2",
      "kind"    : "function",
      "trigger" : "Degree"
    },
    {
      "details" : "Create a new empty #Spline",
      "contents": "CreateSpline(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "CreateSpline"
    },
    {
      "details" : "Creates a new dialog",
      "contents": "CreateDialog(${1:#Dialog})$2",
      "kind"    : "function",
      "trigger" : "CreateDialog"
    },
    {
      "details" : "Create a new cube map #Texture",
      "contents": "CreateCubeMapTexture(${1:#Texture}, ${2:Width}, ${3:Height})$4",
      "kind"    : "function",
      "trigger" : "CreateCubeMapTexture"
    },
    {
      "details" : "Returns the unique system identifier of the connection",
      "contents": "ConnectionID(${1:Connection})$2",
      "kind"    : "function",
      "trigger" : "ConnectionID"
    },
    {
      "details" : "Check if the FTP server is still responding",
      "contents": "CheckFTPConnection(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "CheckFTPConnection"
    },
    {
      "details" : "Returns the OutputID of the specified #Gadget to perform vector drawing on it",
      "contents": "CanvasVectorOutput(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "CanvasVectorOutput"
    },
    {
      "details" : "Retrieve the y position of the #Camera",
      "contents": "CameraY(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraY"
    },
    {
      "details" : "Change the #Camera range",
      "contents": "CameraRange(${1:#Camera}, ${2:Near})$3",
      "kind"    : "function",
      "trigger" : "CameraRange"
    },
    {
      "details" : "Add an item to a gadget (ListView, ComboBox etc...)",
      "contents": "AddGadgetItem3D(${1:#Gadget3D}, ${2:Position})$3",
      "kind"    : "function",
      "trigger" : "AddGadgetItem3D"
    },
    {
      "details" : "Add a new buffer to the fingerprint calculation",
      "contents": "AddFingerprintBuffer(${1:#Fingerprint}, ${2:*Buffer})$3",
      "kind"    : "function",
      "trigger" : "AddFingerprintBuffer"
    },
    {
      "details" : "Calculate the text width for vector drawing",
      "contents": "VectorTextWidth(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "VectorTextWidth"
    },
    {
      "details" : "Returns the name of the currently logged in user",
      "contents": "UserName()$1",
      "kind"    : "function",
      "trigger" : "UserName"
    },
    {
      "details" : "Try to get ownership of the mutex object. Returns 0 if unsuccessful",
      "contents": "TryLockMutex(${1:Mutex})$2",
      "kind"    : "function",
      "trigger" : "TryLockMutex"
    },
    {
      "details" : "Return the y position of the #Text3D",
      "contents": "Text3DY(${1:#Text3D})$2",
      "kind"    : "function",
      "trigger" : "Text3DY"
    },
    {
      "details" : "Get the specified #Sound status",
      "contents": "SoundStatus(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "SoundStatus"
    },
    {
      "details" : "Change the default timeouts",
      "contents": "SerialPortTimeouts(${1:#SerialPort}, ${2:RIT}, ${3:RTTC}, ${4:RTTM}, ${5:WTTC})$6",
      "kind"    : "function",
      "trigger" : "SerialPortTimeouts"
    },
    {
      "details" : "Save the content of the debug output window to a file",
      "contents": "SaveDebugOutput(${1:Filename.s})$2",
      "kind"    : "function",
      "trigger" : "SaveDebugOutput"
    },
    {
      "details" : "Receive a file from a FTP Server",
      "contents": "ReceiveFTPFile(${1:#Ftp}, ${2:RemoteFilename.s})$3",
      "kind"    : "function",
      "trigger" : "ReceiveFTPFile"
    },
    {
      "details" : "Read the value associated to the keyword",
      "contents": "ReadPreferenceInteger(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "ReadPreferenceInteger"
    },
    {
      "details" : "Returns the first #Entity crossed by the ray",
      "contents": "RayPick(${1:x}, ${2:y}, ${3:z}, ${4:DestinationX}, ${5:DestinationY})$6",
      "kind"    : "function",
      "trigger" : "RayPick"
    },
    {
      "details" : "Change the particles color range",
      "contents": "ParticleColorRange(${1:#ParticleEmitter}, ${2:StartColor})$3",
      "kind"    : "function",
      "trigger" : "ParticleColorRange"
    },
    {
      "details" : "Returns if a ray has encountered an object",
      "contents": "MouseRayCast(${1:#Camera}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "MouseRayCast"
    },
    {
      "details" : "Create an IP Address gadget in the current GadgetList",
      "contents": "IPAddressGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "IPAddressGadget"
    },
    {
      "details" : "Return the specified status",
      "contents": "GetSerialPortStatus(${1:#SerialPort})$2",
      "kind"    : "function",
      "trigger" : "GetSerialPortStatus"
    },
    {
      "details" : "Create a File/Directory Tree",
      "contents": "ExplorerTreeGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "ExplorerTreeGadget"
    },
    {
      "details" : "Create a File/Directory List Gadget",
      "contents": "ExplorerListGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "ExplorerListGadget"
    },
    {
      "details" : "Return the text received from a Drag and Drop event",
      "contents": "EventDropText()$1",
      "kind"    : "function",
      "trigger" : "EventDropText"
    },
    {
      "details" : "Change the linear factor of the #Entity",
      "contents": "EntityLinearFactor(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "EntityLinearFactor"
    },
    {
      "details" : "Returns Y coordinate of the upper right desktop corner",
      "contents": "DesktopY(${1:#Desktop})$2",
      "kind"    : "function",
      "trigger" : "DesktopY"
    },
    {
      "details" : "Create a new regular expression",
      "contents": "CreateRegularExpression(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "CreateRegularExpression"
    },
    {
      "details" : "Creates a new empty preference file",
      "contents": "CreatePreferences(${1:Filename.s})$2",
      "kind"    : "function",
      "trigger" : "CreatePreferences"
    },
    {
      "details" : "Creates a new empty menu",
      "contents": "CreateMenu(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "CreateMenu"
    },
    {
      "details" : "Get the specified CGI parameter value",
      "contents": "CGIParameterValue(${1:Name.s})$2",
      "kind"    : "function",
      "trigger" : "CGIParameterValue"
    },
    {
      "details" : "Retrieve the x position of the #Camera",
      "contents": "CameraX(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraX"
    },
    {
      "details" : "Set the billboardgroup common direction",
      "contents": "BillboardGroupCommonDirection(${1:#BillboardGroup}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "BillboardGroupCommonDirection"
    },
    {
      "details" : "Add a recipient to the specified #Mail",
      "contents": "AddMailRecipient(${1:#Mail}, ${2:Address.s})$3",
      "kind"    : "function",
      "trigger" : "AddMailRecipient"
    },
    {
      "details" : "Get the type of the given XML node",
      "contents": "XMLNodeType(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "XMLNodeType"
    },
    {
      "details" : "Write an ascii character to the specified file",
      "contents": "WriteAsciiCharacter(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteAsciiCharacter"
    },
    {
      "details" : "Calculate the text height for vector drawing",
      "contents": "VectorTextHeight(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "VectorTextHeight"
    },
    {
      "details" : "Move the origin of the vector drawing coordinate system",
      "contents": "TranslateCoordinates(${1:x.d})$2",
      "kind"    : "function",
      "trigger" : "TranslateCoordinates"
    },
    {
      "details" : "Return the z position of the #Text3D",
      "contents": "Text3DZ(${1:#Text3D})$2",
      "kind"    : "function",
      "trigger" : "Text3DZ"
    },
    {
      "details" : "Return the height of the #Terrain tile",
      "contents": "TerrainTileHeightAtPosition(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:Layer}, ${5:x})$6",
      "kind"    : "function",
      "trigger" : "TerrainTileHeightAtPosition"
    },
    {
      "details" : "Set the level of rendering. 0=Lowest quality, 1=Bilinear filtering",
      "contents": "SpriteQuality(${1:Quality})$2",
      "kind"    : "function",
      "trigger" : "SpriteQuality"
    },
    {
      "details" : "Show the assembly viewer window",
      "contents": "ShowAssemblyViewer()$1",
      "kind"    : "function",
      "trigger" : "ShowAssemblyViewer"
    },
    {
      "details" : "Set a blob as a bind variable for the next DatabaseQuery() or DatabaseUpdate()",
      "contents": "SetDatabaseBlob(${1:#Database}, ${2:StatementIndex}, ${3:*Buffer})$4",
      "kind"    : "function",
      "trigger" : "SetDatabaseBlob"
    },
    {
      "details" : "Return the current error on the #SerialPort, if any",
      "contents": "SerialPortError(${1:#SerialPort})$2",
      "kind"    : "function",
      "trigger" : "SerialPortError"
    },
    {
      "details" : "Read a string from the specified file",
      "contents": "ReadString(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadString"
    },
    {
      "details" : "Creates a Option gadget in the current GadgetList",
      "contents": "OptionGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "OptionGadget3D"
    },
    {
      "details" : "Creates a Option gadget in the current GadgetList",
      "contents": "OptionGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "OptionGadget"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsStatusBar(${1:#StatusBar})$2",
      "kind"    : "function",
      "trigger" : "IsStatusBar"
    },
    {
      "details" : "Init all the sprite environment for later use",
      "contents": "InitSprite()$1",
      "kind"    : "function",
      "trigger" : "InitSprite"
    },
    {
      "details" : "Free the specified #NodeAnimation",
      "contents": "FreeNodeAnimation(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "FreeNodeAnimation"
    },
    {
      "details" : "Returns the current error code",
      "contents": "ErrorCode()$1",
      "kind"    : "function",
      "trigger" : "ErrorCode"
    },
    {
      "details" : "Start a Drag and Drop operation with the given Text",
      "contents": "DragText(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "DragText"
    },
    {
      "details" : "Returns X coordinate of the upper right desktop corner",
      "contents": "DesktopX(${1:#Desktop})$2",
      "kind"    : "function",
      "trigger" : "DesktopX"
    },
    {
      "details" : "Creates a new #BillboardGroup",
      "contents": "CreateBillboardGroup(${1:#BillboardGroup}, ${2:MaterialID}, ${3:DefaultBillboardWidth}, ${4:DefaultBillboardHeight})$5",
      "kind"    : "function",
      "trigger" : "CreateBillboardGroup"
    },
    {
      "details" : "Create a new #Music found at the specified memory address",
      "contents": "CatchMusic(${1:#Music}, ${2:*Memory})$3",
      "kind"    : "function",
      "trigger" : "CatchMusic"
    },
    {
      "details" : "Returns the alpha component of the given color",
      "contents": "Alpha(${1:Color})$2",
      "kind"    : "function",
      "trigger" : "Alpha"
    },
    {
      "details" : "Update the #Texture content with the camera view",
      "contents": "UpdateRenderTexture(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "UpdateRenderTexture"
    },
    {
      "details" : "Returns the OutputID of the #Texture to perform 2D rendering operation on it",
      "contents": "TextureOutput(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "TextureOutput"
    },
    {
      "details" : "Removes all the \"space\" or given characters located at the end of a string",
      "contents": "RTrim(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "RTrim"
    },
    {
      "details" : "Clear the current vector drawing path",
      "contents": "ResetPath()$1",
      "kind"    : "function",
      "trigger" : "ResetPath"
    },
    {
      "details" : "Remove the top most texture layer",
      "contents": "RemoveMaterialLayer(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "RemoveMaterialLayer"
    },
    {
      "details" : "Return the last regular expression error",
      "contents": "RegularExpressionError()$1",
      "kind"    : "function",
      "trigger" : "RegularExpressionError"
    },
    {
      "details" : "Read the value associated to the keyword",
      "contents": "ReadPreferenceFloat(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "ReadPreferenceFloat"
    },
    {
      "details" : "Read a null terminated string at the specified memory address",
      "contents": "PeekS(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "PeekS"
    },
    {
      "details" : "Makes the Gadget the current gadget list",
      "contents": "OpenGadgetList3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "OpenGadgetList3D"
    },
    {
      "details" : "Makes the Gadget the current gadget list",
      "contents": "OpenGadgetList(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "OpenGadgetList"
    },
    {
      "details" : "Opens the standard Windows ODBC requester to choose which database to open",
      "contents": "OpenDatabaseRequester(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "OpenDatabaseRequester"
    },
    {
      "details" : "Creates a separator bar in the current menu",
      "contents": "MenuBar()$1",
      "kind"    : "function",
      "trigger" : "MenuBar"
    },
    {
      "details" : "Returns the Z axis state",
      "contents": "JoystickAxisZ(${1:#Joystick})$2",
      "kind"    : "function",
      "trigger" : "JoystickAxisZ"
    },
    {
      "details" : "Returns the OutputID of the specified #Image to perform 2D rendering operation on it",
      "contents": "ImageOutput(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "ImageOutput"
    },
    {
      "details" : "Return the modified date of the current entry in the last FTP listing",
      "contents": "FTPDirectoryEntryDate(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "FTPDirectoryEntryDate"
    },
    {
      "details" : "Write the current preferences to disk",
      "contents": "FlushPreferenceBuffers()$1",
      "kind"    : "function",
      "trigger" : "FlushPreferenceBuffers"
    },
    {
      "details" : "Change the #Entity orientation to look at the specified point",
      "contents": "EntityLookAt(${1:#Entity}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "EntityLookAt"
    },
    {
      "details" : "Display the image on the current output, using the alpha information",
      "contents": "DrawAlphaImage(${1:ImageID}, ${2:x})$3",
      "kind"    : "function",
      "trigger" : "DrawAlphaImage"
    },
    {
      "details" : "Display the #Sprite at the specified position on the current screen",
      "contents": "DisplayTransparentSprite(${1:#Sprite}, ${2:x})$3",
      "kind"    : "function",
      "trigger" : "DisplayTransparentSprite"
    },
    {
      "details" : "Create a new thread running in the application background",
      "contents": "CreateThread(${1:@Procedure()}, ${2:*Value})$3",
      "kind"    : "function",
      "trigger" : "CreateThread"
    },
    {
      "details" : "Makes the camera to look at the x,y,z point",
      "contents": "CameraLookAt(${1:#Camera}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "CameraLookAt"
    },
    {
      "details" : "Add text to the vector drawing path",
      "contents": "AddPathText(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "AddPathText"
    },
    {
      "details" : "Write a string to the specified file",
      "contents": "WriteString(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteString"
    },
    {
      "details" : "Create a water plane at the given position",
      "contents": "WaterColor(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "WaterColor"
    },
    {
      "details" : "Change the sprite transparent color (when displayed with DisplayTransparentSprite)",
      "contents": "TransparentSpriteColor(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "TransparentSpriteColor"
    },
    {
      "details" : "Associate a tooltip text to the specified icon",
      "contents": "SysTrayIconToolTip(${1:#SysTrayIcon})$2",
      "kind"    : "function",
      "trigger" : "SysTrayIconToolTip"
    },
    {
      "details" : "Initialize the printer and start a new print job",
      "contents": "StartPrinting(${1:JobName.s})$2",
      "kind"    : "function",
      "trigger" : "StartPrinting"
    },
    {
      "details" : "Returns the hyperbolic sine of the specified angle",
      "contents": "SinH(${1:Angle})$2",
      "kind"    : "function",
      "trigger" : "SinH"
    },
    {
      "details" : "Get the screen height",
      "contents": "ScreenHeight()$1",
      "kind"    : "function",
      "trigger" : "ScreenHeight"
    },
    {
      "details" : "Start to play the specified module previously loaded with the LoadMusic() command",
      "contents": "PlayMusic(${1:#Music})$2",
      "kind"    : "function",
      "trigger" : "PlayMusic"
    },
    {
      "details" : "Returns the last pick normal Z value",
      "contents": "NormalZ()$1",
      "kind"    : "function",
      "trigger" : "NormalZ"
    },
    {
      "details" : "The next world collision",
      "contents": "NextWorldCollision()$1",
      "kind"    : "function",
      "trigger" : "NextWorldCollision"
    },
    {
      "details" : "Returns the last ASCII key code which has been pressed",
      "contents": "KeyboardInkey()$1",
      "kind"    : "function",
      "trigger" : "KeyboardInkey"
    },
    {
      "details" : "Returns the Y axis state",
      "contents": "JoystickAxisY(${1:#Joystick})$2",
      "kind"    : "function",
      "trigger" : "JoystickAxisY"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsSound3D(${1:#Sound3D})$2",
      "kind"    : "function",
      "trigger" : "IsSound3D"
    },
    {
      "details" : "Create an Image gadget in the current GadgetList",
      "contents": "ImageGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "ImageGadget"
    },
    {
      "details" : "Returns the value previously stored for the window",
      "contents": "GetWindowData(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "GetWindowData"
    },
    {
      "details" : "Returns the value previously stored for this Gadget",
      "contents": "GetGadgetData3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetData3D"
    },
    {
      "details" : "Returns the value previously stored for this Gadget",
      "contents": "GetGadgetData(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetData"
    },
    {
      "details" : "Return the specified #Gadget3D attribute value",
      "contents": "GetGadgetAttribute3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetAttribute3D"
    },
    {
      "details" : "Return the specified #Gadget attribute value",
      "contents": "GetGadgetAttribute(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetAttribute"
    },
    {
      "details" : "Free the given status bar",
      "contents": "FreeStatusBar(${1:#StatusBar})$2",
      "kind"    : "function",
      "trigger" : "FreeStatusBar"
    },
    {
      "details" : "Create a new Image from the data received from a Drag and Drop event",
      "contents": "EventDropImage(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "EventDropImage"
    },
    {
      "details" : "Returns not null if the end of file has been reached. 0 Else",
      "contents": "Eof(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "Eof"
    },
    {
      "details" : "Apply the cube map #Texture to the #Entity",
      "contents": "EntityCubeMapTexture(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "EntityCubeMapTexture"
    },
    {
      "details" : "Copy a memory area from \"SourceMemory\" to \"DestinationMemory\"",
      "contents": "CopyMemory(${1:SourceMemory}, ${2:DestinationMemory})$3",
      "kind"    : "function",
      "trigger" : "CopyMemory"
    },
    {
      "details" : "Convert local position of the object into world coordinate",
      "contents": "ConvertLocalToWorldPosition(${1:ObjectID}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "ConvertLocalToWorldPosition"
    },
    {
      "details" : "Get the specified CGI parameter name",
      "contents": "CGIParameterName(${1:Index})$2",
      "kind"    : "function",
      "trigger" : "CGIParameterName"
    },
    {
      "details" : "Catch a sprite from memory in BMP format",
      "contents": "CatchSprite(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "CatchSprite"
    },
    {
      "details" : "Write the keyword and its associated value",
      "contents": "WritePreferenceLong(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "WritePreferenceLong"
    },
    {
      "details" : "Return the width, in pixels, of the specified window",
      "contents": "WindowWidth(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "WindowWidth"
    },
    {
      "details" : "Returns the OutputID of the specified window to perform 2D rendering operation on it",
      "contents": "WindowOutput(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "WindowOutput"
    },
    {
      "details" : "Waits until an event has occurs on any of the opened windows",
      "contents": "WaitWindowEvent()$1",
      "kind"    : "function",
      "trigger" : "WaitWindowEvent"
    },
    {
      "details" : "Update the specified #Entity animation",
      "contents": "UpdateEntityAnimation(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "UpdateEntityAnimation"
    },
    {
      "details" : "Return the output to the sprite, to be used with StartDrawing()",
      "contents": "SpriteOutput(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "SpriteOutput"
    },
    {
      "details" : "Show the library viewer, optionally displaying an object from a library",
      "contents": "ShowLibraryViewer()$1",
      "kind"    : "function",
      "trigger" : "ShowLibraryViewer"
    },
    {
      "details" : "Change the specified #Menu item state",
      "contents": "SetMenuItemState(${1:#Menu}, ${2:MenuItem})$3",
      "kind"    : "function",
      "trigger" : "SetMenuItemState"
    },
    {
      "details" : "Stores a Long value with this Gadget item",
      "contents": "SetGadgetItemData3D(${1:#Gadget3D}, ${2:Item})$3",
      "kind"    : "function",
      "trigger" : "SetGadgetItemData3D"
    },
    {
      "details" : "Stores a Long value with this Gadget item",
      "contents": "SetGadgetItemData(${1:#Gadget}, ${2:Item})$3",
      "kind"    : "function",
      "trigger" : "SetGadgetItemData"
    },
    {
      "details" : "Scintilla Send Message",
      "contents": "ScintillaSendMessage(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "ScintillaSendMessage"
    },
    {
      "details" : "Read a quad (8 bytes) from the specified file",
      "contents": "ReadQuad(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadQuad"
    },
    {
      "details" : "Open the standard path requester which allow to select a path",
      "contents": "PathRequester(${1:Title.s})$2",
      "kind"    : "function",
      "trigger" : "PathRequester"
    },
    {
      "details" : "Returns the last pick normal Y value",
      "contents": "NormalY()$1",
      "kind"    : "function",
      "trigger" : "NormalY"
    },
    {
      "details" : "Kill the thread. Warning, this is a very dangerous function",
      "contents": "KillThread(${1:Thread})$2",
      "kind"    : "function",
      "trigger" : "KillThread"
    },
    {
      "details" : "Returns the X axis state",
      "contents": "JoystickAxisX(${1:#Joystick})$2",
      "kind"    : "function",
      "trigger" : "JoystickAxisX"
    },
    {
      "details" : "Returns the hour value of the specified date (between 0 and 23)",
      "contents": "Hour(${1:Date})$2",
      "kind"    : "function",
      "trigger" : "Hour"
    },
    {
      "details" : "Sets the motor target on the hinge #Joint",
      "contents": "HingeJointMotorTarget(${1:#Joint}, ${2:Angle})$3",
      "kind"    : "function",
      "trigger" : "HingeJointMotorTarget"
    },
    {
      "details" : "Get the current #Entity animation time",
      "contents": "GetEntityAnimationTime(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "GetEntityAnimationTime"
    },
    {
      "details" : "Examine the pack content",
      "contents": "ExaminePack(${1:#Pack})$2",
      "kind"    : "function",
      "trigger" : "ExaminePack"
    },
    {
      "details" : "Examine the current state of the #Joystick",
      "contents": "ExamineJoystick(${1:#Joystick})$2",
      "kind"    : "function",
      "trigger" : "ExamineJoystick"
    },
    {
      "details" : "Display the #Sprite at the specified position on the current sprite buffer",
      "contents": "DisplaySprite(${1:#Sprite}, ${2:x})$3",
      "kind"    : "function",
      "trigger" : "DisplaySprite"
    },
    {
      "details" : "Returns the zero-based index of the specified column name",
      "contents": "DatabaseColumnIndex(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "DatabaseColumnIndex"
    },
    {
      "details" : "Copy the specified #Entity on the #NewEntity",
      "contents": "CopyEntity(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "CopyEntity"
    },
    {
      "details" : "Write a long number to the specified file",
      "contents": "WriteLong(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteLong"
    },
    {
      "details" : "Returns the height, in pixels, of the specified window",
      "contents": "WindowHeight(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "WindowHeight"
    },
    {
      "details" : "Change the specified #Material color",
      "contents": "SetMaterialColor(${1:#Material}, ${2:Type})$3",
      "kind"    : "function",
      "trigger" : "SetMaterialColor"
    },
    {
      "details" : "Changes the modified/created/accessed date of the specified file",
      "contents": "SetFileDate(${1:FileName.s}, ${2:Type})$3",
      "kind"    : "function",
      "trigger" : "SetFileDate"
    },
    {
      "details" : "Read one byte from the specified file",
      "contents": "ReadByte(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadByte"
    },
    {
      "details" : "Change the particles time to live",
      "contents": "ParticleTimeToLive(${1:#ParticleEmitter}, ${2:MinimumTime})$3",
      "kind"    : "function",
      "trigger" : "ParticleTimeToLive"
    },
    {
      "details" : "Change the particles dimensions",
      "contents": "ParticleSize(${1:#ParticleEmitter}, ${2:Width})$3",
      "kind"    : "function",
      "trigger" : "ParticleSize"
    },
    {
      "details" : "Returns the last pick normal X value",
      "contents": "NormalX()$1",
      "kind"    : "function",
      "trigger" : "NormalX"
    },
    {
      "details" : "Go to the next group after a call to ExaminePreferenceGroups()",
      "contents": "NextPreferenceGroup()$1",
      "kind"    : "function",
      "trigger" : "NextPreferenceGroup"
    },
    {
      "details" : "Tests whether the given point is inside the area stroked by the current path",
      "contents": "IsInsideStroke(${1:x.d}, ${2:y.d})$3",
      "kind"    : "function",
      "trigger" : "IsInsideStroke"
    },
    {
      "details" : "Gets the current #Window3D title",
      "contents": "GetWindowTitle3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "GetWindowTitle3D"
    },
    {
      "details" : "Gets the current #Window title",
      "contents": "GetWindowTitle(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "GetWindowTitle"
    },
    {
      "details" : "Get the entity collision mask",
      "contents": "GetEntityCollisionMask(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "GetEntityCollisionMask"
    },
    {
      "details" : "Return the name of the current entry in the last FTP listing",
      "contents": "FTPDirectoryEntryName(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "FTPDirectoryEntryName"
    },
    {
      "details" : "Stop and remove a sound from memory",
      "contents": "FreeSound3D(${1:#Sound3D})$2",
      "kind"    : "function",
      "trigger" : "FreeSound3D"
    },
    {
      "details" : "Change the way the #Entity will be rendered",
      "contents": "EntityRenderMode(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityRenderMode"
    },
    {
      "details" : "Create a new network server on the local computer at the specified port",
      "contents": "CreateNetworkServer(${1:ServerID}, ${2:Port})$3",
      "kind"    : "function",
      "trigger" : "CreateNetworkServer"
    },
    {
      "details" : "Add a circle (or part of it) to the vector drawing path",
      "contents": "AddPathCircle(${1:x.d}, ${2:y.d})$3",
      "kind"    : "function",
      "trigger" : "AddPathCircle"
    },
    {
      "details" : "Return the height of the #Terrain at the specified coordinates",
      "contents": "TerrainHeight(${1:#Terrain}, ${2:x})$3",
      "kind"    : "function",
      "trigger" : "TerrainHeight"
    },
    {
      "details" : "Convert a signed integer number into a string",
      "contents": "Str(${1:Value})$2",
      "kind"    : "function",
      "trigger" : "Str"
    },
    {
      "details" : "Start the specified #Entity animation",
      "contents": "StartEntityAnimation(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "StartEntityAnimation"
    },
    {
      "details" : "Change a color in the Gadget",
      "contents": "SetGadgetColor(${1:#Gadget}, ${2:ColorType})$3",
      "kind"    : "function",
      "trigger" : "SetGadgetColor"
    },
    {
      "details" : "Save a XML tree to a file",
      "contents": "SaveXML(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "SaveXML"
    },
    {
      "details" : "Pads a string to the right, and adds \"space\" characters to fit the specified length",
      "contents": "RSet(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "RSet"
    },
    {
      "details" : "Starts again to play the movie, after a PauseMovie() command",
      "contents": "ResumeMovie(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "ResumeMovie"
    },
    {
      "details" : "Open a new library (DLL)",
      "contents": "OpenLibrary(${1:#Library})$2",
      "kind"    : "function",
      "trigger" : "OpenLibrary"
    },
    {
      "details" : "Returns 1 if the specified button is pressed",
      "contents": "JoystickButton(${1:#Joystick})$2",
      "kind"    : "function",
      "trigger" : "JoystickButton"
    },
    {
      "details" : "Returns the green component of the given color",
      "contents": "Green(${1:Color})$2",
      "kind"    : "function",
      "trigger" : "Green"
    },
    {
      "details" : "Get the specific part of an URL",
      "contents": "GetURLPart(${1:URL.s})$2",
      "kind"    : "function",
      "trigger" : "GetURLPart"
    },
    {
      "details" : "Return the gadget text content of the specified #Gadget3D",
      "contents": "GetGadgetText3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetText3D"
    },
    {
      "details" : "Return the gadget text content of the specified #Gadget",
      "contents": "GetGadgetText(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetText"
    },
    {
      "details" : "Get the entity collision group",
      "contents": "GetEntityCollisionGroup(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "GetEntityCollisionGroup"
    },
    {
      "details" : "Start examining the keys in the current group of the preference file",
      "contents": "ExaminePreferenceKeys()$1",
      "kind"    : "function",
      "trigger" : "ExaminePreferenceKeys"
    },
    {
      "details" : "Return the Y position where the drop event took place in the gadget/window",
      "contents": "EventDropY()$1",
      "kind"    : "function",
      "trigger" : "EventDropY"
    },
    {
      "details" : "Return the size of the current entry in the directory",
      "contents": "DirectoryEntrySize(${1:#Directory})$2",
      "kind"    : "function",
      "trigger" : "DirectoryEntrySize"
    },
    {
      "details" : "Returns the absolute y mouse position",
      "contents": "DesktopMouseY()$1",
      "kind"    : "function",
      "trigger" : "DesktopMouseY"
    },
    {
      "details" : "Waits the specified time (in milliseconds)",
      "contents": "Delay(${1:Time})$2",
      "kind"    : "function",
      "trigger" : "Delay"
    },
    {
      "details" : "Unbind a gadget event callback",
      "contents": "UnbindGadgetEvent(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "UnbindGadgetEvent"
    },
    {
      "details" : "Write a float number to the specified file",
      "contents": "WriteFloat(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteFloat"
    },
    {
      "details" : "Add LZMA support to the packer commandset",
      "contents": "UseLZMAPacker()$1",
      "kind"    : "function",
      "trigger" : "UseLZMAPacker"
    },
    {
      "details" : "Changes the mail body",
      "contents": "SetMailBody(${1:#Mail})$2",
      "kind"    : "function",
      "trigger" : "SetMailBody"
    },
    {
      "details" : "Change the #Light color value",
      "contents": "SetLightColor(${1:#Light}, ${2:Type})$3",
      "kind"    : "function",
      "trigger" : "SetLightColor"
    },
    {
      "details" : "Change the gadget text content of the specified #Gadget3D",
      "contents": "SetGadgetText3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "SetGadgetText3D"
    },
    {
      "details" : "Change the gadget text content of the specified #Gadget",
      "contents": "SetGadgetText(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "SetGadgetText"
    },
    {
      "details" : "Set a quad number as a bind variable for the next DatabaseQuery() or DatabaseUpdate()",
      "contents": "SetDatabaseQuad(${1:#Database}, ${2:StatementIndex})$3",
      "kind"    : "function",
      "trigger" : "SetDatabaseQuad"
    },
    {
      "details" : "Create a ScrollBar gadget in the current GadgetList",
      "contents": "ScrollBarGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Min}, ${7:Max})$8",
      "kind"    : "function",
      "trigger" : "ScrollBarGadget3D"
    },
    {
      "details" : "Create a ScrollBar gadget in the current GadgetList",
      "contents": "ScrollBarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Min}, ${7:Max})$8",
      "kind"    : "function",
      "trigger" : "ScrollBarGadget"
    },
    {
      "details" : "Reload the materials for all the specified objects",
      "contents": "ResetMaterial(${1:ObjectType})$2",
      "kind"    : "function",
      "trigger" : "ResetMaterial"
    },
    {
      "details" : "Read the CGI web content",
      "contents": "ReadCGI()$1",
      "kind"    : "function",
      "trigger" : "ReadCGI"
    },
    {
      "details" : "Get the name of the currently examined preference key",
      "contents": "PreferenceKeyName()$1",
      "kind"    : "function",
      "trigger" : "PreferenceKeyName"
    },
    {
      "details" : "Write a byte number to the specified memory address",
      "contents": "PokeB(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeB"
    },
    {
      "details" : "Get the status of the movie (-1: paused, 0: stopped, >0: playing)",
      "contents": "MovieStatus(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "MovieStatus"
    },
    {
      "details" : "Returns the remainder of Number/Divisor",
      "contents": "Mod(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "Mod"
    },
    {
      "details" : "Return the mesh pose count",
      "contents": "MeshPoseCount(${1:#Mesh})$2",
      "kind"    : "function",
      "trigger" : "MeshPoseCount"
    },
    {
      "details" : "Tests if a string match the regular expression",
      "contents": "MatchRegularExpression(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "MatchRegularExpression"
    },
    {
      "details" : "Returns the actual pointer position of the specified file",
      "contents": "Loc(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "Loc"
    },
    {
      "details" : "Load the specified sprite into the memory for immediate use",
      "contents": "LoadSprite(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "LoadSprite"
    },
    {
      "details" : "Return the yaw of the #Light",
      "contents": "LightYaw(${1:#Light})$2",
      "kind"    : "function",
      "trigger" : "LightYaw"
    },
    {
      "details" : "Retrieve the current menu item state",
      "contents": "GetMenuItemState(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "GetMenuItemState"
    },
    {
      "details" : "Returns the fingerprint of the file",
      "contents": "FileFingerprint(${1:Filename.s})$2",
      "kind"    : "function",
      "trigger" : "FileFingerprint"
    },
    {
      "details" : "Return the X position where the drop event took place in the gadget/window",
      "contents": "EventDropX()$1",
      "kind"    : "function",
      "trigger" : "EventDropX"
    },
    {
      "details" : "Detach the object of the #Node",
      "contents": "DetachNodeObject(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "DetachNodeObject"
    },
    {
      "details" : "Detach the object from the #Entity",
      "contents": "DetachEntityObject(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "DetachEntityObject"
    },
    {
      "details" : "Returns the absolute x mouse position",
      "contents": "DesktopMouseX()$1",
      "kind"    : "function",
      "trigger" : "DesktopMouseX"
    },
    {
      "details" : "Returns the number of seconds elapsed since the 1st January 1970",
      "contents": "Date()$1",
      "kind"    : "function",
      "trigger" : "Date"
    },
    {
      "details" : "Returns the arc cosine of the specified number, in radian",
      "contents": "ACos(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "ACos"
    },
    {
      "details" : "Returns the absolute value (no sign) of the given float value",
      "contents": "Abs(${1:Value})$2",
      "kind"    : "function",
      "trigger" : "Abs"
    },
    {
      "details" : "Get the input column where a parsing error occured",
      "contents": "XMLErrorPosition(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "XMLErrorPosition"
    },
    {
      "details" : "Set the color for vector drawing",
      "contents": "VectorSourceColor(${1:Color})$2",
      "kind"    : "function",
      "trigger" : "VectorSourceColor"
    },
    {
      "details" : "Set the range for the #Sound3D",
      "contents": "SoundRange3D(${1:#Sound3D}, ${2:Minimum})$3",
      "kind"    : "function",
      "trigger" : "SoundRange3D"
    },
    {
      "details" : "Rotate the sprite. Angle varies from 0 to 360",
      "contents": "RotateSprite(${1:#Sprite}, ${2:Angle})$3",
      "kind"    : "function",
      "trigger" : "RotateSprite"
    },
    {
      "details" : "Start to play the #Sound3D",
      "contents": "PlaySound3D(${1:#Sound3D})$2",
      "kind"    : "function",
      "trigger" : "PlaySound3D"
    },
    {
      "details" : "Pause the specified sound (if it was playing)",
      "contents": "PauseSound(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "PauseSound"
    },
    {
      "details" : "Removes all the \"space\" or given characters located at the beginning of a string",
      "contents": "LTrim(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "LTrim"
    },
    {
      "details" : "Returns the Character length of the string",
      "contents": "Len(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "Len"
    },
    {
      "details" : "Get the #Terrain tile layer blend value",
      "contents": "GetTerrainTileLayerBlend(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:Layer}, ${5:x})$6",
      "kind"    : "function",
      "trigger" : "GetTerrainTileLayerBlend"
    },
    {
      "details" : "Return the text content of the specified #Gadget3D item",
      "contents": "GetGadgetItemText3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetItemText3D"
    },
    {
      "details" : "Return the text content of the specified #Gadget item",
      "contents": "GetGadgetItemText(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetItemText"
    },
    {
      "details" : "Return the progress of the current file transfer",
      "contents": "FTPProgress(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "FTPProgress"
    },
    {
      "details" : "Free the specified memory buffer",
      "contents": "FreeMemory(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "FreeMemory"
    },
    {
      "details" : "Return the file names received from a Drag and Drop event",
      "contents": "EventDropFiles()$1",
      "kind"    : "function",
      "trigger" : "EventDropFiles"
    },
    {
      "details" : "Return the yaw of the bone, relative to the #Entity",
      "contents": "EntityBoneYaw(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityBoneYaw"
    },
    {
      "details" : "Returns the number of milliseconds elapsed since the computer start",
      "contents": "ElapsedMilliseconds()$1",
      "kind"    : "function",
      "trigger" : "ElapsedMilliseconds"
    },
    {
      "details" : "Draw a paragraph of text inside a bounding box",
      "contents": "DrawVectorParagraph(${1:Text.s}, ${2:Width.d})$3",
      "kind"    : "function",
      "trigger" : "DrawVectorParagraph"
    },
    {
      "details" : "Returns the specified #Gadget associated with the dialog",
      "contents": "DialogGadget(${1:#Dialog})$2",
      "kind"    : "function",
      "trigger" : "DialogGadget"
    },
    {
      "details" : "Creates a new empty pack file",
      "contents": "CreatePack(${1:#Pack})$2",
      "kind"    : "function",
      "trigger" : "CreatePack"
    },
    {
      "details" : "Write a message to the standard error output",
      "contents": "ConsoleError(${1:Message.s})$2",
      "kind"    : "function",
      "trigger" : "ConsoleError"
    },
    {
      "details" : "Attach an object to the #Entity",
      "contents": "AttachEntityObject(${1:#Entity}, ${2:Bone.s})$3",
      "kind"    : "function",
      "trigger" : "AttachEntityObject"
    },
    {
      "details" : "Add time to the specified #NodeAnimation",
      "contents": "AddNodeAnimationTime(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "AddNodeAnimationTime"
    },
    {
      "details" : "Write an integer to the specified file",
      "contents": "WriteInteger(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteInteger"
    },
    {
      "details" : "Return the width, in pixels, of the specified window",
      "contents": "WindowWidth3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "WindowWidth3D"
    },
    {
      "details" : "Returns the square root of the specified number",
      "contents": "Sqr(${1:Value})$2",
      "kind"    : "function",
      "trigger" : "Sqr"
    },
    {
      "details" : "Show the callstack window",
      "contents": "ShowCallstack()$1",
      "kind"    : "function",
      "trigger" : "ShowCallstack"
    },
    {
      "details" : "Set the background color of the window",
      "contents": "SetWindowColor(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "SetWindowColor"
    },
    {
      "details" : "Set the keyframe position for the #NodeAnimation",
      "contents": "SetNodeAnimationKeyFrameRotation(${1:#NodeAnimation}, ${2:KeyFrame}, ${3:Pitch}, ${4:Yaw})$5",
      "kind"    : "function",
      "trigger" : "SetNodeAnimationKeyFrameRotation"
    },
    {
      "details" : "Returns the OutputID of the currently used screen to perform 2D rendering operation on it",
      "contents": "ScreenOutput()$1",
      "kind"    : "function",
      "trigger" : "ScreenOutput"
    },
    {
      "details" : "Read one unicode character from the specified file",
      "contents": "ReadUnicodeCharacter(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadUnicodeCharacter"
    },
    {
      "details" : "Read an arbitrary amount of data from the #SerialPort",
      "contents": "ReadSerialPortData(${1:#SerialPort}, ${2:*Buffer})$3",
      "kind"    : "function",
      "trigger" : "ReadSerialPortData"
    },
    {
      "details" : "Get the value of the currently examined preference key as a string",
      "contents": "PreferenceKeyValue()$1",
      "kind"    : "function",
      "trigger" : "PreferenceKeyValue"
    },
    {
      "details" : "Creates a Panel gadget in the current GadgetList",
      "contents": "PanelGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "PanelGadget3D"
    },
    {
      "details" : "Creates a Panel gadget in the current GadgetList",
      "contents": "PanelGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "PanelGadget"
    },
    {
      "details" : "Try to open a connection on the specified server",
      "contents": "OpenFTP(${1:#Ftp}, ${2:ServerName.s}, ${3:User.s})$4",
      "kind"    : "function",
      "trigger" : "OpenFTP"
    },
    {
      "details" : "Check if an event occured on a server",
      "contents": "NetworkServerEvent()$1",
      "kind"    : "function",
      "trigger" : "NetworkServerEvent"
    },
    {
      "details" : "Changes the way the keyboard keys are interpreted",
      "contents": "KeyboardMode(${1:Mode})$2",
      "kind"    : "function",
      "trigger" : "KeyboardMode"
    },
    {
      "details" : "Hide or show the #BillboardGroup and all its billboards",
      "contents": "HideBillboardGroup(${1:#BillboardGroup})$2",
      "kind"    : "function",
      "trigger" : "HideBillboardGroup"
    },
    {
      "details" : "Returns the content of the specified column as a float number",
      "contents": "GetDatabaseFloat(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "GetDatabaseFloat"
    },
    {
      "details" : "Returns the type of the specified column",
      "contents": "DatabaseColumnType(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "DatabaseColumnType"
    },
    {
      "details" : "Change the console title to the new given one",
      "contents": "ConsoleTitle(${1:Title.s})$2",
      "kind"    : "function",
      "trigger" : "ConsoleTitle"
    },
    {
      "details" : "Check if the object is currently visible on the specified camera",
      "contents": "CheckObjectVisibility(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CheckObjectVisibility"
    },
    {
      "details" : "Abort the current asynchronous file operation",
      "contents": "AbortFTPFile(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "AbortFTPFile"
    },
    {
      "details" : "Returns the height, in pixels, of the specified window",
      "contents": "WindowHeight3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "WindowHeight3D"
    },
    {
      "details" : "Create a Tree gadget in the current GadgetList",
      "contents": "TreeGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "TreeGadget3D"
    },
    {
      "details" : "Create a Tree gadget in the current GadgetList",
      "contents": "TreeGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "TreeGadget"
    },
    {
      "details" : "Return the height in pixel of the specified sprite",
      "contents": "SpriteHeight(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "SpriteHeight"
    },
    {
      "details" : "Set the new volume for the #Sound. Values are from 0 to 100",
      "contents": "SoundVolume(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "SoundVolume"
    },
    {
      "details" : "Activate or deactivate the smart window refresh",
      "contents": "SmartWindowRefresh(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "SmartWindowRefresh"
    },
    {
      "details" : "ReAllocates a contiguous memory area according to the specified size",
      "contents": "ReAllocateMemory(${1:Memory})$2",
      "kind"    : "function",
      "trigger" : "ReAllocateMemory"
    },
    {
      "details" : "Change the Purifier check granularities",
      "contents": "PurifierGranularity(${1:GlobalGranularity}, ${2:LocalGranularity}, ${3:StringGranularity})$4",
      "kind"    : "function",
      "trigger" : "PurifierGranularity"
    },
    {
      "details" : "Try to open a connection on the specified server",
      "contents": "OpenNetworkConnection(${1:ServerName.s})$2",
      "kind"    : "function",
      "trigger" : "OpenNetworkConnection"
    },
    {
      "details" : "Display a fog effect on the material",
      "contents": "MaterialFog(${1:#Material}, ${2:Color}, ${3:Intensity}, ${4:StartDistance})$5",
      "kind"    : "function",
      "trigger" : "MaterialFog"
    },
    {
      "details" : "Returns the length of the specified file",
      "contents": "Lof(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "Lof"
    },
    {
      "details" : "Load the specified #Texture",
      "contents": "LoadTexture(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "LoadTexture"
    },
    {
      "details" : "Load a new #Mesh",
      "contents": "LoadMesh(${1:#Mesh})$2",
      "kind"    : "function",
      "trigger" : "LoadMesh"
    },
    {
      "details" : "Returns the currently active window. (The one with the focus)",
      "contents": "GetActiveWindow()$1",
      "kind"    : "function",
      "trigger" : "GetActiveWindow"
    },
    {
      "details" : "Return the height, in pixel, of the #Gadget3D",
      "contents": "GadgetHeight3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GadgetHeight3D"
    },
    {
      "details" : "Returns the e^Exponent",
      "contents": "Exp(${1:Exponent})$2",
      "kind"    : "function",
      "trigger" : "Exp"
    },
    {
      "details" : "get the Code address at which the error happened",
      "contents": "ErrorAddress()$1",
      "kind"    : "function",
      "trigger" : "ErrorAddress"
    },
    {
      "details" : "Add the vector drawing path to the output clipping",
      "contents": "ClipPath()$1",
      "kind"    : "function",
      "trigger" : "ClipPath"
    },
    {
      "details" : "Draw a filled circle on the current output",
      "contents": "Circle(${1:x}, ${2:y})$3",
      "kind"    : "function",
      "trigger" : "Circle"
    },
    {
      "details" : "Add a straight line to the vector drawing path",
      "contents": "AddPathLine(${1:x.d})$2",
      "kind"    : "function",
      "trigger" : "AddPathLine"
    },
    {
      "details" : "Returns the year value of the specified date (between 1970 and 2034)",
      "contents": "Year(${1:Date})$2",
      "kind"    : "function",
      "trigger" : "Year"
    },
    {
      "details" : "Write a whole file to CGI output",
      "contents": "WriteCGIFile(${1:Filename.s})$2",
      "kind"    : "function",
      "trigger" : "WriteCGIFile"
    },
    {
      "details" : "Returns the OutputID of the specified window to vector drawing on it",
      "contents": "WindowVectorOutput(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "WindowVectorOutput"
    },
    {
      "details" : "Set a linear gradient for vector drawing",
      "contents": "VectorSourceLinearGradient(${1:x1.d}, ${2:y1.d}, ${3:x2.d})$4",
      "kind"    : "function",
      "trigger" : "VectorSourceLinearGradient"
    },
    {
      "details" : "Returns the height of the current vector output",
      "contents": "VectorOutputHeight()$1",
      "kind"    : "function",
      "trigger" : "VectorOutputHeight"
    },
    {
      "details" : "Set the font to use for vector drawing",
      "contents": "VectorFont(${1:FontID})$2",
      "kind"    : "function",
      "trigger" : "VectorFont"
    },
    {
      "details" : "Start the profiler",
      "contents": "StartProfiler()$1",
      "kind"    : "function",
      "trigger" : "StartProfiler"
    },
    {
      "details" : "Set the specific part of an URL",
      "contents": "SetURLPart(${1:URL.s}, ${2:Parameter.s})$3",
      "kind"    : "function",
      "trigger" : "SetURLPart"
    },
    {
      "details" : "Activate the specified window, this means than focus has been put on this window",
      "contents": "SetActiveWindow3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "SetActiveWindow3D"
    },
    {
      "details" : "Activate the specified window, this means than focus has been put on this window",
      "contents": "SetActiveWindow(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "SetActiveWindow"
    },
    {
      "details" : "Set the focus on the specified Gadget",
      "contents": "SetActiveGadget3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "SetActiveGadget3D"
    },
    {
      "details" : "Set the focus on the specified Gadget",
      "contents": "SetActiveGadget(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "SetActiveGadget"
    },
    {
      "details" : "Read a character from the specified file",
      "contents": "ReadCharacter(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadCharacter"
    },
    {
      "details" : "Transform a string date into a regular date value, to be used with other date functions",
      "contents": "ParseDate(${1:Mask.s})$2",
      "kind"    : "function",
      "trigger" : "ParseDate"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsSysTrayIcon(${1:#SysTrayIcon})$2",
      "kind"    : "function",
      "trigger" : "IsSysTrayIcon"
    },
    {
      "details" : "Send event to the GUI system",
      "contents": "InputEvent3D(${1:MouseX}, ${2:MouseY})$3",
      "kind"    : "function",
      "trigger" : "InputEvent3D"
    },
    {
      "details" : "Init the CGI library",
      "contents": "InitCGI()$1",
      "kind"    : "function",
      "trigger" : "InitCGI"
    },
    {
      "details" : "Set a color for the drawing gradient",
      "contents": "GradientColor(${1:Position.f})$2",
      "kind"    : "function",
      "trigger" : "GradientColor"
    },
    {
      "details" : "Associate the specified Text$ to the #Gadget",
      "contents": "GadgetToolTip(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GadgetToolTip"
    },
    {
      "details" : "Examine each match of the regular expression individually",
      "contents": "ExamineRegularExpression(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "ExamineRegularExpression"
    },
    {
      "details" : "Returns the Timer that fired the event",
      "contents": "EventTimer()$1",
      "kind"    : "function",
      "trigger" : "EventTimer"
    },
    {
      "details" : "Enable the angular motor on the hinge #Joint",
      "contents": "EnableHingeJointAngularMotor(${1:#Joint}, ${2:Enable}, ${3:TargetVelocity})$4",
      "kind"    : "function",
      "trigger" : "EnableHingeJointAngularMotor"
    },
    {
      "details" : "Use an elliptical gradient when gradient drawing is enabled",
      "contents": "EllipticalGradient(${1:x}, ${2:y}, ${3:RadiusX})$4",
      "kind"    : "function",
      "trigger" : "EllipticalGradient"
    },
    {
      "details" : "Returns the area hyperbolic cosine of the specified number",
      "contents": "ACosH(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "ACosH"
    },
    {
      "details" : "Check if an event has occured on any of the opened windows",
      "contents": "WindowEvent()$1",
      "kind"    : "function",
      "trigger" : "WindowEvent"
    },
    {
      "details" : "Returns vertical resolution (in DPI) of the vector drawing output",
      "contents": "VectorResolutionY()$1",
      "kind"    : "function",
      "trigger" : "VectorResolutionY"
    },
    {
      "details" : "Set the entity collision group and mask",
      "contents": "SetEntityCollisionFilter(${1:#Entity}, ${2:Group})$3",
      "kind"    : "function",
      "trigger" : "SetEntityCollisionFilter"
    },
    {
      "details" : "Resume the AudioCD playback",
      "contents": "ResumeAudioCD()$1",
      "kind"    : "function",
      "trigger" : "ResumeAudioCD"
    },
    {
      "details" : "Pause the thread execution",
      "contents": "PauseThread(${1:Thread})$2",
      "kind"    : "function",
      "trigger" : "PauseThread"
    },
    {
      "details" : "Opens the specified database",
      "contents": "OpenDatabase(${1:#Database}, ${2:DatabaseName.s}, ${3:User.s})$4",
      "kind"    : "function",
      "trigger" : "OpenDatabase"
    },
    {
      "details" : "Pads a string to the left, and adds \"space\" characters to fit the specified length",
      "contents": "LSet(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "LSet"
    },
    {
      "details" : "Tries to open the specified font",
      "contents": "LoadFont(${1:#Font}, ${2:Name.s})$3",
      "kind"    : "function",
      "trigger" : "LoadFont"
    },
    {
      "details" : "Returns the path of the current directory",
      "contents": "GetCurrentDirectory()$1",
      "kind"    : "function",
      "trigger" : "GetCurrentDirectory"
    },
    {
      "details" : "Return the size of the buffer of data received from a Drag and Drop event",
      "contents": "EventDropSize()$1",
      "kind"    : "function",
      "trigger" : "EventDropSize"
    },
    {
      "details" : "Return the roll of the bone, relative to the #Entity",
      "contents": "EntityBoneRoll(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityBoneRoll"
    },
    {
      "details" : "Returns the day value of the specified date (between 1 and 31)",
      "contents": "Day(${1:Date})$2",
      "kind"    : "function",
      "trigger" : "Day"
    },
    {
      "details" : "Create a new vertex animation for the #mesh",
      "contents": "CreateVertexAnimation(${1:#Mesh}, ${2:Animation.s})$3",
      "kind"    : "function",
      "trigger" : "CreateVertexAnimation"
    },
    {
      "details" : "Return the number of capturing groups in the regular expression",
      "contents": "CountRegularExpressionGroups(${1:#RegularExpression})$2",
      "kind"    : "function",
      "trigger" : "CountRegularExpressionGroups"
    },
    {
      "details" : "Clear the whole console content",
      "contents": "ClearConsole()$1",
      "kind"    : "function",
      "trigger" : "ClearConsole"
    },
    {
      "details" : "Retrieve the x position on the screen of the #Camera view, in pixels",
      "contents": "CameraViewX(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraViewX"
    },
    {
      "details" : "Returns horizontal resolution (in DPI) of the vector drawing output",
      "contents": "VectorResolutionX()$1",
      "kind"    : "function",
      "trigger" : "VectorResolutionX"
    },
    {
      "details" : "Send the mail",
      "contents": "SendMail(${1:#Mail}, ${2:Smtp$})$3",
      "kind"    : "function",
      "trigger" : "SendMail"
    },
    {
      "details" : "Remove the specified key from the current group",
      "contents": "RemovePreferenceKey(${1:Name.s})$2",
      "kind"    : "function",
      "trigger" : "RemovePreferenceKey"
    },
    {
      "details" : "Remove a keyboard shortcut from the specified #Window",
      "contents": "RemoveKeyboardShortcut(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "RemoveKeyboardShortcut"
    },
    {
      "details" : "Read a float (4 bytes) from the specified file",
      "contents": "ReadFloat(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadFloat"
    },
    {
      "details" : "Add a comment to the current preference file",
      "contents": "PreferenceComment(${1:Comment.s})$2",
      "kind"    : "function",
      "trigger" : "PreferenceComment"
    },
    {
      "details" : "Post an event to the event queue",
      "contents": "PostEvent(${1:Event})$2",
      "kind"    : "function",
      "trigger" : "PostEvent"
    },
    {
      "details" : "Write a character (1 byte in ascii, 2 bytes in unicode) to the specified memory address",
      "contents": "PokeC(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeC"
    },
    {
      "details" : "Load the specified sound into memory",
      "contents": "LoadSound(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "LoadSound"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsWindow3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "IsWindow3D"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsWindow(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "IsWindow"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsToolBar(${1:#ToolBar})$2",
      "kind"    : "function",
      "trigger" : "IsToolBar"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsTexture(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "IsTexture"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsText3D(${1:#Text3D})$2",
      "kind"    : "function",
      "trigger" : "IsText3D"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsStaticGeometry(${1:#StaticGeometry})$2",
      "kind"    : "function",
      "trigger" : "IsStaticGeometry"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsSprite(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "IsSprite"
    },
    {
      "details" : "Test if the given ",
      "contents": "IsSerialPort(${1:#SerialPort})$2",
      "kind"    : "function",
      "trigger" : "IsSerialPort"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsNode(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "IsNode"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsMesh(${1:#Mesh})$2",
      "kind"    : "function",
      "trigger" : "IsMesh"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsMenu(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "IsMenu"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsMaterial(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "IsMaterial"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsMail(${1:#Mail})$2",
      "kind"    : "function",
      "trigger" : "IsMail"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsLibrary(${1:#Library})$2",
      "kind"    : "function",
      "trigger" : "IsLibrary"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsImage(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "IsImage"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsGadget3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "IsGadget3D"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsGadget(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "IsGadget"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsFont(${1:#Font})$2",
      "kind"    : "function",
      "trigger" : "IsFont"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsFile(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "IsFile"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsEntity(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "IsEntity"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsEffect(${1:#Effect})$2",
      "kind"    : "function",
      "trigger" : "IsEffect"
    },
    {
      "details" : "Tests if the given dialog is initialized",
      "contents": "IsDialog(${1:#Dialog})$2",
      "kind"    : "function",
      "trigger" : "IsDialog"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsDatabase(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "IsDatabase"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsCipher(${1:#Cipher})$2",
      "kind"    : "function",
      "trigger" : "IsCipher"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsCamera(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "IsCamera"
    },
    {
      "details" : "Tests if the given ",
      "contents": "IsBillboardGroup(${1:#BillboardGroup})$2",
      "kind"    : "function",
      "trigger" : "IsBillboardGroup"
    },
    {
      "details" : "Return the raw memory buffer of the data received from a Drag and Drop event",
      "contents": "EventDropBuffer()$1",
      "kind"    : "function",
      "trigger" : "EventDropBuffer"
    },
    {
      "details" : "Draw an evenly dashed line along the vector drawing path",
      "contents": "DashPath(${1:Width.d})$2",
      "kind"    : "function",
      "trigger" : "DashPath"
    },
    {
      "details" : "Close the specified client connection and send a notification to the server",
      "contents": "CloseFTP(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "CloseFTP"
    },
    {
      "details" : "Retrieve the y position on the screen of the #Camera view, in pixels",
      "contents": "CameraViewY(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraViewY"
    },
    {
      "details" : "Possible values: -1 Ready; 0 Stopped; >0 Audio track which is currently playing",
      "contents": "AudioCDStatus()$1",
      "kind"    : "function",
      "trigger" : "AudioCDStatus"
    },
    {
      "details" : "Attach the ribbon #Effect to the node",
      "contents": "AttachRibbonEffect(${1:#Effect})$2",
      "kind"    : "function",
      "trigger" : "AttachRibbonEffect"
    },
    {
      "details" : "Add a column to the specified #Gadget",
      "contents": "AddGadgetColumn(${1:#Gadget}, ${2:Position}, ${3:Title.s})$4",
      "kind"    : "function",
      "trigger" : "AddGadgetColumn"
    },
    {
      "details" : "Create a TrackBar gadget in the current GadgetList",
      "contents": "TrackBarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7",
      "kind"    : "function",
      "trigger" : "TrackBarGadget"
    },
    {
      "details" : "Test if the two sprites are overlapped",
      "contents": "SpriteCollision(${1:#Sprite1}, ${2:x1}, ${3:y1}, ${4:#Sprite2}, ${5:x2})$6",
      "kind"    : "function",
      "trigger" : "SpriteCollision"
    },
    {
      "details" : "Set the new pan for the #Sound. Values are from -100 to 100",
      "contents": "SoundPan(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "SoundPan"
    },
    {
      "details" : "Change the specified #Gadget item attribute",
      "contents": "SetGadgetItemAttribute(${1:#Gadget}, ${2:Item}, ${3:Attribute})$4",
      "kind"    : "function",
      "trigger" : "SetGadgetItemAttribute"
    },
    {
      "details" : "Remove the specified #Billboard",
      "contents": "RemoveBillboard(${1:#Billboard})$2",
      "kind"    : "function",
      "trigger" : "RemoveBillboard"
    },
    {
      "details" : "Write an integer (8 bytes) to the specified memory address",
      "contents": "PokeI(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeI"
    },
    {
      "details" : "Get the direction of the given point",
      "contents": "PointPick(${1:#Camera}, ${2:x})$3",
      "kind"    : "function",
      "trigger" : "PointPick"
    },
    {
      "details" : "Create a vector drawing output to create a PDF file",
      "contents": "PdfVectorOutput(${1:Filename.s}, ${2:Width.d})$3",
      "kind"    : "function",
      "trigger" : "PdfVectorOutput"
    },
    {
      "details" : "Change the #ParticleEmitter material with the new one",
      "contents": "ParticleMaterial(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "ParticleMaterial"
    },
    {
      "details" : "Returns the unique ID which identifies the particle emitter in the operating system",
      "contents": "ParticleEmitterID(${1:#ParticleEmitter})$2",
      "kind"    : "function",
      "trigger" : "ParticleEmitterID"
    },
    {
      "details" : "Returns the current pack entry name",
      "contents": "PackEntryName(${1:#Pack})$2",
      "kind"    : "function",
      "trigger" : "PackEntryName"
    },
    {
      "details" : "Creates an empty sub-menu entry in the current menu",
      "contents": "OpenSubMenu(${1:Text.s})$2",
      "kind"    : "function",
      "trigger" : "OpenSubMenu"
    },
    {
      "details" : "Change the color of the specified lens flare part",
      "contents": "LensFlareEffectColor(${1:#Effect}, ${2:ColorType})$3",
      "kind"    : "function",
      "trigger" : "LensFlareEffectColor"
    },
    {
      "details" : "Returns the float value for positive infinity",
      "contents": "Infinity()$1",
      "kind"    : "function",
      "trigger" : "Infinity"
    },
    {
      "details" : "Get the encoding used in the parsed XML data",
      "contents": "GetXMLEncoding(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "GetXMLEncoding"
    },
    {
      "details" : "Get the keyframe time for the #NodeAnimation",
      "contents": "GetNodeAnimationKeyFrameTime(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "GetNodeAnimationKeyFrameTime"
    },
    {
      "details" : "Create a File/Directory Combo Gadget",
      "contents": "ExplorerComboGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "ExplorerComboGadget"
    },
    {
      "details" : "Get the specified CGI parameter type",
      "contents": "CGIParameterType(${1:Name.s})$2",
      "kind"    : "function",
      "trigger" : "CGIParameterType"
    },
    {
      "details" : "Changes the ambient color of the world",
      "contents": "AmbientColor(${1:Color})$2",
      "kind"    : "function",
      "trigger" : "AmbientColor"
    },
    {
      "details" : "Write the keyword and its associated quad value",
      "contents": "WritePreferenceQuad(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "WritePreferenceQuad"
    },
    {
      "details" : "Add BriefLZ support to the packer commandset",
      "contents": "UseBriefLZPacker()$1",
      "kind"    : "function",
      "trigger" : "UseBriefLZPacker"
    },
    {
      "details" : "Specify the sound cone",
      "contents": "SoundCone3D(${1:#Sound3D}, ${2:InnerCone}, ${3:OuterCode})$4",
      "kind"    : "function",
      "trigger" : "SoundCone3D"
    },
    {
      "details" : "Set the standalone mode of the XML document",
      "contents": "SetXMLStandalone(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "SetXMLStandalone"
    },
    {
      "details" : "Remove the attribute entry from the XML node",
      "contents": "RemoveXMLAttribute(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "RemoveXMLAttribute"
    },
    {
      "details" : "Read an integer from the specified file",
      "contents": "ReadInteger(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "ReadInteger"
    },
    {
      "details" : "Pause the movie playback",
      "contents": "PauseMovie(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "PauseMovie"
    },
    {
      "details" : "Open the cryptographic random number generator",
      "contents": "OpenCryptRandom()$1",
      "kind"    : "function",
      "trigger" : "OpenCryptRandom"
    },
    {
      "details" : "Exit the program if an error occurs",
      "contents": "OnErrorExit()$1",
      "kind"    : "function",
      "trigger" : "OnErrorExit"
    },
    {
      "details" : "Change the #Material shininess",
      "contents": "MaterialShininess(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "MaterialShininess"
    },
    {
      "details" : "Returns the original string converted into lower case characters",
      "contents": "LCase(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "LCase"
    },
    {
      "details" : "Retrieves the path part of a full path",
      "contents": "GetPathPart(${1:FullPathName.s})$2",
      "kind"    : "function",
      "trigger" : "GetPathPart"
    },
    {
      "details" : "Returns the value previously stored with this gadget item",
      "contents": "GetGadgetItemData3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetItemData3D"
    },
    {
      "details" : "Returns the value previously stored with this gadget item",
      "contents": "GetGadgetItemData(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "GetGadgetItemData"
    },
    {
      "details" : "Get the currently set color of the Gadget item",
      "contents": "GetGadgetItemColor(${1:#Gadget}, ${2:Item})$3",
      "kind"    : "function",
      "trigger" : "GetGadgetItemColor"
    },
    {
      "details" : "Get the #Entity animation weight",
      "contents": "GetEntityAnimationWeight(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "GetEntityAnimationWeight"
    },
    {
      "details" : "Return the size of the current entry in the last FTP listing",
      "contents": "FTPDirectoryEntrySize(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "FTPDirectoryEntrySize"
    },
    {
      "details" : "Free the specified #Toolbar",
      "contents": "FreeToolBar(${1:#ToolBar})$2",
      "kind"    : "function",
      "trigger" : "FreeToolBar"
    },
    {
      "details" : "Free the specified #Texture",
      "contents": "FreeTexture(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "FreeTexture"
    },
    {
      "details" : "Free the specified #Text3D",
      "contents": "FreeText3D(${1:#Text3D})$2",
      "kind"    : "function",
      "trigger" : "FreeText3D"
    },
    {
      "details" : "Free the specified #StaticGeometry",
      "contents": "FreeStaticGeometry(${1:#StaticGeometry})$2",
      "kind"    : "function",
      "trigger" : "FreeStaticGeometry"
    },
    {
      "details" : "Remove the specified sprite from memory",
      "contents": "FreeSprite(${1:#Sprite})$2",
      "kind"    : "function",
      "trigger" : "FreeSprite"
    },
    {
      "details" : "Free the #Spline",
      "contents": "FreeSpline(${1:#Spline})$2",
      "kind"    : "function",
      "trigger" : "FreeSpline"
    },
    {
      "details" : "Free the specified #Node",
      "contents": "FreeNode(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "FreeNode"
    },
    {
      "details" : "Free the specified #Mesh",
      "contents": "FreeMesh(${1:#Mesh})$2",
      "kind"    : "function",
      "trigger" : "FreeMesh"
    },
    {
      "details" : "Remove the specified menu from memory",
      "contents": "FreeMenu(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "FreeMenu"
    },
    {
      "details" : "Free the specified #Material",
      "contents": "FreeMaterial(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "FreeMaterial"
    },
    {
      "details" : "Frees the previously created mail",
      "contents": "FreeMail(${1:#Mail})$2",
      "kind"    : "function",
      "trigger" : "FreeMail"
    },
    {
      "details" : "Free the specified #Image and release its associated memory",
      "contents": "FreeImage(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "FreeImage"
    },
    {
      "details" : "Free (remove) the #Gadget3D",
      "contents": "FreeGadget3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "FreeGadget3D"
    },
    {
      "details" : "Free (remove) the #Gadget",
      "contents": "FreeGadget(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "FreeGadget"
    },
    {
      "details" : "Close the given Font",
      "contents": "FreeFont(${1:#Font})$2",
      "kind"    : "function",
      "trigger" : "FreeFont"
    },
    {
      "details" : "Free the specified #Entity",
      "contents": "FreeEntity(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "FreeEntity"
    },
    {
      "details" : "Free the specified #Effect",
      "contents": "FreeEffect(${1:#Effect})$2",
      "kind"    : "function",
      "trigger" : "FreeEffect"
    },
    {
      "details" : "Frees the specified dialog",
      "contents": "FreeDialog(${1:#Dialog})$2",
      "kind"    : "function",
      "trigger" : "FreeDialog"
    },
    {
      "details" : "Free the specified #Camera",
      "contents": "FreeCamera(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "FreeCamera"
    },
    {
      "details" : "Free the specified #BillboardGroup and all its billboards",
      "contents": "FreeBillboardGroup(${1:#BillboardGroup})$2",
      "kind"    : "function",
      "trigger" : "FreeBillboardGroup"
    },
    {
      "details" : "Fill the entire vector drawing output with the drawing source",
      "contents": "FillVectorOutput()$1",
      "kind"    : "function",
      "trigger" : "FillVectorOutput"
    },
    {
      "details" : "Return the parent #Entity node",
      "contents": "EntityParentNode(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityParentNode"
    },
    {
      "details" : "Delete a file on the FTP server",
      "contents": "DeleteFTPFile(${1:#Ftp})$2",
      "kind"    : "function",
      "trigger" : "DeleteFTPFile"
    },
    {
      "details" : "Add a static physic body to the #Terrain",
      "contents": "CreateTerrainBody(${1:#Terrain}, ${2:Restitution})$3",
      "kind"    : "function",
      "trigger" : "CreateTerrainBody"
    },
    {
      "details" : "Close the actual sub menu and come back to the previous one",
      "contents": "CloseSubMenu()$1",
      "kind"    : "function",
      "trigger" : "CloseSubMenu"
    },
    {
      "details" : "Write a quad number to the specified file",
      "contents": "WriteQuad(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteQuad"
    },
    {
      "details" : "Write the keyword and its associated value",
      "contents": "WritePreferenceFloat(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "WritePreferenceFloat"
    },
    {
      "details" : "Create a Web gadget in the current GadgetList",
      "contents": "WebGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:URL$})$7",
      "kind"    : "function",
      "trigger" : "WebGadget"
    },
    {
      "details" : "Stores a value for the window",
      "contents": "SetWindowData(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "SetWindowData"
    },
    {
      "details" : "Sets the orientation for the specified object",
      "contents": "SetOrientation(${1:ObjectID}, ${2:x}, ${3:y}, ${4:z})$5",
      "kind"    : "function",
      "trigger" : "SetOrientation"
    },
    {
      "details" : "Stores a value for the Gadget",
      "contents": "SetGadgetData3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "SetGadgetData3D"
    },
    {
      "details" : "Stores a value for the Gadget",
      "contents": "SetGadgetData(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "SetGadgetData"
    },
    {
      "details" : "Change the specified #Gadget3D attribute",
      "contents": "SetGadgetAttribute3D(${1:#Gadget3D}, ${2:Attribute})$3",
      "kind"    : "function",
      "trigger" : "SetGadgetAttribute3D"
    },
    {
      "details" : "Change the specified #Gadget attribute",
      "contents": "SetGadgetAttribute(${1:#Gadget}, ${2:Attribute})$3",
      "kind"    : "function",
      "trigger" : "SetGadgetAttribute"
    },
    {
      "details" : "Creates a ProgressBar gadget in the current gadgetList",
      "contents": "ProgressBarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7",
      "kind"    : "function",
      "trigger" : "ProgressBarGadget"
    },
    {
      "details" : "Retrieves information about the previous database row",
      "contents": "PreviousDatabaseRow(${1:#Database})$2",
      "kind"    : "function",
      "trigger" : "PreviousDatabaseRow"
    },
    {
      "details" : "Open a serial port for use",
      "contents": "OpenSerialPort(${1:#SerialPort}, ${2:SerialPortName.s}, ${3:Bauds}, ${4:Parity}, ${5:Data}, ${6:Stop}, ${7:HandshakeMode}, ${8:InputBufferSize})$9",
      "kind"    : "function",
      "trigger" : "OpenSerialPort"
    },
    {
      "details" : "Returns the mouse Y movement (in pixel) since the last call of this function",
      "contents": "MouseDeltaY()$1",
      "kind"    : "function",
      "trigger" : "MouseDeltaY"
    },
    {
      "details" : "Returns the IP of the specified client",
      "contents": "GetClientIP(${1:Connection})$2",
      "kind"    : "function",
      "trigger" : "GetClientIP"
    },
    {
      "details" : "Returns the fingerprint of the specified buffer",
      "contents": "Fingerprint(${1:*Buffer}, ${2:Size})$3",
      "kind"    : "function",
      "trigger" : "Fingerprint"
    },
    {
      "details" : "Returns which gadget has been pushed (return the #Gadget identifier)",
      "contents": "EventGadget()$1",
      "kind"    : "function",
      "trigger" : "EventGadget"
    },
    {
      "details" : "Return the attributes of the current entry in the directory",
      "contents": "DirectoryEntryAttributes(${1:#Directory})$2",
      "kind"    : "function",
      "trigger" : "DirectoryEntryAttributes"
    },
    {
      "details" : "Returns the OutputID of the specified #Gadget to perform 2D rendering operation on it",
      "contents": "CanvasOutput(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "CanvasOutput"
    },
    {
      "details" : "Get a string description for an error during XML parsing",
      "contents": "XMLError(${1:#XML})$2",
      "kind"    : "function",
      "trigger" : "XMLError"
    },
    {
      "details" : "Write a character to the specified file",
      "contents": "WriteCharacter(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteCharacter"
    },
    {
      "details" : "Write a byte sized number to the specified file",
      "contents": "WriteByte(${1:#File})$2",
      "kind"    : "function",
      "trigger" : "WriteByte"
    },
    {
      "details" : "Returns the URL$ encoded to HTTP format",
      "contents": "URLEncoder(${1:URL.s})$2",
      "kind"    : "function",
      "trigger" : "URLEncoder"
    },
    {
      "details" : "Scale the #Material texture",
      "contents": "ScaleMaterial(${1:#Material}, ${2:x})$3",
      "kind"    : "function",
      "trigger" : "ScaleMaterial"
    },
    {
      "details" : "Roll the specified object",
      "contents": "Roll(${1:ObjectID}, ${2:Value.f})$3",
      "kind"    : "function",
      "trigger" : "Roll"
    },
    {
      "details" : "Resolves all namespaces for the given node and returns a full node name",
      "contents": "ResolveXMLNodeName(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "ResolveXMLNodeName"
    },
    {
      "details" : "Reinitialize the random seed, with the specified value",
      "contents": "RandomSeed(${1:Seed})$2",
      "kind"    : "function",
      "trigger" : "RandomSeed"
    },
    {
      "details" : "Raise the given error and call the error handler or exit",
      "contents": "RaiseError(${1:ErrorNumber})$2",
      "kind"    : "function",
      "trigger" : "RaiseError"
    },
    {
      "details" : "Write a long (4 bytes) number to the specified memory address",
      "contents": "PokeL(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeL"
    },
    {
      "details" : "Get the width of the current drawing output",
      "contents": "OutputWidth()$1",
      "kind"    : "function",
      "trigger" : "OutputWidth"
    },
    {
      "details" : "Returns the mouse X movement (in pixel) since the last call of this function",
      "contents": "MouseDeltaX()$1",
      "kind"    : "function",
      "trigger" : "MouseDeltaX"
    },
    {
      "details" : "Change the #Material culling mode",
      "contents": "MaterialCullingMode(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "MaterialCullingMode"
    },
    {
      "details" : "Returns the Log in base 10 of the value",
      "contents": "Log10(${1:x})$2",
      "kind"    : "function",
      "trigger" : "Log10"
    },
    {
      "details" : "Returns the depth of the specified #Image",
      "contents": "ImageDepth(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "ImageDepth"
    },
    {
      "details" : "Return the width, in pixel, of the #Gadget3D",
      "contents": "GadgetWidth3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "GadgetWidth3D"
    },
    {
      "details" : "Free the body associated with the #Entity",
      "contents": "FreeEntityBody(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "FreeEntityBody"
    },
    {
      "details" : "Start to examine the occured collisions in the world",
      "contents": "ExamineWorldCollisions(${1:Contacts})$2",
      "kind"    : "function",
      "trigger" : "ExamineWorldCollisions"
    },
    {
      "details" : "Start to examine the host current IPs",
      "contents": "ExamineIPAddresses()$1",
      "kind"    : "function",
      "trigger" : "ExamineIPAddresses"
    },
    {
      "details" : "After a WindowEvent3D() command, use this function to determine of which type the event is",
      "contents": "EventType3D()$1",
      "kind"    : "function",
      "trigger" : "EventType3D"
    },
    {
      "details" : "Server side: allow to know which client has sent the data",
      "contents": "EventClient()$1",
      "kind"    : "function",
      "trigger" : "EventClient"
    },
    {
      "details" : "Create a button gadget in the current GadgetList",
      "contents": "ButtonImageGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "ButtonImageGadget"
    },
    {
      "details" : "Begin a new transparent layer for vector drawing",
      "contents": "BeginVectorLayer()$1",
      "kind"    : "function",
      "trigger" : "BeginVectorLayer"
    },
    {
      "details" : "Write the keyword and its associated value",
      "contents": "WritePreferenceInteger(${1:Key.s})$2",
      "kind"    : "function",
      "trigger" : "WritePreferenceInteger"
    },
    {
      "details" : "Start the specified #NodeAnimation",
      "contents": "StartNodeAnimation(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "StartNodeAnimation"
    },
    {
      "details" : "Read data from the console input",
      "contents": "ReadConsoleData(${1:*Buffer})$2",
      "kind"    : "function",
      "trigger" : "ReadConsoleData"
    },
    {
      "details" : "Get the previous XML node on the same level as the given node",
      "contents": "PreviousXMLNode(${1:Node})$2",
      "kind"    : "function",
      "trigger" : "PreviousXMLNode"
    },
    {
      "details" : "Returns the Number^Power",
      "contents": "Pow(${1:Number})$2",
      "kind"    : "function",
      "trigger" : "Pow"
    },
    {
      "details" : "Change the way the yaw axis is managed",
      "contents": "NodeFixedYawAxis(${1:#Node})$2",
      "kind"    : "function",
      "trigger" : "NodeFixedYawAxis"
    },
    {
      "details" : "Returns the height (in pixel) of the movie",
      "contents": "MovieHeight(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "MovieHeight"
    },
    {
      "details" : "Changes the mouse X,Y position to the new specified one",
      "contents": "MouseLocate(${1:x})$2",
      "kind"    : "function",
      "trigger" : "MouseLocate"
    },
    {
      "details" : "Finish the examine of the directory",
      "contents": "FinishDirectory(${1:#Directory})$2",
      "kind"    : "function",
      "trigger" : "FinishDirectory"
    },
    {
      "details" : "Update the mouse state",
      "contents": "ExamineMouse()$1",
      "kind"    : "function",
      "trigger" : "ExamineMouse"
    },
    {
      "details" : "Returns the source filename in which the current error occured",
      "contents": "ErrorFile()$1",
      "kind"    : "function",
      "trigger" : "ErrorFile"
    },
    {
      "details" : "Change the way the yaw axis is managed",
      "contents": "EntityFixedYawAxis(${1:#Entity})$2",
      "kind"    : "function",
      "trigger" : "EntityFixedYawAxis"
    },
    {
      "details" : "Change the drawing mode for graphic and text output",
      "contents": "DrawingMode(${1:Mode})$2",
      "kind"    : "function",
      "trigger" : "DrawingMode"
    },
    {
      "details" : "Convert a point between coordinate systems",
      "contents": "ConvertCoordinateX(${1:x.d})$2",
      "kind"    : "function",
      "trigger" : "ConvertCoordinateX"
    },
    {
      "details" : "Change the way the yaw axis is managed",
      "contents": "CameraFixedYawAxis(${1:#Camera})$2",
      "kind"    : "function",
      "trigger" : "CameraFixedYawAxis"
    },
    {
      "details" : "Create Date selection Calendar",
      "contents": "CalendarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "kind"    : "function",
      "trigger" : "CalendarGadget"
    },
    {
      "details" : "Encodes the specified buffer using the AES algorithm",
      "contents": "AESEncoder(${1:*Input}, ${2:*Output}, ${3:Size}, ${4:*Key}, ${5:Bits})$6",
      "kind"    : "function",
      "trigger" : "AESEncoder"
    },
    {
      "details" : "Change the current AudioCD drive",
      "contents": "UseAudioCD(${1:AudioCDDrive})$2",
      "kind"    : "function",
      "trigger" : "UseAudioCD"
    },
    {
      "details" : "Returns the width in pixel of the #Texture",
      "contents": "TextureWidth(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "TextureWidth"
    },
    {
      "details" : "Get the length in bytes needed to store the string in the given format",
      "contents": "StringByteLength(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "StringByteLength"
    },
    {
      "details" : "Set the #NodeAnimation weight",
      "contents": "SetNodeAnimationWeight(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "SetNodeAnimationWeight"
    },
    {
      "details" : "Changes the attributes of the specified file",
      "contents": "SetFileAttributes(${1:FileName.s})$2",
      "kind"    : "function",
      "trigger" : "SetFileAttributes"
    },
    {
      "details" : "Open the standard requester which allow to save a file",
      "contents": "SaveFileRequester(${1:Title.s}, ${2:DefaultFile.s}, ${3:Pattern.s})$4",
      "kind"    : "function",
      "trigger" : "SaveFileRequester"
    },
    {
      "details" : "Reload the specified material",
      "contents": "ReloadMaterial(${1:MaterialName.s}, ${2:Filename.s})$3",
      "kind"    : "function",
      "trigger" : "ReloadMaterial"
    },
    {
      "details" : "Releases or acquires the exclusive mouse access",
      "contents": "ReleaseMouse(${1:State})$2",
      "kind"    : "function",
      "trigger" : "ReleaseMouse"
    },
    {
      "details" : "Read the content from the specified file inside the specified memory buffer",
      "contents": "ReadData(${1:#File}, ${2:*MemoryBuffer})$3",
      "kind"    : "function",
      "trigger" : "ReadData"
    },
    {
      "details" : "Write a float (4 bytes) to the specified memory address",
      "contents": "PokeF(${1:*MemoryBuffer})$2",
      "kind"    : "function",
      "trigger" : "PokeF"
    },
    {
      "details" : "Returns the width (in pixel) of the movie",
      "contents": "MovieWidth(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "MovieWidth"
    },
    {
      "details" : "Init the FastCGI support",
      "contents": "InitFastCGI(${1:LocalPort})$2",
      "kind"    : "function",
      "trigger" : "InitFastCGI"
    },
    {
      "details" : "Returns the width, in pixel, the specified #Image",
      "contents": "ImageWidth(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "ImageWidth"
    },
    {
      "details" : "Prepares the image for 2D vector graphic operations",
      "contents": "ImageVectorOutput(${1:#Image})$2",
      "kind"    : "function",
      "trigger" : "ImageVectorOutput"
    },
    {
      "details" : "Get the specified #Texture as defined in the script file",
      "contents": "GetScriptTexture(${1:#Texture})$2",
      "kind"    : "function",
      "trigger" : "GetScriptTexture"
    },
    {
      "details" : "Get a material defined in scripts files",
      "contents": "GetScriptMaterial(${1:#Material})$2",
      "kind"    : "function",
      "trigger" : "GetScriptMaterial"
    },
    {
      "details" : "Get the #NodeAnimation weight",
      "contents": "GetNodeAnimationWeight(${1:#NodeAnimation})$2",
      "kind"    : "function",
      "trigger" : "GetNodeAnimationWeight"
    },
    {
      "details" : "Examines all the available screen mode",
      "contents": "ExamineScreenModes()$1",
      "kind"    : "function",
      "trigger" : "ExamineScreenModes"
    },
    {
      "details" : "Returns the width (in pixels) of the specified desktop",
      "contents": "DesktopWidth(${1:#Desktop})$2",
      "kind"    : "function",
      "trigger" : "DesktopWidth"
    },
    {
      "details" : "Creates a new empty popup menu",
      "contents": "CreatePopupMenu(${1:#Menu})$2",
      "kind"    : "function",
      "trigger" : "CreatePopupMenu"
    },
    {
      "details" : "Convert a point between coordinate systems",
      "contents": "ConvertCoordinateY(${1:x.d})$2",
      "kind"    : "function",
      "trigger" : "ConvertCoordinateY"
    },
    {
      "details" : "Use a conical gradient when gradient drawing is enabled",
      "contents": "ConicalGradient(${1:x}, ${2:y})$3",
      "kind"    : "function",
      "trigger" : "ConicalGradient"
    },
    {
      "details" : "Change the #Billboard absolute location, relative to the #BillboardGroup",
      "contents": "BillboardLocate(${1:#Billboard}, ${2:#BillboardGroup}, ${3:x}, ${4:y})$5",
      "kind"    : "function",
      "trigger" : "BillboardLocate"
    },
    {
      "details" : "Add a new header to the answer",
      "contents": "WriteCGIHeader(${1:Name.s})$2",
      "kind"    : "function",
      "trigger" : "WriteCGIHeader"
    },
    {
      "details" : "Transform a string into a numeric value",
      "contents": "Val(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "Val"
    },
    {
      "details" : "Removes all the \"space\" or given characters located at the beginning and at the end of a string",
      "contents": "Trim(${1:String.s})$2",
      "kind"    : "function",
      "trigger" : "Trim"
    },
    {
      "details" : "Returns 1 if the object is defined, or 0 if not",
      "contents": "Defined(${1:Name})$2",
      "kind"    : "function",
      "trigger" : "Defined"
    },
    {
      "details" : "Test the expression and return #True or #False",
      "contents": "Bool(${1:Expression})$2",
      "kind"    : "function",
      "trigger" : "Bool"
    },
    {
      "details" : "Changes the sun attributes",
      "contents": "Sun(${1:x}, ${2:y}, ${3:z})$4",
      "kind"    : "function",
      "trigger" : "Sun"
    },
    {
      "details" : "Stop the specified sound (if it was playing)",
      "contents": "StopSound(${1:#Sound})$2",
      "kind"    : "function",
      "trigger" : "StopSound"
    },
    {
      "details" : "Create a Splitter gadget in the current GadgetList",
      "contents": "SplitterGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:#Gadget1})$7",
      "kind"    : "function",
      "trigger" : "SplitterGadget"
    },
    {
      "details" : "Returns the second value of the specified date (between 0 and 59)",
      "contents": "Second(${1:Date})$2",
      "kind"    : "function",
      "trigger" : "Second"
    },
    {
      "details" : "Returns the red component of the given color",
      "contents": "Red(${1:Color})$2",
      "kind"    : "function",
      "trigger" : "Red"
    },
    {
      "details" : "Download a file from an URL",
      "contents": "ReceiveHTTPFile(${1:URL.s})$2",
      "kind"    : "function",
      "trigger" : "ReceiveHTTPFile"
    },
    {
      "details" : "Pitch the specified object",
      "contents": "Pitch(${1:ObjectID}, ${2:Value.f})$3",
      "kind"    : "function",
      "trigger" : "Pitch"
    },
    {
      "details" : "Get the depth of the current drawing output",
      "contents": "OutputDepth()$1",
      "kind"    : "function",
      "trigger" : "OutputDepth"
    },
    {
      "details" : "Move the #ParticleEmitter relative to its previous position",
      "contents": "MoveParticleEmitter(${1:#ParticleEmitter}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "MoveParticleEmitter"
    },
    {
      "details" : "Returns the minute value of the specified date (between 0 and 59)",
      "contents": "Minute(${1:Date})$2",
      "kind"    : "function",
      "trigger" : "Minute"
    },
    {
      "details" : "Try to open and prepare a movie for later playback",
      "contents": "LoadMovie(${1:#Movie})$2",
      "kind"    : "function",
      "trigger" : "LoadMovie"
    },
    {
      "details" : "Returns the string representation of the given IP address",
      "contents": "IPString(${1:IPAddress})$2",
      "kind"    : "function",
      "trigger" : "IPString"
    },
    {
      "details" : "Creates a frame gadget in the current GadgetList",
      "contents": "FrameGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "kind"    : "function",
      "trigger" : "FrameGadget"
    },
    {
      "details" : "Disable all user input to the window",
      "contents": "DisableWindow3D(${1:#Window3D})$2",
      "kind"    : "function",
      "trigger" : "DisableWindow3D"
    },
    {
      "details" : "Disable all user input to the window",
      "contents": "DisableWindow(${1:#Window})$2",
      "kind"    : "function",
      "trigger" : "DisableWindow"
    },
    {
      "details" : "Disable or enable a gadget",
      "contents": "DisableGadget3D(${1:#Gadget3D})$2",
      "kind"    : "function",
      "trigger" : "DisableGadget3D"
    },
    {
      "details" : "Disable or enable a gadget",
      "contents": "DisableGadget(${1:#Gadget})$2",
      "kind"    : "function",
      "trigger" : "DisableGadget"
    },
    {
      "details" : "Returns the number of processors available",
      "contents": "CountCPUs()$1",
      "kind"    : "function",
      "trigger" : "CountCPUs"
    },
    {
      "details" : "Returns the hyperbolic cosine of the specified angle",
      "contents": "CosH(${1:Angle})$2",
      "kind"    : "function",
      "trigger" : "CosH"
    },
    {
      "details" : "Use a circular gradient when gradient drawing is enabled",
      "contents": "CircularGradient(${1:x}, ${2:y})$3",
      "kind"    : "function",
      "trigger" : "CircularGradient"
    },
    {
      "details" : "Return the Y position, in pixels, of the 3D point",
      "contents": "CameraProjectionY(${1:#Camera}, ${2:x}, ${3:y})$4",
      "kind"    : "function",
      "trigger" : "CameraProjectionY"
    },
    {
      "details" : "Returns a new date",
      "contents": "AddDate(${1:Date}, ${2:Type})$3",
      "kind"    : "function",
      "trigger" : "AddDate"
    }
  ]
}